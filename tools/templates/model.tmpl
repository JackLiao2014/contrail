package models

{% if type.Type == "object" %}
// Make{{ name }} makes {{ name }}
func Make{{ name }}() *{{name}}{
    return &{{name}}{
    //TODO(nati): Apply default
    {% for property in type.OrderedProperties %}{% if property.GoType == "string" %}{{ property.GoName }}: "",
        {% elif property.GoType == "[]string" %}{{ property.GoName }}: []string{},
        {% elif property.GoType == "[]interface" %}{{ property.GoName }}: []interface{},
        {% elif property.GoType == "map[string]string" %}{{ property.GoName }}: map[string]string{},
        {% elif property.GoType == "map[string]interface{}" %}{{ property.GoName }}: map[string]interface{}{},
        {% elif property.GoType == "bool" %}{{ property.GoName }}: false,
        {% elif property.GoType == "int64" %}{{ property.GoName }}: 0,
        {% elif property.GoType == "float" %}{{ property.GoName }}: 0,
        {% elif property.Type == "array"%}
            {% if property.Items.Type == "string" %}
                {{ property.GoName }}: []string{},
            {% elif property.Items.Type == "integer"%}
                {{ property.GoName }}: []int64{},
            {% elif property.Items.GoType %}
                {{ property.GoName }}:  Make{{ property.Items.GoType }}Slice(),
            {% endif %}
        {% else %}{{ property.GoName }}: Make{{ property.GoType }}(),
        {% endif %}{% endfor %}
    }
}

// Make{{ name }}Slice() makes a slice of {{ name }}
func Make{{ name }}Slice() []{% if type.Properties %}*{% endif %}{{ name }} {
    return []{% if type.Properties %}*{% endif %}{{ name }}{}
}
{% endif %}

