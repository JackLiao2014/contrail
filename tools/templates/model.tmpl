package models
// {{ name }}

{% if type.Type == "object" %}

import "encoding/json"

// {{ name }} {{ type.description }}
//proteus:generate
type {{ name }} struct {
{% for property in type.OrderedProperties %}
    {{ property.GoName }} {% if property.Type == "object" and property.Properties %}*{% endif %}{% if property.GoType != "bool" %}{{ property.GoType }} `json:"{{ property.ID }},omitempty"`{% else %}{{ property.GoType }} `json:"{{ property.ID }}"`{% endif %}{% endfor %}
{% for linkTo, reference in references %}
    {{ reference.GoName }}Refs []*{{ type.GoName }}{{ reference.GoName }}Ref `json:"{{linkTo}}_refs,omitempty"`{% endfor %}
{% for backref in children %}
    {% set child = backref.LinkTo %}
    {{ child.JSONSchema.GoName }}s []*{{ child.JSONSchema.GoName }} `json:"{{ child.ID }}s,omitempty"`{% endfor %}
}

{% for linkTo, reference in references %}
// {{ type.GoName }}{{ reference.GoName }}Ref references each other
type {{ type.GoName }}{{ reference.GoName }}Ref struct {
    UUID string `json:"uuid"`
    To   []string `json:"to"`//FQDN
    {% if reference.RefType %}
    Attr *{{ reference.RefType }}
    {% endif %}
}
{% endfor %}

// Make{{ name }} makes {{ name }}
func Make{{ name }}() *{{name}}{
    return &{{name}}{
    //TODO(nati): Apply default
    {% for property in type.OrderedProperties %}{% if property.GoType == "string" %}{{ property.GoName }}: "",
        {% elif property.GoType == "[]string" %}{{ property.GoName }}: []string{},
        {% elif property.GoType == "map[string]string" %}{{ property.GoName }}: map[string]string{},
        {% elif property.GoType == "map[string]interface{}" %}{{ property.GoName }}: map[string]interface{}{},
        {% elif property.GoType == "bool" %}{{ property.GoName }}: false,
        {% elif property.GoType == "int" %}{{ property.GoName }}: 0,
        {% elif property.GoType == "float" %}{{ property.GoName }}: 0,
        {% elif property.Type == "array"%}
            {% if property.Items.Type == "string" %}
                {{ property.GoName }}: []string{},
            {% elif property.Items.Type == "integer"%}
                {{ property.GoName }}: []int{},
            {% elif property.Items.GoType %}
                {{ property.GoName }}:  Make{{ property.Items.GoType }}Slice(),
            {% else %}
                {{ property.GoName }}:  Make{{ property.GoType }}(),
            {% endif %}
        {% else %}{{ property.GoName }}: Make{{ property.GoType }}(),
        {% endif %}{% endfor %}
    }
}

{% else %}
//proteus:generate
type {{ name }} {{ type.GoType }}

// Make{{ name }} makes {{ name }}
func Make{{ name }}() {{ name }} {
    var data {{name}}
    return data
}

{% endif %}

// Make{{ name }}Slice() makes a slice of {{ name }}
func Make{{ name }}Slice() []{% if type.Type == "object" and type.Properties %}*{% endif %}{{ name }} {
    return []{% if type.Type == "object" and type.Properties %}*{% endif %}{{ name }}{}
}
