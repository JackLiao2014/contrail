package db

import ("fmt"
        "testing"

        "github.com/Juniper/contrail/pkg/common"
        "github.com/Juniper/contrail/pkg/generated/models")

func Test{{ schema.JSONSchema.GoName }}(t *testing.T) {
    t.Parallel()
    db := testDB
    common.UseTable(db, "{{ schema.ID }}")
    defer func(){
        common.ClearTable(db, "{{ schema.ID }}")
        if p := recover(); p != nil {
			panic(p)
		}
    }()
    model := models.Make{{ schema.JSONSchema.GoName }}()
    model.UUID = "dummy_uuid"

    err := common.DoInTransaction(db, func (tx *sql.Tx) error {
        return Create{{ schema.JSONSchema.GoName }}(tx, model)
    })
    if err != nil {
        t.Fatal("create failed", err)
    }

    err = common.DoInTransaction(db, func (tx *sql.Tx) error {
        models, err := List{{ schema.JSONSchema.GoName }}(tx, &common.ListSpec{Limit: 1})
        if err != nil {
            return err
        }
        if len(models) != 1 {
            return fmt.Errorf("expected one element")
        }
        return nil
    })
    if err != nil {
        t.Fatal("list failed", err)
    }

    err = common.DoInTransaction(db, func (tx *sql.Tx) error {
        model, err := Show{{ schema.JSONSchema.GoName }}(tx, model.UUID)
        if err != nil {
            return err
        }
        if model == nil || model.UUID != "dummy_uuid" {
            return fmt.Errorf("show failed")
        }
        return nil
    })
    if err != nil {
        t.Fatal("show failed", err)
    }

    err = common.DoInTransaction(db, func (tx *sql.Tx) error {
        return Delete{{ schema.JSONSchema.GoName }}(tx, model.UUID)
    })
    if err != nil {
        t.Fatal("delete failed", err)
    }

    err = common.DoInTransaction(db, func (tx *sql.Tx) error {
        models, err := List{{ schema.JSONSchema.GoName }}(tx, &common.ListSpec{Limit: 1})
        if err != nil {
            return err
        }
        if len(models) != 0 {
            return fmt.Errorf("expected no element")
        }
        return nil
    })
    if err != nil {
        t.Fatal("list failed", err)
    }
    return
}