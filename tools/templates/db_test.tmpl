// nolint
package db

import (
        "context"
        "time"
        "testing"
        "github.com/satori/go.uuid"

        "github.com/Juniper/contrail/pkg/common"
        "github.com/Juniper/contrail/pkg/models"
        "github.com/pkg/errors"
        )

//For skip import error.
var _ = errors.New("")

func Test{{ schema.JSONSchema.GoName }}(t *testing.T) {
    t.Parallel()
    db := &DB{
        DB: testDB,
        Dialect: NewDialect("mysql"),
    }
	db.initQueryBuilders()
    ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()

    model := models.Make{{ schema.JSONSchema.GoName }}()
    model.UUID = uuid.NewV4().String()
    model.FQName = []string{"default", "default-domain", model.UUID}
    model.Perms2.Owner = "admin"
    var err error

    // Create referred objects
    {% for linkTo, reference in schema.References %}
    var {{ reference.GoName }}CreateRef []*models.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref
    var {{ reference.GoName }}RefModel *models.{{ reference.GoName }}

    {{ reference.GoName }}RefUUID := uuid.NewV4().String()
    {{ reference.GoName }}RefUUID1 := uuid.NewV4().String() 
    {{ reference.GoName }}RefUUID2 := uuid.NewV4().String()

    {{ reference.GoName }}RefModel = models.Make{{ reference.GoName }}()
	{{ reference.GoName }}RefModel.UUID = {{ reference.GoName }}RefUUID
    {{ reference.GoName }}RefModel.FQName = []string{"test", {{ reference.GoName }}RefUUID}
    _, err = db.Create{{ reference.GoName }}(ctx, &models.Create{{ reference.GoName }}Request{
            {{ reference.GoName }}: {{ reference.GoName }}RefModel,
    })
    {{ reference.GoName }}RefModel.UUID = {{ reference.GoName }}RefUUID1
    {{ reference.GoName }}RefModel.FQName = []string{"test", {{ reference.GoName }}RefUUID1}
    _, err = db.Create{{ reference.GoName }}(ctx, &models.Create{{ reference.GoName }}Request{
            {{ reference.GoName }}: {{ reference.GoName }}RefModel,
        })
    {{ reference.GoName }}RefModel.UUID = {{ reference.GoName }}RefUUID2
    {{ reference.GoName }}RefModel.FQName = []string{"test", {{ reference.GoName }}RefUUID2}
    _, err = db.Create{{ reference.GoName }}(ctx, &models.Create{{ reference.GoName }}Request{
            {{ reference.GoName }}: {{ reference.GoName }}RefModel,
    })
    if err != nil {
        t.Fatal("ref create failed", err)
    }
    {{ reference.GoName }}CreateRef = append({{ reference.GoName }}CreateRef, 
        &models.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref{UUID: {{ reference.GoName }}RefUUID, To: []string{"test", {{ reference.GoName }}RefUUID}})
    {{ reference.GoName }}CreateRef = append({{ reference.GoName }}CreateRef, 
        &models.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref{UUID: {{ reference.GoName }}RefUUID2, To: []string{"test", {{ reference.GoName }}RefUUID2}})
    model.{{ reference.GoName }}Refs = {{ reference.GoName }}CreateRef
    {% endfor %}

    //create project to which resource is shared
    projectModel := models.MakeProject()

	projectModel.UUID = uuid.NewV4().String() 
	projectModel.FQName = []string{"default-domain-test", projectModel.UUID}
	projectModel.Perms2.Owner = "admin"

    var createShare []*models.ShareType
    createShare = append(createShare, &models.ShareType{Tenant:"default-domain-test:" + projectModel.UUID, TenantAccess:7})
    model.Perms2.Share = createShare

    _, err = db.CreateProject(ctx, &models.CreateProjectRequest{
        Project: projectModel,
    })
    if err != nil {
        t.Fatal("project create failed", err)
    }

    _, err = db.Create{{ schema.JSONSchema.GoName }}(ctx,
            &models.Create{{ schema.JSONSchema.GoName }}Request{
                {{ schema.JSONSchema.GoName }}: model,
    })

    if err != nil {
        t.Fatal("create failed", err)
    }

    response, err := db.List{{ schema.JSONSchema.GoName }}(ctx, &models.List{{ schema.JSONSchema.GoName }}Request{
            Spec: &models.ListSpec{Limit: 1,
                    Filters: []*models.Filter{
                        &models.Filter{
                            Key: "uuid",
                            Values: []string{model.UUID},
                        },
                    },
            }})
    if err != nil {
        t.Fatal("list failed", err)
    }
    if len(response.{{ schema.JSONSchema.GoName }}s) != 1 {
        t.Fatal("expected one element", err)
    }

    ctxDemo := context.WithValue(ctx, "auth", common.NewAuthContext("default", "demo", "demo", []string{}))
    _, err = db.Delete{{ schema.JSONSchema.GoName }}(ctxDemo,
            &models.Delete{{ schema.JSONSchema.GoName }}Request{
                ID: model.UUID},
    )
    if err == nil {
        t.Fatal("auth failed")
    }

    _, err = db.Create{{ schema.JSONSchema.GoName }}(ctx,
            &models.Create{{ schema.JSONSchema.GoName }}Request{
                {{ schema.JSONSchema.GoName }}: model})
    if err == nil {
        t.Fatal("Raise Error On Duplicate Create failed", err)
    }

    _, err = db.Delete{{ schema.JSONSchema.GoName }}(ctx,
            &models.Delete{{ schema.JSONSchema.GoName }}Request{
                ID: model.UUID})
    if err != nil {
        t.Fatal("delete failed", err)
    }

    _, err = db.Get{{ schema.JSONSchema.GoName }}(ctx, &models.Get{{ schema.JSONSchema.GoName }}Request{
            ID: model.UUID})
    if err == nil {
        t.Fatal("expected not found error")
    }

    //Delete the project created for sharing
    _, err = db.DeleteProject(ctx, &models.DeleteProjectRequest{
            ID: projectModel.UUID})
	if err != nil {
		t.Fatal("delete project failed", err)
	}
    return
}
