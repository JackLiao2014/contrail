syntax = "proto3";
package github.com.Juniper.contrail.pkg.generated.models;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.protosizer_all) = true;
option (gogoproto.sizer_all) = false;
option go_package = "models";




message AccessControlList {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    int64 access_control_list_hash = 9 [(gogoproto.customname) = "AccessControlListHash"];
    
    AclEntriesType access_control_list_entries = 10 [(gogoproto.customname) = "AccessControlListEntries"];
    
}



message AddressGroup {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    SubnetListType address_group_prefix = 9 [(gogoproto.customname) = "AddressGroupPrefix"];
    
}



message Alarm {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    AlarmOrList alarm_rules = 9 [(gogoproto.customname) = "AlarmRules"];
    
    UveKeysType uve_keys = 10 [(gogoproto.customname) = "UveKeys"];
    
    int64 alarm_severity = 11 [(gogoproto.customname) = "AlarmSeverity"];
    
}



message AliasIPPool {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
}



message AliasIP {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string alias_ip_address = 9 [(gogoproto.customname) = "AliasIPAddress"];
    
    string alias_ip_address_family = 10 [(gogoproto.customname) = "AliasIPAddressFamily"];
    
}



message AnalyticsNode {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string analytics_node_ip_address = 9 [(gogoproto.customname) = "AnalyticsNodeIPAddress"];
    
}



message APIAccessList {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    RbacRuleEntriesType api_access_list_entries = 9 [(gogoproto.customname) = "APIAccessListEntries"];
    
}



message ApplicationPolicySet {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    bool all_applications = 9 [(gogoproto.customname) = "AllApplications"];
    
}



message BGPAsAService {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    bool bgpaas_shared = 9 [(gogoproto.customname) = "BgpaasShared"];
    
    string bgpaas_session_attributes = 10 [(gogoproto.customname) = "BgpaasSessionAttributes"];
    
    bool bgpaas_suppress_route_advertisement = 11 [(gogoproto.customname) = "BgpaasSuppressRouteAdvertisement"];
    
    bool bgpaas_ipv4_mapped_ipv6_nexthop = 12 [(gogoproto.customname) = "BgpaasIpv4MappedIpv6Nexthop"];
    
    string bgpaas_ip_address = 13 [(gogoproto.customname) = "BgpaasIPAddress"];
    
    int64 autonomous_system = 14 [(gogoproto.customname) = "AutonomousSystem"];
    
}



message BGPRouter {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
}



message BGPVPN {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    RouteTargetList route_target_list = 9 [(gogoproto.customname) = "RouteTargetList"];
    
    RouteTargetList import_route_target_list = 10 [(gogoproto.customname) = "ImportRouteTargetList"];
    
    RouteTargetList export_route_target_list = 11 [(gogoproto.customname) = "ExportRouteTargetList"];
    
    string bgpvpn_type = 12 [(gogoproto.customname) = "BGPVPNType"];
    
}



message BridgeDomain {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    int64 mac_aging_time = 9 [(gogoproto.customname) = "MacAgingTime"];
    
    int64 isid = 10 [(gogoproto.customname) = "Isid"];
    
    bool mac_learning_enabled = 11 [(gogoproto.customname) = "MacLearningEnabled"];
    
    MACMoveLimitControlType mac_move_control = 12 [(gogoproto.customname) = "MacMoveControl"];
    
    MACLimitControlType mac_limit_control = 13 [(gogoproto.customname) = "MacLimitControl"];
    
}



message ConfigNode {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string config_node_ip_address = 9 [(gogoproto.customname) = "ConfigNodeIPAddress"];
    
}



message ConfigRoot {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
}



message CustomerAttachment {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
}



message DatabaseNode {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string database_node_ip_address = 9 [(gogoproto.customname) = "DatabaseNodeIPAddress"];
    
}



message DiscoveryServiceAssignment {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
}



message Domain {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    DomainLimitsType domain_limits = 9 [(gogoproto.customname) = "DomainLimits"];
    
}



message DsaRule {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    DiscoveryServiceAssignmentType dsa_rule_entry = 9 [(gogoproto.customname) = "DsaRuleEntry"];
    
}



message E2ServiceProvider {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    bool e2_service_provider_promiscuous = 9 [(gogoproto.customname) = "E2ServiceProviderPromiscuous"];
    
}



message FirewallPolicy {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
}



message FirewallRule {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    FirewallRuleEndpointType endpoint_1 = 9 [(gogoproto.customname) = "Endpoint1"];
    
    FirewallRuleEndpointType endpoint_2 = 10 [(gogoproto.customname) = "Endpoint2"];
    
    ActionListType action_list = 11 [(gogoproto.customname) = "ActionList"];
    
    FirewallServiceType service = 12 [(gogoproto.customname) = "Service"];
    
    string direction = 13 [(gogoproto.customname) = "Direction"];
    
    FirewallRuleMatchTagsTypeIdList match_tag_types = 14 [(gogoproto.customname) = "MatchTagTypes"];
    
    FirewallRuleMatchTagsType match_tags = 15 [(gogoproto.customname) = "MatchTags"];
    
}



message FloatingIPPool {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    FloatingIpPoolSubnetType floating_ip_pool_subnets = 9 [(gogoproto.customname) = "FloatingIPPoolSubnets"];
    
}



message FloatingIP {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string floating_ip_address_family = 9 [(gogoproto.customname) = "FloatingIPAddressFamily"];
    
    PortMappings floating_ip_port_mappings = 10 [(gogoproto.customname) = "FloatingIPPortMappings"];
    
    bool floating_ip_is_virtual_ip = 11 [(gogoproto.customname) = "FloatingIPIsVirtualIP"];
    
    string floating_ip_address = 12 [(gogoproto.customname) = "FloatingIPAddress"];
    
    bool floating_ip_port_mappings_enable = 13 [(gogoproto.customname) = "FloatingIPPortMappingsEnable"];
    
    string floating_ip_fixed_ip_address = 14 [(gogoproto.customname) = "FloatingIPFixedIPAddress"];
    
    string floating_ip_traffic_direction = 15 [(gogoproto.customname) = "FloatingIPTrafficDirection"];
    
}



message ForwardingClass {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    int64 forwarding_class_dscp = 9 [(gogoproto.customname) = "ForwardingClassDSCP"];
    
    int64 forwarding_class_vlan_priority = 10 [(gogoproto.customname) = "ForwardingClassVlanPriority"];
    
    int64 forwarding_class_mpls_exp = 11 [(gogoproto.customname) = "ForwardingClassMPLSExp"];
    
    int64 forwarding_class_id = 12 [(gogoproto.customname) = "ForwardingClassID"];
    
}



message GlobalQosConfig {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    ControlTrafficDscpType control_traffic_dscp = 9 [(gogoproto.customname) = "ControlTrafficDSCP"];
    
}



message GlobalSystemConfig {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string config_version = 9 [(gogoproto.customname) = "ConfigVersion"];
    
    BGPaaServiceParametersType bgpaas_parameters = 10 [(gogoproto.customname) = "BgpaasParameters"];
    
    bool alarm_enable = 11 [(gogoproto.customname) = "AlarmEnable"];
    
    MACMoveLimitControlType mac_move_control = 12 [(gogoproto.customname) = "MacMoveControl"];
    
    PluginProperties plugin_tuning = 13 [(gogoproto.customname) = "PluginTuning"];
    
    bool ibgp_auto_mesh = 14 [(gogoproto.customname) = "IbgpAutoMesh"];
    
    int64 mac_aging_time = 15 [(gogoproto.customname) = "MacAgingTime"];
    
    bool bgp_always_compare_med = 16 [(gogoproto.customname) = "BGPAlwaysCompareMed"];
    
    UserDefinedLogStatList user_defined_log_statistics = 17 [(gogoproto.customname) = "UserDefinedLogStatistics"];
    
    GracefulRestartParametersType graceful_restart_parameters = 18 [(gogoproto.customname) = "GracefulRestartParameters"];
    
    SubnetListType ip_fabric_subnets = 19 [(gogoproto.customname) = "IPFabricSubnets"];
    
    int64 autonomous_system = 20 [(gogoproto.customname) = "AutonomousSystem"];
    
    MACLimitControlType mac_limit_control = 21 [(gogoproto.customname) = "MacLimitControl"];
    
}



message GlobalVrouterConfig {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    EcmpHashingIncludeFields ecmp_hashing_include_fields = 9 [(gogoproto.customname) = "EcmpHashingIncludeFields"];
    
    FlowAgingTimeoutList flow_aging_timeout_list = 10 [(gogoproto.customname) = "FlowAgingTimeoutList"];
    
    string forwarding_mode = 11 [(gogoproto.customname) = "ForwardingMode"];
    
    int64 flow_export_rate = 12 [(gogoproto.customname) = "FlowExportRate"];
    
    LinklocalServicesTypes linklocal_services = 13 [(gogoproto.customname) = "LinklocalServices"];
    
    EncapsulationPrioritiesType encapsulation_priorities = 14 [(gogoproto.customname) = "EncapsulationPriorities"];
    
    string vxlan_network_identifier_mode = 15 [(gogoproto.customname) = "VxlanNetworkIdentifierMode"];
    
    bool enable_security_logging = 16 [(gogoproto.customname) = "EnableSecurityLogging"];
    
}



message InstanceIP {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    bool service_health_check_ip = 9 [(gogoproto.customname) = "ServiceHealthCheckIP"];
    
    SubnetType secondary_ip_tracking_ip = 10 [(gogoproto.customname) = "SecondaryIPTrackingIP"];
    
    string instance_ip_address = 11 [(gogoproto.customname) = "InstanceIPAddress"];
    
    string instance_ip_mode = 12 [(gogoproto.customname) = "InstanceIPMode"];
    
    string subnet_uuid = 13 [(gogoproto.customname) = "SubnetUUID"];
    
    string instance_ip_family = 14 [(gogoproto.customname) = "InstanceIPFamily"];
    
    bool service_instance_ip = 15 [(gogoproto.customname) = "ServiceInstanceIP"];
    
    bool instance_ip_local_ip = 16 [(gogoproto.customname) = "InstanceIPLocalIP"];
    
    bool instance_ip_secondary = 17 [(gogoproto.customname) = "InstanceIPSecondary"];
    
}



message InterfaceRouteTable {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    RouteTableType interface_route_table_routes = 9 [(gogoproto.customname) = "InterfaceRouteTableRoutes"];
    
}



message LoadbalancerHealthmonitor {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    LoadbalancerHealthmonitorType loadbalancer_healthmonitor_properties = 9 [(gogoproto.customname) = "LoadbalancerHealthmonitorProperties"];
    
}



message LoadbalancerListener {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    LoadbalancerListenerType loadbalancer_listener_properties = 9 [(gogoproto.customname) = "LoadbalancerListenerProperties"];
    
}



message LoadbalancerMember {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    LoadbalancerMemberType loadbalancer_member_properties = 9 [(gogoproto.customname) = "LoadbalancerMemberProperties"];
    
}



message LoadbalancerPool {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    LoadbalancerPoolType loadbalancer_pool_properties = 9 [(gogoproto.customname) = "LoadbalancerPoolProperties"];
    
    KeyValuePairs loadbalancer_pool_custom_attributes = 10 [(gogoproto.customname) = "LoadbalancerPoolCustomAttributes"];
    
    string loadbalancer_pool_provider = 11 [(gogoproto.customname) = "LoadbalancerPoolProvider"];
    
}



message Loadbalancer {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    LoadbalancerType loadbalancer_properties = 9 [(gogoproto.customname) = "LoadbalancerProperties"];
    
    string loadbalancer_provider = 10 [(gogoproto.customname) = "LoadbalancerProvider"];
    
}



message LogicalInterface {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    int64 logical_interface_vlan_tag = 9 [(gogoproto.customname) = "LogicalInterfaceVlanTag"];
    
    string logical_interface_type = 10 [(gogoproto.customname) = "LogicalInterfaceType"];
    
}



message LogicalRouter {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string vxlan_network_identifier = 9 [(gogoproto.customname) = "VxlanNetworkIdentifier"];
    
    RouteTargetList configured_route_target_list = 10 [(gogoproto.customname) = "ConfiguredRouteTargetList"];
    
}



message Namespace {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    SubnetType namespace_cidr = 9 [(gogoproto.customname) = "NamespaceCidr"];
    
}



message NetworkDeviceConfig {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
}



message NetworkIpam {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    IpamType network_ipam_mgmt = 9 [(gogoproto.customname) = "NetworkIpamMGMT"];
    
    IpamSubnets ipam_subnets = 10 [(gogoproto.customname) = "IpamSubnets"];
    
    string ipam_subnet_method = 11 [(gogoproto.customname) = "IpamSubnetMethod"];
    
}



message NetworkPolicy {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    PolicyEntriesType network_policy_entries = 9 [(gogoproto.customname) = "NetworkPolicyEntries"];
    
}



message PeeringPolicy {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string peering_service = 9 [(gogoproto.customname) = "PeeringService"];
    
}



message PhysicalInterface {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string ethernet_segment_identifier = 9 [(gogoproto.customname) = "EthernetSegmentIdentifier"];
    
}



message PhysicalRouter {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string physical_router_management_ip = 9 [(gogoproto.customname) = "PhysicalRouterManagementIP"];
    
    SNMPCredentials physical_router_snmp_credentials = 10 [(gogoproto.customname) = "PhysicalRouterSNMPCredentials"];
    
    string physical_router_role = 11 [(gogoproto.customname) = "PhysicalRouterRole"];
    
    UserCredentials physical_router_user_credentials = 12 [(gogoproto.customname) = "PhysicalRouterUserCredentials"];
    
    string physical_router_vendor_name = 13 [(gogoproto.customname) = "PhysicalRouterVendorName"];
    
    bool physical_router_vnc_managed = 14 [(gogoproto.customname) = "PhysicalRouterVNCManaged"];
    
    string physical_router_product_name = 15 [(gogoproto.customname) = "PhysicalRouterProductName"];
    
    bool physical_router_lldp = 16 [(gogoproto.customname) = "PhysicalRouterLLDP"];
    
    string physical_router_loopback_ip = 17 [(gogoproto.customname) = "PhysicalRouterLoopbackIP"];
    
    string physical_router_image_uri = 18 [(gogoproto.customname) = "PhysicalRouterImageURI"];
    
    TelemetryStateInfo telemetry_info = 19 [(gogoproto.customname) = "TelemetryInfo"];
    
    bool physical_router_snmp = 20 [(gogoproto.customname) = "PhysicalRouterSNMP"];
    
    string physical_router_dataplane_ip = 21 [(gogoproto.customname) = "PhysicalRouterDataplaneIP"];
    
    JunosServicePorts physical_router_junos_service_ports = 22 [(gogoproto.customname) = "PhysicalRouterJunosServicePorts"];
    
}



message PolicyManagement {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
}



message PortTuple {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
}



message Project {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    bool vxlan_routing = 9 [(gogoproto.customname) = "VxlanRouting"];
    
    bool alarm_enable = 10 [(gogoproto.customname) = "AlarmEnable"];
    
    QuotaType quota = 11 [(gogoproto.customname) = "Quota"];
    
}



message ProviderAttachment {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
}



message QosConfig {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string qos_config_type = 9 [(gogoproto.customname) = "QosConfigType"];
    
    QosIdForwardingClassPairs mpls_exp_entries = 10 [(gogoproto.customname) = "MPLSExpEntries"];
    
    QosIdForwardingClassPairs vlan_priority_entries = 11 [(gogoproto.customname) = "VlanPriorityEntries"];
    
    int64 default_forwarding_class_id = 12 [(gogoproto.customname) = "DefaultForwardingClassID"];
    
    QosIdForwardingClassPairs dscp_entries = 13 [(gogoproto.customname) = "DSCPEntries"];
    
}



message QosQueue {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    int64 qos_queue_identifier = 9 [(gogoproto.customname) = "QosQueueIdentifier"];
    
    int64 max_bandwidth = 10 [(gogoproto.customname) = "MaxBandwidth"];
    
    int64 min_bandwidth = 11 [(gogoproto.customname) = "MinBandwidth"];
    
}



message RouteAggregate {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
}



message RouteTable {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    RouteTableType routes = 9 [(gogoproto.customname) = "Routes"];
    
}



message RouteTarget {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
}



message RoutingInstance {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
}



message RoutingPolicy {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
}



message SecurityGroup {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    PolicyEntriesType security_group_entries = 9 [(gogoproto.customname) = "SecurityGroupEntries"];
    
    int64 configured_security_group_id = 10 [(gogoproto.customname) = "ConfiguredSecurityGroupID"];
    
    int64 security_group_id = 11 [(gogoproto.customname) = "SecurityGroupID"];
    
}



message SecurityLoggingObject {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    SecurityLoggingObjectRuleListType security_logging_object_rules = 9 [(gogoproto.customname) = "SecurityLoggingObjectRules"];
    
    int64 security_logging_object_rate = 10 [(gogoproto.customname) = "SecurityLoggingObjectRate"];
    
}



message ServiceAppliance {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    UserCredentials service_appliance_user_credentials = 9 [(gogoproto.customname) = "ServiceApplianceUserCredentials"];
    
    string service_appliance_ip_address = 10 [(gogoproto.customname) = "ServiceApplianceIPAddress"];
    
    KeyValuePairs service_appliance_properties = 11 [(gogoproto.customname) = "ServiceApplianceProperties"];
    
}



message ServiceApplianceSet {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    KeyValuePairs service_appliance_set_properties = 9 [(gogoproto.customname) = "ServiceApplianceSetProperties"];
    
    string service_appliance_ha_mode = 10 [(gogoproto.customname) = "ServiceApplianceHaMode"];
    
    string service_appliance_driver = 11 [(gogoproto.customname) = "ServiceApplianceDriver"];
    
}



message ServiceConnectionModule {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string service_type = 9 [(gogoproto.customname) = "ServiceType"];
    
    string e2_service = 10 [(gogoproto.customname) = "E2Service"];
    
}



message ServiceEndpoint {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
}



message ServiceGroup {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    FirewallServiceGroupType service_group_firewall_service_list = 9 [(gogoproto.customname) = "ServiceGroupFirewallServiceList"];
    
}



message ServiceHealthCheck {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    ServiceHealthCheckType service_health_check_properties = 9 [(gogoproto.customname) = "ServiceHealthCheckProperties"];
    
}



message ServiceInstance {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    KeyValuePairs service_instance_bindings = 9 [(gogoproto.customname) = "ServiceInstanceBindings"];
    
    ServiceInstanceType service_instance_properties = 10 [(gogoproto.customname) = "ServiceInstanceProperties"];
    
}



message ServiceObject {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
}



message ServiceTemplate {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    ServiceTemplateType service_template_properties = 9 [(gogoproto.customname) = "ServiceTemplateProperties"];
    
}



message Subnet {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    SubnetType subnet_ip_prefix = 9 [(gogoproto.customname) = "SubnetIPPrefix"];
    
}



message Tag {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string tag_type_name = 9 [(gogoproto.customname) = "TagTypeName"];
    
    string tag_id = 10 [(gogoproto.customname) = "TagID"];
    
    string tag_value = 11 [(gogoproto.customname) = "TagValue"];
    
}



message TagType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string tag_type_id = 9 [(gogoproto.customname) = "TagTypeID"];
    
}



message User {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string password = 9 [(gogoproto.customname) = "Password"];
    
}



message VirtualDNSRecord {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    VirtualDnsRecordType virtual_DNS_record_data = 9 [(gogoproto.customname) = "VirtualDNSRecordData"];
    
}



message VirtualDNS {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    VirtualDnsType virtual_DNS_data = 9 [(gogoproto.customname) = "VirtualDNSData"];
    
}



message VirtualIP {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    VirtualIpType virtual_ip_properties = 9 [(gogoproto.customname) = "VirtualIPProperties"];
    
}



message VirtualMachineInterface {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    EcmpHashingIncludeFields ecmp_hashing_include_fields = 9 [(gogoproto.customname) = "EcmpHashingIncludeFields"];
    
    RouteTableType virtual_machine_interface_host_routes = 10 [(gogoproto.customname) = "VirtualMachineInterfaceHostRoutes"];
    
    MacAddressesType virtual_machine_interface_mac_addresses = 11 [(gogoproto.customname) = "VirtualMachineInterfaceMacAddresses"];
    
    DhcpOptionsListType virtual_machine_interface_dhcp_option_list = 12 [(gogoproto.customname) = "VirtualMachineInterfaceDHCPOptionList"];
    
    KeyValuePairs virtual_machine_interface_bindings = 13 [(gogoproto.customname) = "VirtualMachineInterfaceBindings"];
    
    bool virtual_machine_interface_disable_policy = 14 [(gogoproto.customname) = "VirtualMachineInterfaceDisablePolicy"];
    
    AllowedAddressPairs virtual_machine_interface_allowed_address_pairs = 15 [(gogoproto.customname) = "VirtualMachineInterfaceAllowedAddressPairs"];
    
    FatFlowProtocols virtual_machine_interface_fat_flow_protocols = 16 [(gogoproto.customname) = "VirtualMachineInterfaceFatFlowProtocols"];
    
    bool vlan_tag_based_bridge_domain = 17 [(gogoproto.customname) = "VlanTagBasedBridgeDomain"];
    
    string virtual_machine_interface_device_owner = 18 [(gogoproto.customname) = "VirtualMachineInterfaceDeviceOwner"];
    
    VrfAssignTableType vrf_assign_table = 19 [(gogoproto.customname) = "VRFAssignTable"];
    
    bool port_security_enabled = 20 [(gogoproto.customname) = "PortSecurityEnabled"];
    
    VirtualMachineInterfacePropertiesType virtual_machine_interface_properties = 21 [(gogoproto.customname) = "VirtualMachineInterfaceProperties"];
    
}



message VirtualMachine {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
}



message VirtualNetwork {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    VirtualNetworkType virtual_network_properties = 9 [(gogoproto.customname) = "VirtualNetworkProperties"];
    
    EcmpHashingIncludeFields ecmp_hashing_include_fields = 10 [(gogoproto.customname) = "EcmpHashingIncludeFields"];
    
    int64 virtual_network_network_id = 11 [(gogoproto.customname) = "VirtualNetworkNetworkID"];
    
    string address_allocation_mode = 12 [(gogoproto.customname) = "AddressAllocationMode"];
    
    bool pbb_evpn_enable = 13 [(gogoproto.customname) = "PBBEvpnEnable"];
    
    bool router_external = 14 [(gogoproto.customname) = "RouterExternal"];
    
    RouteTargetList import_route_target_list = 15 [(gogoproto.customname) = "ImportRouteTargetList"];
    
    int64 mac_aging_time = 16 [(gogoproto.customname) = "MacAgingTime"];
    
    ProviderDetails provider_properties = 17 [(gogoproto.customname) = "ProviderProperties"];
    
    RouteTargetList route_target_list = 18 [(gogoproto.customname) = "RouteTargetList"];
    
    bool mac_learning_enabled = 19 [(gogoproto.customname) = "MacLearningEnabled"];
    
    RouteTargetList export_route_target_list = 20 [(gogoproto.customname) = "ExportRouteTargetList"];
    
    bool flood_unknown_unicast = 21 [(gogoproto.customname) = "FloodUnknownUnicast"];
    
    bool pbb_etree_enable = 22 [(gogoproto.customname) = "PBBEtreeEnable"];
    
    bool layer2_control_word = 23 [(gogoproto.customname) = "Layer2ControlWord"];
    
    bool external_ipam = 24 [(gogoproto.customname) = "ExternalIpam"];
    
    bool port_security_enabled = 25 [(gogoproto.customname) = "PortSecurityEnabled"];
    
    MACMoveLimitControlType mac_move_control = 26 [(gogoproto.customname) = "MacMoveControl"];
    
    bool multi_policy_service_chains_enabled = 27 [(gogoproto.customname) = "MultiPolicyServiceChainsEnabled"];
    
    MACLimitControlType mac_limit_control = 28 [(gogoproto.customname) = "MacLimitControl"];
    
    bool is_shared = 29 [(gogoproto.customname) = "IsShared"];
    
}



message VirtualRouter {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    bool virtual_router_dpdk_enabled = 9 [(gogoproto.customname) = "VirtualRouterDPDKEnabled"];
    
    string virtual_router_type = 10 [(gogoproto.customname) = "VirtualRouterType"];
    
    string virtual_router_ip_address = 11 [(gogoproto.customname) = "VirtualRouterIPAddress"];
    
}



message AppformixNodeRole {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"];
    
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"];
    
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"];
    
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"];
    
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"];
    
    string uuid = 6 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 8 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 11 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"];
    
}



message BaremetalNode {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string name = 9 [(gogoproto.customname) = "Name"];
    
    string ipmi_address = 10 [(gogoproto.customname) = "IpmiAddress"];
    
    string ipmi_username = 11 [(gogoproto.customname) = "IpmiUsername"];
    
    string ipmi_password = 12 [(gogoproto.customname) = "IpmiPassword"];
    
    int64 cpu_count = 13 [(gogoproto.customname) = "CPUCount"];
    
    string cpu_arch = 14 [(gogoproto.customname) = "CPUArch"];
    
    int64 disk_gb = 15 [(gogoproto.customname) = "DiskGB"];
    
    int64 memory_mb = 16 [(gogoproto.customname) = "MemoryMB"];
    
    string deploy_kernel = 17 [(gogoproto.customname) = "DeployKernel"];
    
    string deploy_ramdisk = 18 [(gogoproto.customname) = "DeployRamdisk"];
    
}



message BaremetalPort {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string mac_address = 9 [(gogoproto.customname) = "MacAddress"];
    
    string node = 10 [(gogoproto.customname) = "Node"];
    
    string switch_id = 11 [(gogoproto.customname) = "SwitchID"];
    
    string port_id = 12 [(gogoproto.customname) = "PortID"];
    
    string switch_info = 13 [(gogoproto.customname) = "SwitchInfo"];
    
    bool pxe_enabled = 14 [(gogoproto.customname) = "PxeEnabled"];
    
}



message ContrailAnalyticsDatabaseNodeRole {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"];
    
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"];
    
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"];
    
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"];
    
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"];
    
    string uuid = 6 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 8 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 11 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"];
    
}



message ContrailAnalyticsNode {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"];
    
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"];
    
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"];
    
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"];
    
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"];
    
    string uuid = 6 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 8 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 11 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"];
    
}



message ContrailCluster {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string config_audit_ttl = 9 [(gogoproto.customname) = "ConfigAuditTTL"];
    
    string contrail_webui = 10 [(gogoproto.customname) = "ContrailWebui"];
    
    string data_ttl = 11 [(gogoproto.customname) = "DataTTL"];
    
    string default_gateway = 12 [(gogoproto.customname) = "DefaultGateway"];
    
    string default_vrouter_bond_interface = 13 [(gogoproto.customname) = "DefaultVrouterBondInterface"];
    
    string default_vrouter_bond_interface_members = 14 [(gogoproto.customname) = "DefaultVrouterBondInterfaceMembers"];
    
    string flow_ttl = 15 [(gogoproto.customname) = "FlowTTL"];
    
    string statistics_ttl = 16 [(gogoproto.customname) = "StatisticsTTL"];
    
}



message ContrailControllerNodeRole {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"];
    
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"];
    
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"];
    
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"];
    
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"];
    
    string uuid = 6 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 8 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 11 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"];
    
}



message ControllerNodeRole {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"];
    
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"];
    
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"];
    
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"];
    
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"];
    
    string uuid = 6 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 8 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 11 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"];
    
    string capacity_drives = 14 [(gogoproto.customname) = "CapacityDrives"];
    
    string internalapi_bond_interface_members = 15 [(gogoproto.customname) = "InternalapiBondInterfaceMembers"];
    
    string performance_drives = 16 [(gogoproto.customname) = "PerformanceDrives"];
    
    string storage_management_bond_interface_members = 17 [(gogoproto.customname) = "StorageManagementBondInterfaceMembers"];
    
}



message Dashboard {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string container_config = 9 [(gogoproto.customname) = "ContainerConfig"];
    
}



message Keypair {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string name = 9 [(gogoproto.customname) = "Name"];
    
    string public_key = 10 [(gogoproto.customname) = "PublicKey"];
    
}



message KubernetesCluster {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string contrail_cluster_id = 9 [(gogoproto.customname) = "ContrailClusterID"];
    
    string kuberunetes_dashboard = 10 [(gogoproto.customname) = "KuberunetesDashboard"];
    
}



message KubernetesNode {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"];
    
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"];
    
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"];
    
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"];
    
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"];
    
    string uuid = 6 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 8 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 11 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"];
    
}



message Location {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"];
    
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"];
    
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"];
    
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"];
    
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"];
    
    string uuid = 6 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 8 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 11 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"];
    
    string type = 14 [(gogoproto.customname) = "Type"];
    
    string private_dns_servers = 15 [(gogoproto.customname) = "PrivateDNSServers"];
    
    string private_ntp_hosts = 16 [(gogoproto.customname) = "PrivateNTPHosts"];
    
    string private_ospd_package_url = 17 [(gogoproto.customname) = "PrivateOspdPackageURL"];
    
    string private_ospd_user_name = 18 [(gogoproto.customname) = "PrivateOspdUserName"];
    
    string private_ospd_user_password = 19 [(gogoproto.customname) = "PrivateOspdUserPassword"];
    
    string private_ospd_vm_disk_gb = 20 [(gogoproto.customname) = "PrivateOspdVMDiskGB"];
    
    string private_ospd_vm_name = 21 [(gogoproto.customname) = "PrivateOspdVMName"];
    
    string private_ospd_vm_ram_mb = 22 [(gogoproto.customname) = "PrivateOspdVMRAMMB"];
    
    string private_ospd_vm_vcpus = 23 [(gogoproto.customname) = "PrivateOspdVMVcpus"];
    
    string private_redhat_pool_id = 24 [(gogoproto.customname) = "PrivateRedhatPoolID"];
    
    string private_redhat_subscription_key = 25 [(gogoproto.customname) = "PrivateRedhatSubscriptionKey"];
    
    string private_redhat_subscription_pasword = 26 [(gogoproto.customname) = "PrivateRedhatSubscriptionPasword"];
    
    string private_redhat_subscription_user = 27 [(gogoproto.customname) = "PrivateRedhatSubscriptionUser"];
    
    string gcp_account_info = 28 [(gogoproto.customname) = "GCPAccountInfo"];
    
    int64 gcp_asn = 29 [(gogoproto.customname) = "GCPAsn"];
    
    string gcp_region = 30 [(gogoproto.customname) = "GCPRegion"];
    
    string gcp_subnet = 31 [(gogoproto.customname) = "GCPSubnet"];
    
    string aws_access_key = 32 [(gogoproto.customname) = "AwsAccessKey"];
    
    string aws_region = 33 [(gogoproto.customname) = "AwsRegion"];
    
    string aws_secret_key = 34 [(gogoproto.customname) = "AwsSecretKey"];
    
    string aws_subnet = 35 [(gogoproto.customname) = "AwsSubnet"];
    
}



message Node {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string hostname = 9 [(gogoproto.customname) = "Hostname"];
    
    string ip_address = 10 [(gogoproto.customname) = "IPAddress"];
    
    string mac_address = 11 [(gogoproto.customname) = "MacAddress"];
    
    string type = 12 [(gogoproto.customname) = "Type"];
    
    string password = 13 [(gogoproto.customname) = "Password"];
    
    string ssh_key = 14 [(gogoproto.customname) = "SSHKey"];
    
    string username = 15 [(gogoproto.customname) = "Username"];
    
    string aws_ami = 16 [(gogoproto.customname) = "AwsAmi"];
    
    string aws_instance_type = 17 [(gogoproto.customname) = "AwsInstanceType"];
    
    string gcp_image = 18 [(gogoproto.customname) = "GCPImage"];
    
    string gcp_machine_type = 19 [(gogoproto.customname) = "GCPMachineType"];
    
    string private_machine_properties = 20 [(gogoproto.customname) = "PrivateMachineProperties"];
    
    string private_machine_state = 21 [(gogoproto.customname) = "PrivateMachineState"];
    
    string private_power_management_ip = 22 [(gogoproto.customname) = "PrivatePowerManagementIP"];
    
    string private_power_management_password = 23 [(gogoproto.customname) = "PrivatePowerManagementPassword"];
    
    string private_power_management_username = 24 [(gogoproto.customname) = "PrivatePowerManagementUsername"];
    
}



message OpenstackCluster {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"];
    
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"];
    
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"];
    
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"];
    
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"];
    
    string uuid = 6 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 8 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 11 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"];
    
    string admin_password = 14 [(gogoproto.customname) = "AdminPassword"];
    
    string contrail_cluster_id = 15 [(gogoproto.customname) = "ContrailClusterID"];
    
    string default_capacity_drives = 16 [(gogoproto.customname) = "DefaultCapacityDrives"];
    
    string default_journal_drives = 17 [(gogoproto.customname) = "DefaultJournalDrives"];
    
    string default_osd_drives = 18 [(gogoproto.customname) = "DefaultOsdDrives"];
    
    string default_performance_drives = 19 [(gogoproto.customname) = "DefaultPerformanceDrives"];
    
    string default_storage_access_bond_interface_members = 20 [(gogoproto.customname) = "DefaultStorageAccessBondInterfaceMembers"];
    
    string default_storage_backend_bond_interface_members = 21 [(gogoproto.customname) = "DefaultStorageBackendBondInterfaceMembers"];
    
    string external_allocation_pool_end = 22 [(gogoproto.customname) = "ExternalAllocationPoolEnd"];
    
    string external_allocation_pool_start = 23 [(gogoproto.customname) = "ExternalAllocationPoolStart"];
    
    string external_net_cidr = 24 [(gogoproto.customname) = "ExternalNetCidr"];
    
    string openstack_webui = 25 [(gogoproto.customname) = "OpenstackWebui"];
    
    string public_gateway = 26 [(gogoproto.customname) = "PublicGateway"];
    
    string public_ip = 27 [(gogoproto.customname) = "PublicIP"];
    
}



message OpenstackComputeNodeRole {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"];
    
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"];
    
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"];
    
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"];
    
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"];
    
    string uuid = 6 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 8 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 11 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"];
    
    string default_gateway = 14 [(gogoproto.customname) = "DefaultGateway"];
    
    string vrouter_bond_interface = 15 [(gogoproto.customname) = "VrouterBondInterface"];
    
    string vrouter_bond_interface_members = 16 [(gogoproto.customname) = "VrouterBondInterfaceMembers"];
    
    string vrouter_type = 17 [(gogoproto.customname) = "VrouterType"];
    
}



message OpenstackStorageNodeRole {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"];
    
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"];
    
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"];
    
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"];
    
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"];
    
    string uuid = 6 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 8 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 11 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"];
    
    string journal_drives = 14 [(gogoproto.customname) = "JournalDrives"];
    
    string osd_drives = 15 [(gogoproto.customname) = "OsdDrives"];
    
    string storage_access_bond_interface_members = 16 [(gogoproto.customname) = "StorageAccessBondInterfaceMembers"];
    
    string storage_backend_bond_interface_members = 17 [(gogoproto.customname) = "StorageBackendBondInterfaceMembers"];
    
}



message VPNGroup {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"];
    
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"];
    
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"];
    
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"];
    
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"];
    
    string uuid = 6 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 8 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 11 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"];
    
    string type = 14 [(gogoproto.customname) = "Type"];
    
}



message Widget {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"];
    
    string parent_type = 3 [(gogoproto.customname) = "ParentType"];
    
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"];
    
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"];
    
    string display_name = 6 [(gogoproto.customname) = "DisplayName"];
    
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"];
    
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"];
    
    string container_config = 9 [(gogoproto.customname) = "ContainerConfig"];
    
    string content_config = 10 [(gogoproto.customname) = "ContentConfig"];
    
    string layout_config = 11 [(gogoproto.customname) = "LayoutConfig"];
    
}



message TelemetryStateInfo {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated TelemetryResourceInfo resource = 1 [(gogoproto.customname) = "Resource"];
    
    int64 server_port = 2 [(gogoproto.customname) = "ServerPort"];
    
    string server_ip = 3 [(gogoproto.customname) = "ServerIP"];
    
}

message VirtualRouterType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message DiscoveryPubSubEndPointType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string ep_version = 1 [(gogoproto.customname) = "EpVersion"];
    
    string ep_id = 2 [(gogoproto.customname) = "EpID"];
    
    string ep_type = 3 [(gogoproto.customname) = "EpType"];
    
    SubnetType ep_prefix = 4 [(gogoproto.customname) = "EpPrefix"];
    
}

message LoadbalancerPoolType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string status = 1 [(gogoproto.customname) = "Status"];
    
    string protocol = 2 [(gogoproto.customname) = "Protocol"];
    
    string subnet_id = 3 [(gogoproto.customname) = "SubnetID"];
    
    string session_persistence = 4 [(gogoproto.customname) = "SessionPersistence"];
    
    bool admin_state = 5 [(gogoproto.customname) = "AdminState"];
    
    string persistence_cookie_name = 6 [(gogoproto.customname) = "PersistenceCookieName"];
    
    string status_description = 7 [(gogoproto.customname) = "StatusDescription"];
    
    string loadbalancer_method = 8 [(gogoproto.customname) = "LoadbalancerMethod"];
    
}

message LoadbalancerType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string status = 1 [(gogoproto.customname) = "Status"];
    
    string provisioning_status = 2 [(gogoproto.customname) = "ProvisioningStatus"];
    
    bool admin_state = 3 [(gogoproto.customname) = "AdminState"];
    
    string vip_address = 4 [(gogoproto.customname) = "VipAddress"];
    
    string vip_subnet_id = 5 [(gogoproto.customname) = "VipSubnetID"];
    
    string operating_status = 6 [(gogoproto.customname) = "OperatingStatus"];
    
}

message MACMoveTimeWindow {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message FlowAgingTimeoutList {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated FlowAgingTimeout flow_aging_timeout = 1 [(gogoproto.customname) = "FlowAgingTimeout"];
    
}

message IdPermsType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    bool enable = 1 [(gogoproto.customname) = "Enable"];
    
    string description = 2 [(gogoproto.customname) = "Description"];
    
    string created = 3 [(gogoproto.customname) = "Created"];
    
    string creator = 4 [(gogoproto.customname) = "Creator"];
    
    bool user_visible = 5 [(gogoproto.customname) = "UserVisible"];
    
    string last_modified = 6 [(gogoproto.customname) = "LastModified"];
    
    PermType permissions = 7 [(gogoproto.customname) = "Permissions"];
    
}

message AlarmOperand2 {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string uve_attribute = 1 [(gogoproto.customname) = "UveAttribute"];
    
    string json_value = 2 [(gogoproto.customname) = "JSONValue"];
    
}

message IsidType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message IpamSubnetType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    SubnetType subnet = 1 [(gogoproto.customname) = "Subnet"];
    
    bool addr_from_start = 2 [(gogoproto.customname) = "AddrFromStart"];
    
    bool enable_dhcp = 3 [(gogoproto.customname) = "EnableDHCP"];
    
    string default_gateway = 4 [(gogoproto.customname) = "DefaultGateway"];
    
    int64 alloc_unit = 5 [(gogoproto.customname) = "AllocUnit"];
    
    string created = 6 [(gogoproto.customname) = "Created"];
    
    repeated string dns_nameservers = 7 [(gogoproto.customname) = "DNSNameservers"];
    
    DhcpOptionsListType dhcp_option_list = 8 [(gogoproto.customname) = "DHCPOptionList"];
    
    string subnet_uuid = 9 [(gogoproto.customname) = "SubnetUUID"];
    
    repeated AllocationPoolType allocation_pools = 10 [(gogoproto.customname) = "AllocationPools"];
    
    string last_modified = 11 [(gogoproto.customname) = "LastModified"];
    
    RouteTableType host_routes = 12 [(gogoproto.customname) = "HostRoutes"];
    
    string dns_server_address = 13 [(gogoproto.customname) = "DNSServerAddress"];
    
    string subnet_name = 14 [(gogoproto.customname) = "SubnetName"];
    
}

message MplsExpType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message BGPaaServiceParametersType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    int64 port_start = 1 [(gogoproto.customname) = "PortStart"];
    
    int64 port_end = 2 [(gogoproto.customname) = "PortEnd"];
    
}

message UserDefinedLogStat {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string pattern = 1 [(gogoproto.customname) = "Pattern"];
    
    string name = 2 [(gogoproto.customname) = "Name"];
    
}

message GracefulRestartParametersType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    bool enable = 1 [(gogoproto.customname) = "Enable"];
    
    int64 end_of_rib_timeout = 2 [(gogoproto.customname) = "EndOfRibTimeout"];
    
    bool bgp_helper_enable = 3 [(gogoproto.customname) = "BGPHelperEnable"];
    
    bool xmpp_helper_enable = 4 [(gogoproto.customname) = "XMPPHelperEnable"];
    
    int64 restart_time = 5 [(gogoproto.customname) = "RestartTime"];
    
    int64 long_lived_restart_time = 6 [(gogoproto.customname) = "LongLivedRestartTime"];
    
}

message AllowedAddressPairs {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated AllowedAddressPair allowed_address_pair = 1 [(gogoproto.customname) = "AllowedAddressPair"];
    
}

message U16BitHexInt {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message FirewallSequence {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string sequence = 1 [(gogoproto.customname) = "Sequence"];
    
}

message DirectionType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message RouteTargetList {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated string route_target = 1 [(gogoproto.customname) = "RouteTarget"];
    
}

message GracefulRestartTimeType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message ControlTrafficDscpType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    int64 control = 1 [(gogoproto.customname) = "Control"];
    
    int64 analytics = 2 [(gogoproto.customname) = "Analytics"];
    
    int64 dns = 3 [(gogoproto.customname) = "DNS"];
    
}

message RouteNextHopType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message LoadbalancerListenerType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string default_tls_container = 1 [(gogoproto.customname) = "DefaultTLSContainer"];
    
    string protocol = 2 [(gogoproto.customname) = "Protocol"];
    
    int64 connection_limit = 3 [(gogoproto.customname) = "ConnectionLimit"];
    
    bool admin_state = 4 [(gogoproto.customname) = "AdminState"];
    
    repeated string sni_containers = 5 [(gogoproto.customname) = "SniContainers"];
    
    int64 protocol_port = 6 [(gogoproto.customname) = "ProtocolPort"];
    
}

message ServiceInterfaceType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message MemberType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string role = 1 [(gogoproto.customname) = "Role"];
    
}

message KeyValuePairs {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated KeyValuePair key_value_pair = 1 [(gogoproto.customname) = "KeyValuePair"];
    
}

message AutonomousSystemType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message FirewallRuleEndpointType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string address_group = 1 [(gogoproto.customname) = "AddressGroup"];
    
    SubnetType subnet = 2 [(gogoproto.customname) = "Subnet"];
    
    repeated string tags = 3 [(gogoproto.customname) = "Tags"];
    
    repeated int64 tag_ids = 4 [(gogoproto.customname) = "TagIds"];
    
    string virtual_network = 5 [(gogoproto.customname) = "VirtualNetwork"];
    
    bool any = 6 [(gogoproto.customname) = "Any"];
    
}

message LinklocalServicesTypes {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated LinklocalServiceEntryType linklocal_service_entry = 1 [(gogoproto.customname) = "LinklocalServiceEntry"];
    
}

message VxlanNetworkIdentifierModeType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message DhcpOptionType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string dhcp_option_value = 1 [(gogoproto.customname) = "DHCPOptionValue"];
    
    string dhcp_option_value_bytes = 2 [(gogoproto.customname) = "DHCPOptionValueBytes"];
    
    string dhcp_option_name = 3 [(gogoproto.customname) = "DHCPOptionName"];
    
}

message ServiceType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message VrfAssignRuleType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string routing_instance = 1 [(gogoproto.customname) = "RoutingInstance"];
    
    MatchConditionType match_condition = 2 [(gogoproto.customname) = "MatchCondition"];
    
    int64 vlan_tag = 3 [(gogoproto.customname) = "VlanTag"];
    
    bool ignore_acl = 4 [(gogoproto.customname) = "IgnoreACL"];
    
}

message AccessType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message AlarmAndList {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated AlarmExpression and_list = 1 [(gogoproto.customname) = "AndList"];
    
}

message FirewallRuleMatchTagsTypeIdList {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated int64 tag_type = 1 [(gogoproto.customname) = "TagType"];
    
}

message ServiceApplianceInterfaceType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string interface_type = 1 [(gogoproto.customname) = "InterfaceType"];
    
}

message PolicyBasedForwardingRuleType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string dst_mac = 1 [(gogoproto.customname) = "DSTMac"];
    
    string protocol = 2 [(gogoproto.customname) = "Protocol"];
    
    string ipv6_service_chain_address = 3 [(gogoproto.customname) = "Ipv6ServiceChainAddress"];
    
    string direction = 4 [(gogoproto.customname) = "Direction"];
    
    int64 mpls_label = 5 [(gogoproto.customname) = "MPLSLabel"];
    
    int64 vlan_tag = 6 [(gogoproto.customname) = "VlanTag"];
    
    string src_mac = 7 [(gogoproto.customname) = "SRCMac"];
    
    string service_chain_address = 8 [(gogoproto.customname) = "ServiceChainAddress"];
    
}

message SimpleActionType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message DiscoveryServiceAssignmentType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated DiscoveryPubSubEndPointType subscriber = 1 [(gogoproto.customname) = "Subscriber"];
    
    DiscoveryPubSubEndPointType publisher = 2 [(gogoproto.customname) = "Publisher"];
    
}

message PluginProperties {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated PluginProperty plugin_property = 1 [(gogoproto.customname) = "PluginProperty"];
    
}

message AddressMode {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message ServiceInstanceType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string right_virtual_network = 1 [(gogoproto.customname) = "RightVirtualNetwork"];
    
    string right_ip_address = 2 [(gogoproto.customname) = "RightIPAddress"];
    
    string availability_zone = 3 [(gogoproto.customname) = "AvailabilityZone"];
    
    string management_virtual_network = 4 [(gogoproto.customname) = "ManagementVirtualNetwork"];
    
    ServiceScaleOutType scale_out = 5 [(gogoproto.customname) = "ScaleOut"];
    
    string ha_mode = 6 [(gogoproto.customname) = "HaMode"];
    
    string virtual_router_id = 7 [(gogoproto.customname) = "VirtualRouterID"];
    
    repeated ServiceInstanceInterfaceType interface_list = 8 [(gogoproto.customname) = "InterfaceList"];
    
    string left_ip_address = 9 [(gogoproto.customname) = "LeftIPAddress"];
    
    string left_virtual_network = 10 [(gogoproto.customname) = "LeftVirtualNetwork"];
    
    bool auto_policy = 11 [(gogoproto.customname) = "AutoPolicy"];
    
}

message FloatingIpDnsNotation {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message PermType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string owner = 1 [(gogoproto.customname) = "Owner"];
    
    int64 owner_access = 2 [(gogoproto.customname) = "OwnerAccess"];
    
    int64 other_access = 3 [(gogoproto.customname) = "OtherAccess"];
    
    string group = 4 [(gogoproto.customname) = "Group"];
    
    int64 group_access = 5 [(gogoproto.customname) = "GroupAccess"];
    
}

message NHModeType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message MACMoveLimitControlType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    int64 mac_move_time_window = 1 [(gogoproto.customname) = "MacMoveTimeWindow"];
    
    int64 mac_move_limit = 2 [(gogoproto.customname) = "MacMoveLimit"];
    
    string mac_move_limit_action = 3 [(gogoproto.customname) = "MacMoveLimitAction"];
    
}

message TrafficDirectionType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message PortMappings {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated PortMap port_mappings = 1 [(gogoproto.customname) = "PortMappings"];
    
}

message PluginProperty {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string property = 1 [(gogoproto.customname) = "Property"];
    
    string value = 2 [(gogoproto.customname) = "Value"];
    
}

message LinklocalServiceEntryType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated string ip_fabric_service_ip = 1 [(gogoproto.customname) = "IPFabricServiceIP"];
    
    string linklocal_service_name = 2 [(gogoproto.customname) = "LinklocalServiceName"];
    
    string linklocal_service_ip = 3 [(gogoproto.customname) = "LinklocalServiceIP"];
    
    int64 ip_fabric_service_port = 4 [(gogoproto.customname) = "IPFabricServicePort"];
    
    string ip_fabric_DNS_service_name = 5 [(gogoproto.customname) = "IPFabricDNSServiceName"];
    
    int64 linklocal_service_port = 6 [(gogoproto.customname) = "LinklocalServicePort"];
    
}

message VirtualNetworkIdType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message EtherType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message VpnType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message FirewallRuleDirectionType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message VirtualRouterNetworkIpamType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated SubnetType subnet = 1 [(gogoproto.customname) = "Subnet"];
    
    repeated AllocationPoolType allocation_pools = 2 [(gogoproto.customname) = "AllocationPools"];
    
}

message DomainLimitsType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    int64 project_limit = 1 [(gogoproto.customname) = "ProjectLimit"];
    
    int64 virtual_network_limit = 2 [(gogoproto.customname) = "VirtualNetworkLimit"];
    
    int64 security_group_limit = 3 [(gogoproto.customname) = "SecurityGroupLimit"];
    
}

message PolicyRuleType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string direction = 1 [(gogoproto.customname) = "Direction"];
    
    string protocol = 2 [(gogoproto.customname) = "Protocol"];
    
    repeated AddressType dst_addresses = 3 [(gogoproto.customname) = "DSTAddresses"];
    
    ActionListType action_list = 4 [(gogoproto.customname) = "ActionList"];
    
    string created = 5 [(gogoproto.customname) = "Created"];
    
    string rule_uuid = 6 [(gogoproto.customname) = "RuleUUID"];
    
    repeated PortType dst_ports = 7 [(gogoproto.customname) = "DSTPorts"];
    
    repeated string application = 8 [(gogoproto.customname) = "Application"];
    
    string last_modified = 9 [(gogoproto.customname) = "LastModified"];
    
    string ethertype = 10 [(gogoproto.customname) = "Ethertype"];
    
    repeated AddressType src_addresses = 11 [(gogoproto.customname) = "SRCAddresses"];
    
    SequenceType rule_sequence = 12 [(gogoproto.customname) = "RuleSequence"];
    
    repeated PortType src_ports = 13 [(gogoproto.customname) = "SRCPorts"];
    
}

message SecurityLoggingObjectRuleListType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated SecurityLoggingObjectRuleEntryType rule = 1 [(gogoproto.customname) = "Rule"];
    
}

message ServiceTemplateInterfaceType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    bool static_route_enable = 1 [(gogoproto.customname) = "StaticRouteEnable"];
    
    bool shared_ip = 2 [(gogoproto.customname) = "SharedIP"];
    
    string service_interface_type = 3 [(gogoproto.customname) = "ServiceInterfaceType"];
    
}

message L4PortType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message IpAddressFamilyType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message MACAgingTime {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message AllowedAddressPair {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    SubnetType ip = 1 [(gogoproto.customname) = "IP"];
    
    string mac = 2 [(gogoproto.customname) = "Mac"];
    
    string address_mode = 3 [(gogoproto.customname) = "AddressMode"];
    
}

message VRouterInstanceType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message SNMPCredentials {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string v3_privacy_protocol = 1 [(gogoproto.customname) = "V3PrivacyProtocol"];
    
    int64 retries = 2 [(gogoproto.customname) = "Retries"];
    
    string v3_authentication_password = 3 [(gogoproto.customname) = "V3AuthenticationPassword"];
    
    int64 v3_engine_time = 4 [(gogoproto.customname) = "V3EngineTime"];
    
    string v3_engine_id = 5 [(gogoproto.customname) = "V3EngineID"];
    
    int64 local_port = 6 [(gogoproto.customname) = "LocalPort"];
    
    string v3_security_level = 7 [(gogoproto.customname) = "V3SecurityLevel"];
    
    string v3_context = 8 [(gogoproto.customname) = "V3Context"];
    
    string v3_security_name = 9 [(gogoproto.customname) = "V3SecurityName"];
    
    string v3_authentication_protocol = 10 [(gogoproto.customname) = "V3AuthenticationProtocol"];
    
    string v2_community = 11 [(gogoproto.customname) = "V2Community"];
    
    string v3_security_engine_id = 12 [(gogoproto.customname) = "V3SecurityEngineID"];
    
    string v3_context_engine_id = 13 [(gogoproto.customname) = "V3ContextEngineID"];
    
    int64 version = 14 [(gogoproto.customname) = "Version"];
    
    int64 timeout = 15 [(gogoproto.customname) = "Timeout"];
    
    string v3_privacy_password = 16 [(gogoproto.customname) = "V3PrivacyPassword"];
    
    int64 v3_engine_boots = 17 [(gogoproto.customname) = "V3EngineBoots"];
    
}

message UserCredentials {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string username = 1 [(gogoproto.customname) = "Username"];
    
    string password = 2 [(gogoproto.customname) = "Password"];
    
}

message QosConfigType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message CommunityAttribute {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message JunosServicePorts {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated string service_port = 1 [(gogoproto.customname) = "ServicePort"];
    
}

message E2servicetype {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message DnsRecordTypeType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message ServiceConnectionType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message HealthCheckType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message DnsRecordClassType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message SecurityLoggingObjectRuleEntryType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string rule_uuid = 1 [(gogoproto.customname) = "RuleUUID"];
    
    int64 rate = 2 [(gogoproto.customname) = "Rate"];
    
}

message U32BitHexInt {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message MACLimitControlType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    int64 mac_limit = 1 [(gogoproto.customname) = "MacLimit"];
    
    string mac_limit_action = 2 [(gogoproto.customname) = "MacLimitAction"];
    
}

message LoadbalancerMemberType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string status = 1 [(gogoproto.customname) = "Status"];
    
    string status_description = 2 [(gogoproto.customname) = "StatusDescription"];
    
    int64 weight = 3 [(gogoproto.customname) = "Weight"];
    
    bool admin_state = 4 [(gogoproto.customname) = "AdminState"];
    
    string address = 5 [(gogoproto.customname) = "Address"];
    
    int64 protocol_port = 6 [(gogoproto.customname) = "ProtocolPort"];
    
}

message SubnetMethodType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message DscpValueType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message VirtualIpType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string status = 1 [(gogoproto.customname) = "Status"];
    
    string status_description = 2 [(gogoproto.customname) = "StatusDescription"];
    
    string protocol = 3 [(gogoproto.customname) = "Protocol"];
    
    string subnet_id = 4 [(gogoproto.customname) = "SubnetID"];
    
    string persistence_cookie_name = 5 [(gogoproto.customname) = "PersistenceCookieName"];
    
    int64 connection_limit = 6 [(gogoproto.customname) = "ConnectionLimit"];
    
    string persistence_type = 7 [(gogoproto.customname) = "PersistenceType"];
    
    bool admin_state = 8 [(gogoproto.customname) = "AdminState"];
    
    string address = 9 [(gogoproto.customname) = "Address"];
    
    int64 protocol_port = 10 [(gogoproto.customname) = "ProtocolPort"];
    
}

message RbacRuleEntriesType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated RbacRuleType rbac_rule = 1 [(gogoproto.customname) = "RbacRule"];
    
}

message MACLimitExceedActionType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message BridgeDomainMembershipType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    int64 vlan_tag = 1 [(gogoproto.customname) = "VlanTag"];
    
}

message PortType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    int64 end_port = 1 [(gogoproto.customname) = "EndPort"];
    
    int64 start_port = 2 [(gogoproto.customname) = "StartPort"];
    
}

message AclRuleType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string rule_uuid = 1 [(gogoproto.customname) = "RuleUUID"];
    
    MatchConditionType match_condition = 2 [(gogoproto.customname) = "MatchCondition"];
    
    string direction = 3 [(gogoproto.customname) = "Direction"];
    
    ActionListType action_list = 4 [(gogoproto.customname) = "ActionList"];
    
}

message AlarmOrList {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated AlarmAndList or_list = 1 [(gogoproto.customname) = "OrList"];
    
}

message HealthCheckProtocolType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message ShareType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    int64 tenant_access = 1 [(gogoproto.customname) = "TenantAccess"];
    
    string tenant = 2 [(gogoproto.customname) = "Tenant"];
    
}

message ForwardingModeType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message IpamMethodType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message EndOfRibTimeType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message DhcpOptionsListType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated DhcpOptionType dhcp_option = 1 [(gogoproto.customname) = "DHCPOption"];
    
}

message KeyValuePair {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string value = 1 [(gogoproto.customname) = "Value"];
    
    string key = 2 [(gogoproto.customname) = "Key"];
    
}

message MirrorActionType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    int64 nic_assisted_mirroring_vlan = 1 [(gogoproto.customname) = "NicAssistedMirroringVlan"];
    
    string analyzer_name = 2 [(gogoproto.customname) = "AnalyzerName"];
    
    string nh_mode = 3 [(gogoproto.customname) = "NHMode"];
    
    bool juniper_header = 4 [(gogoproto.customname) = "JuniperHeader"];
    
    int64 udp_port = 5 [(gogoproto.customname) = "UDPPort"];
    
    string routing_instance = 6 [(gogoproto.customname) = "RoutingInstance"];
    
    StaticMirrorNhType static_nh_header = 7 [(gogoproto.customname) = "StaticNHHeader"];
    
    string analyzer_ip_address = 8 [(gogoproto.customname) = "AnalyzerIPAddress"];
    
    string encapsulation = 9 [(gogoproto.customname) = "Encapsulation"];
    
    string analyzer_mac_address = 10 [(gogoproto.customname) = "AnalyzerMacAddress"];
    
    bool nic_assisted_mirroring = 11 [(gogoproto.customname) = "NicAssistedMirroring"];
    
}

message AlarmSeverity {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message UserDefinedLogStatList {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated UserDefinedLogStat statlist = 1 [(gogoproto.customname) = "Statlist"];
    
}

message EcmpHashingIncludeFields {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    bool destination_ip = 1 [(gogoproto.customname) = "DestinationIP"];
    
    bool ip_protocol = 2 [(gogoproto.customname) = "IPProtocol"];
    
    bool source_ip = 3 [(gogoproto.customname) = "SourceIP"];
    
    bool hashing_configured = 4 [(gogoproto.customname) = "HashingConfigured"];
    
    bool source_port = 5 [(gogoproto.customname) = "SourcePort"];
    
    bool destination_port = 6 [(gogoproto.customname) = "DestinationPort"];
    
}

message LoadbalancerProtocolType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message LoadbalancerMethodType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message UuidStringType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message MatchConditionType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    PortType src_port = 1 [(gogoproto.customname) = "SRCPort"];
    
    AddressType src_address = 2 [(gogoproto.customname) = "SRCAddress"];
    
    string ethertype = 3 [(gogoproto.customname) = "Ethertype"];
    
    AddressType dst_address = 4 [(gogoproto.customname) = "DSTAddress"];
    
    PortType dst_port = 5 [(gogoproto.customname) = "DSTPort"];
    
    string protocol = 6 [(gogoproto.customname) = "Protocol"];
    
}

message SubnetListType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated SubnetType subnet = 1 [(gogoproto.customname) = "Subnet"];
    
}

message FirewallRuleMatchTagsType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated string tag_list = 1 [(gogoproto.customname) = "TagList"];
    
}

message QuotaType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    int64 virtual_router = 1 [(gogoproto.customname) = "VirtualRouter"];
    
    int64 network_policy = 2 [(gogoproto.customname) = "NetworkPolicy"];
    
    int64 loadbalancer_pool = 3 [(gogoproto.customname) = "LoadbalancerPool"];
    
    int64 route_table = 4 [(gogoproto.customname) = "RouteTable"];
    
    int64 subnet = 5 [(gogoproto.customname) = "Subnet"];
    
    int64 network_ipam = 6 [(gogoproto.customname) = "NetworkIpam"];
    
    int64 virtual_DNS_record = 7 [(gogoproto.customname) = "VirtualDNSRecord"];
    
    int64 logical_router = 8 [(gogoproto.customname) = "LogicalRouter"];
    
    int64 security_group_rule = 9 [(gogoproto.customname) = "SecurityGroupRule"];
    
    int64 virtual_DNS = 10 [(gogoproto.customname) = "VirtualDNS"];
    
    int64 service_instance = 11 [(gogoproto.customname) = "ServiceInstance"];
    
    int64 service_template = 12 [(gogoproto.customname) = "ServiceTemplate"];
    
    int64 bgp_router = 13 [(gogoproto.customname) = "BGPRouter"];
    
    int64 floating_ip = 14 [(gogoproto.customname) = "FloatingIP"];
    
    int64 floating_ip_pool = 15 [(gogoproto.customname) = "FloatingIPPool"];
    
    int64 loadbalancer_member = 16 [(gogoproto.customname) = "LoadbalancerMember"];
    
    int64 access_control_list = 17 [(gogoproto.customname) = "AccessControlList"];
    
    int64 virtual_machine_interface = 18 [(gogoproto.customname) = "VirtualMachineInterface"];
    
    int64 instance_ip = 19 [(gogoproto.customname) = "InstanceIP"];
    
    int64 global_vrouter_config = 20 [(gogoproto.customname) = "GlobalVrouterConfig"];
    
    int64 security_logging_object = 21 [(gogoproto.customname) = "SecurityLoggingObject"];
    
    int64 loadbalancer_healthmonitor = 22 [(gogoproto.customname) = "LoadbalancerHealthmonitor"];
    
    int64 virtual_ip = 23 [(gogoproto.customname) = "VirtualIP"];
    
    int64 defaults = 24 [(gogoproto.customname) = "Defaults"];
    
    int64 security_group = 25 [(gogoproto.customname) = "SecurityGroup"];
    
    int64 virtual_network = 26 [(gogoproto.customname) = "VirtualNetwork"];
    
}

message VirtualNetworkType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string forwarding_mode = 1 [(gogoproto.customname) = "ForwardingMode"];
    
    bool allow_transit = 2 [(gogoproto.customname) = "AllowTransit"];
    
    int64 network_id = 3 [(gogoproto.customname) = "NetworkID"];
    
    bool mirror_destination = 4 [(gogoproto.customname) = "MirrorDestination"];
    
    int64 vxlan_network_identifier = 5 [(gogoproto.customname) = "VxlanNetworkIdentifier"];
    
    string rpf = 6 [(gogoproto.customname) = "RPF"];
    
}

message FirewallServiceType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string protocol = 1 [(gogoproto.customname) = "Protocol"];
    
    PortType dst_ports = 2 [(gogoproto.customname) = "DSTPorts"];
    
    PortType src_ports = 3 [(gogoproto.customname) = "SRCPorts"];
    
    int64 protocol_id = 4 [(gogoproto.customname) = "ProtocolID"];
    
}

message ServiceTemplateType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    bool availability_zone_enable = 1 [(gogoproto.customname) = "AvailabilityZoneEnable"];
    
    string instance_data = 2 [(gogoproto.customname) = "InstanceData"];
    
    bool ordered_interfaces = 3 [(gogoproto.customname) = "OrderedInterfaces"];
    
    string service_virtualization_type = 4 [(gogoproto.customname) = "ServiceVirtualizationType"];
    
    repeated ServiceTemplateInterfaceType interface_type = 5 [(gogoproto.customname) = "InterfaceType"];
    
    string image_name = 6 [(gogoproto.customname) = "ImageName"];
    
    string service_mode = 7 [(gogoproto.customname) = "ServiceMode"];
    
    int64 version = 8 [(gogoproto.customname) = "Version"];
    
    string service_type = 9 [(gogoproto.customname) = "ServiceType"];
    
    string flavor = 10 [(gogoproto.customname) = "Flavor"];
    
    bool service_scaling = 11 [(gogoproto.customname) = "ServiceScaling"];
    
    string vrouter_instance_type = 12 [(gogoproto.customname) = "VrouterInstanceType"];
    
}

message TimerType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string start_time = 1 [(gogoproto.customname) = "StartTime"];
    
    string off_interval = 2 [(gogoproto.customname) = "OffInterval"];
    
    string on_interval = 3 [(gogoproto.customname) = "OnInterval"];
    
    string end_time = 4 [(gogoproto.customname) = "EndTime"];
    
}

message IpamSubnets {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated IpamSubnetType subnets = 1 [(gogoproto.customname) = "Subnets"];
    
}

message RpfModeType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message PermType2 {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string owner = 1 [(gogoproto.customname) = "Owner"];
    
    int64 owner_access = 2 [(gogoproto.customname) = "OwnerAccess"];
    
    int64 global_access = 3 [(gogoproto.customname) = "GlobalAccess"];
    
    repeated ShareType share = 4 [(gogoproto.customname) = "Share"];
    
}

message UveKeysType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated string uve_key = 1 [(gogoproto.customname) = "UveKey"];
    
}

message RbacPermType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string role_crud = 1 [(gogoproto.customname) = "RoleCrud"];
    
    string role_name = 2 [(gogoproto.customname) = "RoleName"];
    
}

message LogicalInterfaceType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message IpamDnsAddressType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    IpAddressesType tenant_dns_server_address = 1 [(gogoproto.customname) = "TenantDNSServerAddress"];
    
    string virtual_dns_server_name = 2 [(gogoproto.customname) = "VirtualDNSServerName"];
    
}

message DnsRecordOrderType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message VirtualDnsType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string floating_ip_record = 1 [(gogoproto.customname) = "FloatingIPRecord"];
    
    string domain_name = 2 [(gogoproto.customname) = "DomainName"];
    
    bool external_visible = 3 [(gogoproto.customname) = "ExternalVisible"];
    
    string next_virtual_DNS = 4 [(gogoproto.customname) = "NextVirtualDNS"];
    
    bool dynamic_records_from_client = 5 [(gogoproto.customname) = "DynamicRecordsFromClient"];
    
    bool reverse_resolution = 6 [(gogoproto.customname) = "ReverseResolution"];
    
    int64 default_ttl_seconds = 7 [(gogoproto.customname) = "DefaultTTLSeconds"];
    
    string record_order = 8 [(gogoproto.customname) = "RecordOrder"];
    
}

message AddressType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string security_group = 1 [(gogoproto.customname) = "SecurityGroup"];
    
    SubnetType subnet = 2 [(gogoproto.customname) = "Subnet"];
    
    string network_policy = 3 [(gogoproto.customname) = "NetworkPolicy"];
    
    repeated SubnetType subnet_list = 4 [(gogoproto.customname) = "SubnetList"];
    
    string virtual_network = 5 [(gogoproto.customname) = "VirtualNetwork"];
    
}

message VxlanNetworkIdentifierType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message EncapsulationType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message AddressAllocationModeType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message VlanIdType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message AlarmOperation {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message IpAddressType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message ServiceHealthCheckType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    int64 delayUsecs = 1 [(gogoproto.customname) = "DelayUsecs"];
    
    int64 timeoutUsecs = 2 [(gogoproto.customname) = "TimeoutUsecs"];
    
    bool enabled = 3 [(gogoproto.customname) = "Enabled"];
    
    int64 delay = 4 [(gogoproto.customname) = "Delay"];
    
    string expected_codes = 5 [(gogoproto.customname) = "ExpectedCodes"];
    
    int64 max_retries = 6 [(gogoproto.customname) = "MaxRetries"];
    
    string health_check_type = 7 [(gogoproto.customname) = "HealthCheckType"];
    
    string http_method = 8 [(gogoproto.customname) = "HTTPMethod"];
    
    int64 timeout = 9 [(gogoproto.customname) = "Timeout"];
    
    string url_path = 10 [(gogoproto.customname) = "URLPath"];
    
    string monitor_type = 11 [(gogoproto.customname) = "MonitorType"];
    
}

message ServiceInstanceInterfaceType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string virtual_network = 1 [(gogoproto.customname) = "VirtualNetwork"];
    
    string ip_address = 2 [(gogoproto.customname) = "IPAddress"];
    
    AllowedAddressPairs allowed_address_pairs = 3 [(gogoproto.customname) = "AllowedAddressPairs"];
    
    RouteTableType static_routes = 4 [(gogoproto.customname) = "StaticRoutes"];
    
}

message ServiceModeType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message VirtualNetworkPolicyType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    TimerType timer = 1 [(gogoproto.customname) = "Timer"];
    
    SequenceType sequence = 2 [(gogoproto.customname) = "Sequence"];
    
}

message SessionPersistenceType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message IpamDnsMethodType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message PeeringServiceType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message VlanPriorityType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message LongLivedGracefulRestartTimeType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message CommunityAttributes {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated bytes community_attribute = 1 [(gogoproto.customname) = "CommunityAttribute"];
    
}

message SequenceType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    int64 major = 1 [(gogoproto.customname) = "Major"];
    
    int64 minor = 2 [(gogoproto.customname) = "Minor"];
    
}

message FirewallServiceGroupType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated FirewallServiceType firewall_service = 1 [(gogoproto.customname) = "FirewallService"];
    
}

message ActionListType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string gateway_name = 1 [(gogoproto.customname) = "GatewayName"];
    
    bool log = 2 [(gogoproto.customname) = "Log"];
    
    bool alert = 3 [(gogoproto.customname) = "Alert"];
    
    string qos_action = 4 [(gogoproto.customname) = "QosAction"];
    
    string assign_routing_instance = 5 [(gogoproto.customname) = "AssignRoutingInstance"];
    
    MirrorActionType mirror_to = 6 [(gogoproto.customname) = "MirrorTo"];
    
    string simple_action = 7 [(gogoproto.customname) = "SimpleAction"];
    
    repeated string apply_service = 8 [(gogoproto.customname) = "ApplyService"];
    
}

message FloatingIpPoolSubnetType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated string subnet_uuid = 1 [(gogoproto.customname) = "SubnetUUID"];
    
}

message PortMap {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    int64 src_port = 1 [(gogoproto.customname) = "SRCPort"];
    
    string protocol = 2 [(gogoproto.customname) = "Protocol"];
    
    int64 dst_port = 3 [(gogoproto.customname) = "DSTPort"];
    
}

message VirtualMachineInterfacePropertiesType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    int64 sub_interface_vlan_tag = 1 [(gogoproto.customname) = "SubInterfaceVlanTag"];
    
    int64 local_preference = 2 [(gogoproto.customname) = "LocalPreference"];
    
    InterfaceMirrorType interface_mirror = 3 [(gogoproto.customname) = "InterfaceMirror"];
    
    string service_interface_type = 4 [(gogoproto.customname) = "ServiceInterfaceType"];
    
}

message QosIdForwardingClassPair {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    int64 key = 1 [(gogoproto.customname) = "Key"];
    
    int64 forwarding_class_id = 2 [(gogoproto.customname) = "ForwardingClassID"];
    
}

message VirtualDnsRecordType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string record_name = 1 [(gogoproto.customname) = "RecordName"];
    
    string record_class = 2 [(gogoproto.customname) = "RecordClass"];
    
    string record_data = 3 [(gogoproto.customname) = "RecordData"];
    
    string record_type = 4 [(gogoproto.customname) = "RecordType"];
    
    int64 record_ttl_seconds = 5 [(gogoproto.customname) = "RecordTTLSeconds"];
    
    int64 record_mx_preference = 6 [(gogoproto.customname) = "RecordMXPreference"];
    
}

message InterfaceMirrorType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string traffic_direction = 1 [(gogoproto.customname) = "TrafficDirection"];
    
    MirrorActionType mirror_to = 2 [(gogoproto.customname) = "MirrorTo"];
    
}

message RouteType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string prefix = 1 [(gogoproto.customname) = "Prefix"];
    
    string next_hop = 2 [(gogoproto.customname) = "NextHop"];
    
    CommunityAttributes community_attributes = 3 [(gogoproto.customname) = "CommunityAttributes"];
    
    string next_hop_type = 4 [(gogoproto.customname) = "NextHopType"];
    
}

message ForwardingClassId {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message TelemetryResourceInfo {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string path = 1 [(gogoproto.customname) = "Path"];
    
    string rate = 2 [(gogoproto.customname) = "Rate"];
    
    string name = 3 [(gogoproto.customname) = "Name"];
    
}

message QosIdForwardingClassPairs {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated QosIdForwardingClassPair qos_id_forwarding_class_pair = 1 [(gogoproto.customname) = "QosIDForwardingClassPair"];
    
}

message VrfAssignTableType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated VrfAssignRuleType vrf_assign_rule = 1 [(gogoproto.customname) = "VRFAssignRule"];
    
}

message RoutingPolicyServiceInstanceType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string right_sequence = 1 [(gogoproto.customname) = "RightSequence"];
    
    string left_sequence = 2 [(gogoproto.customname) = "LeftSequence"];
    
}

message SubnetType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string ip_prefix = 1 [(gogoproto.customname) = "IPPrefix"];
    
    int64 ip_prefix_len = 2 [(gogoproto.customname) = "IPPrefixLen"];
    
}

message StaticMirrorNhType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string vtep_dst_ip_address = 1 [(gogoproto.customname) = "VtepDSTIPAddress"];
    
    string vtep_dst_mac_address = 2 [(gogoproto.customname) = "VtepDSTMacAddress"];
    
    int64 vni = 3 [(gogoproto.customname) = "Vni"];
    
}

message AlarmExpression {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string operations = 1 [(gogoproto.customname) = "Operations"];
    
    string operand1 = 2 [(gogoproto.customname) = "Operand1"];
    
    repeated string variables = 3 [(gogoproto.customname) = "Variables"];
    
    AlarmOperand2 operand2 = 4 [(gogoproto.customname) = "Operand2"];
    
}

message ServiceScaleOutType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    bool auto_scale = 1 [(gogoproto.customname) = "AutoScale"];
    
    int64 max_instances = 2 [(gogoproto.customname) = "MaxInstances"];
    
}

message ServiceInterfaceTag {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string interface_type = 1 [(gogoproto.customname) = "InterfaceType"];
    
}

message PolicyEntriesType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated PolicyRuleType policy_rule = 1 [(gogoproto.customname) = "PolicyRule"];
    
}

message PhysicalRouterRole {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message SecurityGroupIdType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message IpAddressesType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string ip_address = 1 [(gogoproto.customname) = "IPAddress"];
    
}

message RbacRuleType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string rule_object = 1 [(gogoproto.customname) = "RuleObject"];
    
    repeated RbacPermType rule_perms = 2 [(gogoproto.customname) = "RulePerms"];
    
    string rule_field = 3 [(gogoproto.customname) = "RuleField"];
    
}

message RouteTableType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated RouteType route = 1 [(gogoproto.customname) = "Route"];
    
}

message HealthmonitorType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message LoadbalancerHealthmonitorType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    int64 delay = 1 [(gogoproto.customname) = "Delay"];
    
    string expected_codes = 2 [(gogoproto.customname) = "ExpectedCodes"];
    
    int64 max_retries = 3 [(gogoproto.customname) = "MaxRetries"];
    
    string http_method = 4 [(gogoproto.customname) = "HTTPMethod"];
    
    bool admin_state = 5 [(gogoproto.customname) = "AdminState"];
    
    int64 timeout = 6 [(gogoproto.customname) = "Timeout"];
    
    string url_path = 7 [(gogoproto.customname) = "URLPath"];
    
    string monitor_type = 8 [(gogoproto.customname) = "MonitorType"];
    
}

message AllocationPoolType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    bool vrouter_specific_pool = 1 [(gogoproto.customname) = "VrouterSpecificPool"];
    
    string start = 2 [(gogoproto.customname) = "Start"];
    
    string end = 3 [(gogoproto.customname) = "End"];
    
}

message ServiceVirtualizationType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message ProtocolType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string protocol = 1 [(gogoproto.customname) = "Protocol"];
    
    int64 port = 2 [(gogoproto.customname) = "Port"];
    
}

message Dot1QTagType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message AclEntriesType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    bool dynamic = 1 [(gogoproto.customname) = "Dynamic"];
    
    repeated AclRuleType acl_rule = 2 [(gogoproto.customname) = "ACLRule"];
    
}

message FlowAgingTimeout {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    int64 timeout_in_seconds = 1 [(gogoproto.customname) = "TimeoutInSeconds"];
    
    string protocol = 2 [(gogoproto.customname) = "Protocol"];
    
    int64 port = 3 [(gogoproto.customname) = "Port"];
    
}

message EncapsulationPrioritiesType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated bytes encapsulation = 1 [(gogoproto.customname) = "Encapsulation"];
    
}

message VnSubnetsType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated IpamSubnetType ipam_subnets = 1 [(gogoproto.customname) = "IpamSubnets"];
    
    RouteTableType host_routes = 2 [(gogoproto.customname) = "HostRoutes"];
    
}

message MacAddressesType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated string mac_address = 1 [(gogoproto.customname) = "MacAddress"];
    
}

message ProviderDetails {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    int64 segmentation_id = 1 [(gogoproto.customname) = "SegmentationID"];
    
    string physical_network = 2 [(gogoproto.customname) = "PhysicalNetwork"];
    
}

message IpamType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    string ipam_method = 1 [(gogoproto.customname) = "IpamMethod"];
    
    string ipam_dns_method = 2 [(gogoproto.customname) = "IpamDNSMethod"];
    
    IpamDnsAddressType ipam_dns_server = 3 [(gogoproto.customname) = "IpamDNSServer"];
    
    DhcpOptionsListType dhcp_option_list = 4 [(gogoproto.customname) = "DHCPOptionList"];
    
    RouteTableType host_routes = 5 [(gogoproto.customname) = "HostRoutes"];
    
    SubnetType cidr_block = 6 [(gogoproto.customname) = "CidrBlock"];
    
}

message ConfiguredSecurityGroupIdType {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
}

message FatFlowProtocols {
    option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
    
    repeated ProtocolType fat_flow_protocol = 1 [(gogoproto.customname) = "FatFlowProtocol"];
    
}
