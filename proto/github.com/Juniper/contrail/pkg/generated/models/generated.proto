syntax = "proto3";
package github.com.Juniper.contrail.pkg.generated.models;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/field_mask.proto";

option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.populate_all) = true;
option (gogoproto.benchgen_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

option (gogoproto.protosizer_all) = false;

option go_package = "models";

message ListSpec {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	int64 limit = 2 [(gogoproto.customname) = "Limit", (gogoproto.casttype) = "int"];
	int64 offset = 3 [(gogoproto.customname) = "Offset", (gogoproto.casttype) = "int"];
    bool detail = 4 [(gogoproto.customname) = "Detail"];
    bool count = 5 [(gogoproto.customname) = "Count"];
    bool shared = 6 [(gogoproto.customname) = "Shared"];
    bool exclude_hrefs = 7 [(gogoproto.customname) = "ExcludeHrefs"];
    repeated string parent_fq_name = 8 [(gogoproto.customname) = "ParentFQName"];
    string parent_type = 9  [(gogoproto.customname) = "ParentType"];
    repeated string parent_uuids = 10 [(gogoproto.customname) = "ParentUUIDs"];
    repeated string backref_uuids = 11 [(gogoproto.customname) = "BackRefUUIDs"];
    repeated string object_uuids = 12 [(gogoproto.customname) = "ObjectUUIDs"];
    repeated string fields = 13 [(gogoproto.customname) = "Fields"];
}



message AccessControlList {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    int64 access_control_list_hash = 9 [(gogoproto.customname) = "AccessControlListHash" ,(gogoproto.casttype) = "int"];
    AclEntriesType access_control_list_entries = 10 [(gogoproto.customname) = "AccessControlListEntries" ]; 


}



message CreateAccessControlListRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AccessControlList access_control_list = 1 [(gogoproto.customname) = "AccessControlList"];
}

message CreateAccessControlListResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AccessControlList access_control_list = 1 [(gogoproto.customname) = "AccessControlList"];
}

message UpdateAccessControlListRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AccessControlList access_control_list = 1 [(gogoproto.customname) = "AccessControlList"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateAccessControlListResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AccessControlList access_control_list = 1 [(gogoproto.customname) = "AccessControlList"];
}

message DeleteAccessControlListRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteAccessControlListResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListAccessControlListRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListAccessControlListResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated AccessControlList access_control_lists = 1 [(gogoproto.customname) = "AccessControlLists"];
}

message GetAccessControlListRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetAccessControlListResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AccessControlList access_control_list = 1 [(gogoproto.customname) = "AccessControlList"];
}



message AddressGroup {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    SubnetListType address_group_prefix = 9 [(gogoproto.customname) = "AddressGroupPrefix" ]; 


}



message CreateAddressGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AddressGroup address_group = 1 [(gogoproto.customname) = "AddressGroup"];
}

message CreateAddressGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AddressGroup address_group = 1 [(gogoproto.customname) = "AddressGroup"];
}

message UpdateAddressGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AddressGroup address_group = 1 [(gogoproto.customname) = "AddressGroup"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateAddressGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AddressGroup address_group = 1 [(gogoproto.customname) = "AddressGroup"];
}

message DeleteAddressGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteAddressGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListAddressGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListAddressGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated AddressGroup address_groups = 1 [(gogoproto.customname) = "AddressGroups"];
}

message GetAddressGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetAddressGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AddressGroup address_group = 1 [(gogoproto.customname) = "AddressGroup"];
}



message Alarm {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    AlarmOrList alarm_rules = 9 [(gogoproto.customname) = "AlarmRules" ];
    UveKeysType uve_keys = 10 [(gogoproto.customname) = "UveKeys" ];
    int64 alarm_severity = 11 [(gogoproto.customname) = "AlarmSeverity" ,(gogoproto.casttype) = "AlarmSeverity"]; 


}



message CreateAlarmRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Alarm alarm = 1 [(gogoproto.customname) = "Alarm"];
}

message CreateAlarmResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Alarm alarm = 1 [(gogoproto.customname) = "Alarm"];
}

message UpdateAlarmRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Alarm alarm = 1 [(gogoproto.customname) = "Alarm"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateAlarmResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Alarm alarm = 1 [(gogoproto.customname) = "Alarm"];
}

message DeleteAlarmRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteAlarmResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListAlarmRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListAlarmResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated Alarm alarms = 1 [(gogoproto.customname) = "Alarms"];
}

message GetAlarmRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetAlarmResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Alarm alarm = 1 [(gogoproto.customname) = "Alarm"];
}



message AliasIPPool {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ]; 


    
    repeated AliasIP alias_ips = 3009 [(gogoproto.customname) = "AliasIPs"];
}



message CreateAliasIPPoolRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AliasIPPool alias_ip_pool = 1 [(gogoproto.customname) = "AliasIPPool"];
}

message CreateAliasIPPoolResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AliasIPPool alias_ip_pool = 1 [(gogoproto.customname) = "AliasIPPool"];
}

message UpdateAliasIPPoolRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AliasIPPool alias_ip_pool = 1 [(gogoproto.customname) = "AliasIPPool"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateAliasIPPoolResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AliasIPPool alias_ip_pool = 1 [(gogoproto.customname) = "AliasIPPool"];
}

message DeleteAliasIPPoolRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteAliasIPPoolResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListAliasIPPoolRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListAliasIPPoolResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated AliasIPPool alias_ip_pools = 1 [(gogoproto.customname) = "AliasIPPools"];
}

message GetAliasIPPoolRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetAliasIPPoolResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AliasIPPool alias_ip_pool = 1 [(gogoproto.customname) = "AliasIPPool"];
}



message AliasIP {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string alias_ip_address = 9 [(gogoproto.customname) = "AliasIPAddress" ,(gogoproto.casttype) = "IpAddressType"];
    string alias_ip_address_family = 10 [(gogoproto.customname) = "AliasIPAddressFamily" ,(gogoproto.casttype) = "IpAddressFamilyType"]; 

    repeated AliasIPProjectRef project_refs = 1011 [(gogoproto.customname) = "ProjectRefs"];
    repeated AliasIPVirtualMachineInterfaceRef virtual_machine_interface_refs = 1012 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];

}


message AliasIPProjectRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message AliasIPVirtualMachineInterfaceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateAliasIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AliasIP alias_ip = 1 [(gogoproto.customname) = "AliasIP"];
}

message CreateAliasIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AliasIP alias_ip = 1 [(gogoproto.customname) = "AliasIP"];
}

message UpdateAliasIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AliasIP alias_ip = 1 [(gogoproto.customname) = "AliasIP"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateAliasIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AliasIP alias_ip = 1 [(gogoproto.customname) = "AliasIP"];
}

message DeleteAliasIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteAliasIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListAliasIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListAliasIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated AliasIP alias_ips = 1 [(gogoproto.customname) = "AliasIPs"];
}

message GetAliasIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetAliasIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AliasIP alias_ip = 1 [(gogoproto.customname) = "AliasIP"];
}



message AnalyticsNode {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string analytics_node_ip_address = 9 [(gogoproto.customname) = "AnalyticsNodeIPAddress" ,(gogoproto.casttype) = "IpAddressType"]; 


}



message CreateAnalyticsNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AnalyticsNode analytics_node = 1 [(gogoproto.customname) = "AnalyticsNode"];
}

message CreateAnalyticsNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AnalyticsNode analytics_node = 1 [(gogoproto.customname) = "AnalyticsNode"];
}

message UpdateAnalyticsNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AnalyticsNode analytics_node = 1 [(gogoproto.customname) = "AnalyticsNode"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateAnalyticsNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AnalyticsNode analytics_node = 1 [(gogoproto.customname) = "AnalyticsNode"];
}

message DeleteAnalyticsNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteAnalyticsNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListAnalyticsNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListAnalyticsNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated AnalyticsNode analytics_nodes = 1 [(gogoproto.customname) = "AnalyticsNodes"];
}

message GetAnalyticsNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetAnalyticsNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AnalyticsNode analytics_node = 1 [(gogoproto.customname) = "AnalyticsNode"];
}



message APIAccessList {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    RbacRuleEntriesType api_access_list_entries = 9 [(gogoproto.customname) = "APIAccessListEntries" ]; 


}



message CreateAPIAccessListRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    APIAccessList api_access_list = 1 [(gogoproto.customname) = "APIAccessList"];
}

message CreateAPIAccessListResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    APIAccessList api_access_list = 1 [(gogoproto.customname) = "APIAccessList"];
}

message UpdateAPIAccessListRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    APIAccessList api_access_list = 1 [(gogoproto.customname) = "APIAccessList"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateAPIAccessListResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    APIAccessList api_access_list = 1 [(gogoproto.customname) = "APIAccessList"];
}

message DeleteAPIAccessListRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteAPIAccessListResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListAPIAccessListRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListAPIAccessListResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated APIAccessList api_access_lists = 1 [(gogoproto.customname) = "APIAccessLists"];
}

message GetAPIAccessListRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetAPIAccessListResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    APIAccessList api_access_list = 1 [(gogoproto.customname) = "APIAccessList"];
}



message ApplicationPolicySet {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    bool all_applications = 9 [(gogoproto.customname) = "AllApplications" ]; 

    repeated ApplicationPolicySetFirewallPolicyRef firewall_policy_refs = 1010 [(gogoproto.customname) = "FirewallPolicyRefs"];
    repeated ApplicationPolicySetGlobalVrouterConfigRef global_vrouter_config_refs = 1011 [(gogoproto.customname) = "GlobalVrouterConfigRefs"];

}


message ApplicationPolicySetGlobalVrouterConfigRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message ApplicationPolicySetFirewallPolicyRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    FirewallSequence attr = 3 [(gogoproto.customname) = "Attr"];
    
}


message CreateApplicationPolicySetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ApplicationPolicySet application_policy_set = 1 [(gogoproto.customname) = "ApplicationPolicySet"];
}

message CreateApplicationPolicySetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ApplicationPolicySet application_policy_set = 1 [(gogoproto.customname) = "ApplicationPolicySet"];
}

message UpdateApplicationPolicySetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ApplicationPolicySet application_policy_set = 1 [(gogoproto.customname) = "ApplicationPolicySet"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateApplicationPolicySetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ApplicationPolicySet application_policy_set = 1 [(gogoproto.customname) = "ApplicationPolicySet"];
}

message DeleteApplicationPolicySetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteApplicationPolicySetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListApplicationPolicySetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListApplicationPolicySetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ApplicationPolicySet application_policy_sets = 1 [(gogoproto.customname) = "ApplicationPolicySets"];
}

message GetApplicationPolicySetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetApplicationPolicySetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ApplicationPolicySet application_policy_set = 1 [(gogoproto.customname) = "ApplicationPolicySet"];
}



message BGPAsAService {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    bool bgpaas_shared = 9 [(gogoproto.customname) = "BgpaasShared" ];
    string bgpaas_session_attributes = 10 [(gogoproto.customname) = "BgpaasSessionAttributes" ];
    bool bgpaas_suppress_route_advertisement = 11 [(gogoproto.customname) = "BgpaasSuppressRouteAdvertisement" ];
    bool bgpaas_ipv4_mapped_ipv6_nexthop = 12 [(gogoproto.customname) = "BgpaasIpv4MappedIpv6Nexthop" ];
    string bgpaas_ip_address = 13 [(gogoproto.customname) = "BgpaasIPAddress" ,(gogoproto.casttype) = "IpAddressType"];
    int64 autonomous_system = 14 [(gogoproto.customname) = "AutonomousSystem" ,(gogoproto.casttype) = "AutonomousSystemType"]; 

    repeated BGPAsAServiceVirtualMachineInterfaceRef virtual_machine_interface_refs = 1015 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];
    repeated BGPAsAServiceServiceHealthCheckRef service_health_check_refs = 1016 [(gogoproto.customname) = "ServiceHealthCheckRefs"];

}


message BGPAsAServiceVirtualMachineInterfaceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message BGPAsAServiceServiceHealthCheckRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateBGPAsAServiceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BGPAsAService bgp_as_a_service = 1 [(gogoproto.customname) = "BGPAsAService"];
}

message CreateBGPAsAServiceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BGPAsAService bgp_as_a_service = 1 [(gogoproto.customname) = "BGPAsAService"];
}

message UpdateBGPAsAServiceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BGPAsAService bgp_as_a_service = 1 [(gogoproto.customname) = "BGPAsAService"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateBGPAsAServiceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BGPAsAService bgp_as_a_service = 1 [(gogoproto.customname) = "BGPAsAService"];
}

message DeleteBGPAsAServiceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteBGPAsAServiceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListBGPAsAServiceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListBGPAsAServiceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated BGPAsAService bgp_as_a_services = 1 [(gogoproto.customname) = "BGPAsAServices"];
}

message GetBGPAsAServiceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetBGPAsAServiceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BGPAsAService bgp_as_a_service = 1 [(gogoproto.customname) = "BGPAsAService"];
}



message BGPRouter {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ]; 


}



message CreateBGPRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BGPRouter bgp_router = 1 [(gogoproto.customname) = "BGPRouter"];
}

message CreateBGPRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BGPRouter bgp_router = 1 [(gogoproto.customname) = "BGPRouter"];
}

message UpdateBGPRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BGPRouter bgp_router = 1 [(gogoproto.customname) = "BGPRouter"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateBGPRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BGPRouter bgp_router = 1 [(gogoproto.customname) = "BGPRouter"];
}

message DeleteBGPRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteBGPRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListBGPRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListBGPRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated BGPRouter bgp_routers = 1 [(gogoproto.customname) = "BGPRouters"];
}

message GetBGPRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetBGPRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BGPRouter bgp_router = 1 [(gogoproto.customname) = "BGPRouter"];
}



message BGPVPN {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    RouteTargetList route_target_list = 9 [(gogoproto.customname) = "RouteTargetList" ];
    RouteTargetList import_route_target_list = 10 [(gogoproto.customname) = "ImportRouteTargetList" ];
    RouteTargetList export_route_target_list = 11 [(gogoproto.customname) = "ExportRouteTargetList" ];
    string bgpvpn_type = 12 [(gogoproto.customname) = "BGPVPNType" ,(gogoproto.casttype) = "VpnType"]; 


}



message CreateBGPVPNRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BGPVPN bgpvpn = 1 [(gogoproto.customname) = "BGPVPN"];
}

message CreateBGPVPNResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BGPVPN bgpvpn = 1 [(gogoproto.customname) = "BGPVPN"];
}

message UpdateBGPVPNRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BGPVPN bgpvpn = 1 [(gogoproto.customname) = "BGPVPN"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateBGPVPNResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BGPVPN bgpvpn = 1 [(gogoproto.customname) = "BGPVPN"];
}

message DeleteBGPVPNRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteBGPVPNResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListBGPVPNRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListBGPVPNResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated BGPVPN bgpvpns = 1 [(gogoproto.customname) = "BGPVPNs"];
}

message GetBGPVPNRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetBGPVPNResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BGPVPN bgpvpn = 1 [(gogoproto.customname) = "BGPVPN"];
}



message BridgeDomain {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    int64 mac_aging_time = 9 [(gogoproto.customname) = "MacAgingTime" ,(gogoproto.casttype) = "MACAgingTime"];
    int64 isid = 10 [(gogoproto.customname) = "Isid" ,(gogoproto.casttype) = "IsidType"];
    bool mac_learning_enabled = 11 [(gogoproto.customname) = "MacLearningEnabled" ];
    MACMoveLimitControlType mac_move_control = 12 [(gogoproto.customname) = "MacMoveControl" ];
    MACLimitControlType mac_limit_control = 13 [(gogoproto.customname) = "MacLimitControl" ]; 


}



message CreateBridgeDomainRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BridgeDomain bridge_domain = 1 [(gogoproto.customname) = "BridgeDomain"];
}

message CreateBridgeDomainResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BridgeDomain bridge_domain = 1 [(gogoproto.customname) = "BridgeDomain"];
}

message UpdateBridgeDomainRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BridgeDomain bridge_domain = 1 [(gogoproto.customname) = "BridgeDomain"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateBridgeDomainResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BridgeDomain bridge_domain = 1 [(gogoproto.customname) = "BridgeDomain"];
}

message DeleteBridgeDomainRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteBridgeDomainResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListBridgeDomainRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListBridgeDomainResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated BridgeDomain bridge_domains = 1 [(gogoproto.customname) = "BridgeDomains"];
}

message GetBridgeDomainRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetBridgeDomainResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BridgeDomain bridge_domain = 1 [(gogoproto.customname) = "BridgeDomain"];
}



message ConfigNode {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string config_node_ip_address = 9 [(gogoproto.customname) = "ConfigNodeIPAddress" ,(gogoproto.casttype) = "IpAddressType"]; 


}



message CreateConfigNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ConfigNode config_node = 1 [(gogoproto.customname) = "ConfigNode"];
}

message CreateConfigNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ConfigNode config_node = 1 [(gogoproto.customname) = "ConfigNode"];
}

message UpdateConfigNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ConfigNode config_node = 1 [(gogoproto.customname) = "ConfigNode"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateConfigNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ConfigNode config_node = 1 [(gogoproto.customname) = "ConfigNode"];
}

message DeleteConfigNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteConfigNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListConfigNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListConfigNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ConfigNode config_nodes = 1 [(gogoproto.customname) = "ConfigNodes"];
}

message GetConfigNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetConfigNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ConfigNode config_node = 1 [(gogoproto.customname) = "ConfigNode"];
}



message ConfigRoot {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ]; 

    repeated ConfigRootTagRef tag_refs = 1009 [(gogoproto.customname) = "TagRefs"];

    
    repeated Domain domains = 3010 [(gogoproto.customname) = "Domains"];
    
    repeated GlobalSystemConfig global_system_configs = 3011 [(gogoproto.customname) = "GlobalSystemConfigs"];
    
    repeated Tag tags = 3012 [(gogoproto.customname) = "Tags"];
}


message ConfigRootTagRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateConfigRootRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ConfigRoot config_root = 1 [(gogoproto.customname) = "ConfigRoot"];
}

message CreateConfigRootResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ConfigRoot config_root = 1 [(gogoproto.customname) = "ConfigRoot"];
}

message UpdateConfigRootRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ConfigRoot config_root = 1 [(gogoproto.customname) = "ConfigRoot"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateConfigRootResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ConfigRoot config_root = 1 [(gogoproto.customname) = "ConfigRoot"];
}

message DeleteConfigRootRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteConfigRootResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListConfigRootRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListConfigRootResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ConfigRoot config_roots = 1 [(gogoproto.customname) = "ConfigRoots"];
}

message GetConfigRootRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetConfigRootResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ConfigRoot config_root = 1 [(gogoproto.customname) = "ConfigRoot"];
}



message CustomerAttachment {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ]; 

    repeated CustomerAttachmentVirtualMachineInterfaceRef virtual_machine_interface_refs = 1009 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];
    repeated CustomerAttachmentFloatingIPRef floating_ip_refs = 1010 [(gogoproto.customname) = "FloatingIPRefs"];

}


message CustomerAttachmentFloatingIPRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message CustomerAttachmentVirtualMachineInterfaceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateCustomerAttachmentRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    CustomerAttachment customer_attachment = 1 [(gogoproto.customname) = "CustomerAttachment"];
}

message CreateCustomerAttachmentResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    CustomerAttachment customer_attachment = 1 [(gogoproto.customname) = "CustomerAttachment"];
}

message UpdateCustomerAttachmentRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    CustomerAttachment customer_attachment = 1 [(gogoproto.customname) = "CustomerAttachment"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateCustomerAttachmentResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    CustomerAttachment customer_attachment = 1 [(gogoproto.customname) = "CustomerAttachment"];
}

message DeleteCustomerAttachmentRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteCustomerAttachmentResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListCustomerAttachmentRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListCustomerAttachmentResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated CustomerAttachment customer_attachments = 1 [(gogoproto.customname) = "CustomerAttachments"];
}

message GetCustomerAttachmentRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetCustomerAttachmentResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    CustomerAttachment customer_attachment = 1 [(gogoproto.customname) = "CustomerAttachment"];
}



message DatabaseNode {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string database_node_ip_address = 9 [(gogoproto.customname) = "DatabaseNodeIPAddress" ,(gogoproto.casttype) = "IpAddressType"]; 


}



message CreateDatabaseNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    DatabaseNode database_node = 1 [(gogoproto.customname) = "DatabaseNode"];
}

message CreateDatabaseNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    DatabaseNode database_node = 1 [(gogoproto.customname) = "DatabaseNode"];
}

message UpdateDatabaseNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    DatabaseNode database_node = 1 [(gogoproto.customname) = "DatabaseNode"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateDatabaseNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    DatabaseNode database_node = 1 [(gogoproto.customname) = "DatabaseNode"];
}

message DeleteDatabaseNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteDatabaseNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListDatabaseNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListDatabaseNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated DatabaseNode database_nodes = 1 [(gogoproto.customname) = "DatabaseNodes"];
}

message GetDatabaseNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetDatabaseNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    DatabaseNode database_node = 1 [(gogoproto.customname) = "DatabaseNode"];
}



message DiscoveryServiceAssignment {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ]; 


    
    repeated DsaRule dsa_rules = 3009 [(gogoproto.customname) = "DsaRules"];
}



message CreateDiscoveryServiceAssignmentRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    DiscoveryServiceAssignment discovery_service_assignment = 1 [(gogoproto.customname) = "DiscoveryServiceAssignment"];
}

message CreateDiscoveryServiceAssignmentResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    DiscoveryServiceAssignment discovery_service_assignment = 1 [(gogoproto.customname) = "DiscoveryServiceAssignment"];
}

message UpdateDiscoveryServiceAssignmentRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    DiscoveryServiceAssignment discovery_service_assignment = 1 [(gogoproto.customname) = "DiscoveryServiceAssignment"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateDiscoveryServiceAssignmentResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    DiscoveryServiceAssignment discovery_service_assignment = 1 [(gogoproto.customname) = "DiscoveryServiceAssignment"];
}

message DeleteDiscoveryServiceAssignmentRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteDiscoveryServiceAssignmentResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListDiscoveryServiceAssignmentRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListDiscoveryServiceAssignmentResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated DiscoveryServiceAssignment discovery_service_assignments = 1 [(gogoproto.customname) = "DiscoveryServiceAssignments"];
}

message GetDiscoveryServiceAssignmentRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetDiscoveryServiceAssignmentResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    DiscoveryServiceAssignment discovery_service_assignment = 1 [(gogoproto.customname) = "DiscoveryServiceAssignment"];
}



message Domain {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    DomainLimitsType domain_limits = 9 [(gogoproto.customname) = "DomainLimits" ]; 


    
    repeated APIAccessList api_access_lists = 3010 [(gogoproto.customname) = "APIAccessLists"];
    
    repeated Namespace namespaces = 3011 [(gogoproto.customname) = "Namespaces"];
    
    repeated Project projects = 3012 [(gogoproto.customname) = "Projects"];
    
    repeated ServiceTemplate service_templates = 3013 [(gogoproto.customname) = "ServiceTemplates"];
    
    repeated VirtualDNS virtual_DNSs = 3014 [(gogoproto.customname) = "VirtualDNSs"];
}



message CreateDomainRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Domain domain = 1 [(gogoproto.customname) = "Domain"];
}

message CreateDomainResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Domain domain = 1 [(gogoproto.customname) = "Domain"];
}

message UpdateDomainRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Domain domain = 1 [(gogoproto.customname) = "Domain"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateDomainResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Domain domain = 1 [(gogoproto.customname) = "Domain"];
}

message DeleteDomainRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteDomainResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListDomainRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListDomainResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated Domain domains = 1 [(gogoproto.customname) = "Domains"];
}

message GetDomainRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetDomainResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Domain domain = 1 [(gogoproto.customname) = "Domain"];
}



message DsaRule {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    DiscoveryServiceAssignmentType dsa_rule_entry = 9 [(gogoproto.customname) = "DsaRuleEntry" ]; 


}



message CreateDsaRuleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    DsaRule dsa_rule = 1 [(gogoproto.customname) = "DsaRule"];
}

message CreateDsaRuleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    DsaRule dsa_rule = 1 [(gogoproto.customname) = "DsaRule"];
}

message UpdateDsaRuleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    DsaRule dsa_rule = 1 [(gogoproto.customname) = "DsaRule"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateDsaRuleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    DsaRule dsa_rule = 1 [(gogoproto.customname) = "DsaRule"];
}

message DeleteDsaRuleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteDsaRuleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListDsaRuleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListDsaRuleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated DsaRule dsa_rules = 1 [(gogoproto.customname) = "DsaRules"];
}

message GetDsaRuleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetDsaRuleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    DsaRule dsa_rule = 1 [(gogoproto.customname) = "DsaRule"];
}



message E2ServiceProvider {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    bool e2_service_provider_promiscuous = 9 [(gogoproto.customname) = "E2ServiceProviderPromiscuous" ]; 

    repeated E2ServiceProviderPeeringPolicyRef peering_policy_refs = 1011 [(gogoproto.customname) = "PeeringPolicyRefs"];
    repeated E2ServiceProviderPhysicalRouterRef physical_router_refs = 1010 [(gogoproto.customname) = "PhysicalRouterRefs"];

}


message E2ServiceProviderPhysicalRouterRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message E2ServiceProviderPeeringPolicyRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateE2ServiceProviderRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    E2ServiceProvider e2_service_provider = 1 [(gogoproto.customname) = "E2ServiceProvider"];
}

message CreateE2ServiceProviderResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    E2ServiceProvider e2_service_provider = 1 [(gogoproto.customname) = "E2ServiceProvider"];
}

message UpdateE2ServiceProviderRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    E2ServiceProvider e2_service_provider = 1 [(gogoproto.customname) = "E2ServiceProvider"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateE2ServiceProviderResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    E2ServiceProvider e2_service_provider = 1 [(gogoproto.customname) = "E2ServiceProvider"];
}

message DeleteE2ServiceProviderRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteE2ServiceProviderResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListE2ServiceProviderRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListE2ServiceProviderResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated E2ServiceProvider e2_service_providers = 1 [(gogoproto.customname) = "E2ServiceProviders"];
}

message GetE2ServiceProviderRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetE2ServiceProviderResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    E2ServiceProvider e2_service_provider = 1 [(gogoproto.customname) = "E2ServiceProvider"];
}



message FirewallPolicy {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ]; 

    repeated FirewallPolicyFirewallRuleRef firewall_rule_refs = 1009 [(gogoproto.customname) = "FirewallRuleRefs"];
    repeated FirewallPolicySecurityLoggingObjectRef security_logging_object_refs = 1010 [(gogoproto.customname) = "SecurityLoggingObjectRefs"];

}


message FirewallPolicyFirewallRuleRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    FirewallSequence attr = 3 [(gogoproto.customname) = "Attr"];
    
}

message FirewallPolicySecurityLoggingObjectRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateFirewallPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FirewallPolicy firewall_policy = 1 [(gogoproto.customname) = "FirewallPolicy"];
}

message CreateFirewallPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FirewallPolicy firewall_policy = 1 [(gogoproto.customname) = "FirewallPolicy"];
}

message UpdateFirewallPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FirewallPolicy firewall_policy = 1 [(gogoproto.customname) = "FirewallPolicy"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateFirewallPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FirewallPolicy firewall_policy = 1 [(gogoproto.customname) = "FirewallPolicy"];
}

message DeleteFirewallPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteFirewallPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListFirewallPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListFirewallPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated FirewallPolicy firewall_policys = 1 [(gogoproto.customname) = "FirewallPolicys"];
}

message GetFirewallPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetFirewallPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FirewallPolicy firewall_policy = 1 [(gogoproto.customname) = "FirewallPolicy"];
}



message FirewallRule {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    FirewallRuleEndpointType endpoint_1 = 9 [(gogoproto.customname) = "Endpoint1" ];
    FirewallRuleEndpointType endpoint_2 = 10 [(gogoproto.customname) = "Endpoint2" ];
    ActionListType action_list = 11 [(gogoproto.customname) = "ActionList" ];
    FirewallServiceType service = 12 [(gogoproto.customname) = "Service" ];
    string direction = 13 [(gogoproto.customname) = "Direction" ,(gogoproto.casttype) = "FirewallRuleDirectionType"];
    FirewallRuleMatchTagsTypeIdList match_tag_types = 14 [(gogoproto.customname) = "MatchTagTypes" ];
    FirewallRuleMatchTagsType match_tags = 15 [(gogoproto.customname) = "MatchTags" ]; 

    repeated FirewallRuleAddressGroupRef address_group_refs = 1017 [(gogoproto.customname) = "AddressGroupRefs"];
    repeated FirewallRuleSecurityLoggingObjectRef security_logging_object_refs = 1018 [(gogoproto.customname) = "SecurityLoggingObjectRefs"];
    repeated FirewallRuleVirtualNetworkRef virtual_network_refs = 1019 [(gogoproto.customname) = "VirtualNetworkRefs"];
    repeated FirewallRuleServiceGroupRef service_group_refs = 1016 [(gogoproto.customname) = "ServiceGroupRefs"];

}


message FirewallRuleServiceGroupRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message FirewallRuleAddressGroupRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message FirewallRuleSecurityLoggingObjectRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message FirewallRuleVirtualNetworkRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateFirewallRuleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FirewallRule firewall_rule = 1 [(gogoproto.customname) = "FirewallRule"];
}

message CreateFirewallRuleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FirewallRule firewall_rule = 1 [(gogoproto.customname) = "FirewallRule"];
}

message UpdateFirewallRuleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FirewallRule firewall_rule = 1 [(gogoproto.customname) = "FirewallRule"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateFirewallRuleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FirewallRule firewall_rule = 1 [(gogoproto.customname) = "FirewallRule"];
}

message DeleteFirewallRuleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteFirewallRuleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListFirewallRuleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListFirewallRuleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated FirewallRule firewall_rules = 1 [(gogoproto.customname) = "FirewallRules"];
}

message GetFirewallRuleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetFirewallRuleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FirewallRule firewall_rule = 1 [(gogoproto.customname) = "FirewallRule"];
}



message FloatingIPPool {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    FloatingIpPoolSubnetType floating_ip_pool_subnets = 9 [(gogoproto.customname) = "FloatingIPPoolSubnets" ]; 


    
    repeated FloatingIP floating_ips = 3010 [(gogoproto.customname) = "FloatingIPs"];
}



message CreateFloatingIPPoolRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FloatingIPPool floating_ip_pool = 1 [(gogoproto.customname) = "FloatingIPPool"];
}

message CreateFloatingIPPoolResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FloatingIPPool floating_ip_pool = 1 [(gogoproto.customname) = "FloatingIPPool"];
}

message UpdateFloatingIPPoolRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FloatingIPPool floating_ip_pool = 1 [(gogoproto.customname) = "FloatingIPPool"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateFloatingIPPoolResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FloatingIPPool floating_ip_pool = 1 [(gogoproto.customname) = "FloatingIPPool"];
}

message DeleteFloatingIPPoolRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteFloatingIPPoolResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListFloatingIPPoolRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListFloatingIPPoolResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated FloatingIPPool floating_ip_pools = 1 [(gogoproto.customname) = "FloatingIPPools"];
}

message GetFloatingIPPoolRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetFloatingIPPoolResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FloatingIPPool floating_ip_pool = 1 [(gogoproto.customname) = "FloatingIPPool"];
}



message FloatingIP {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string floating_ip_address_family = 9 [(gogoproto.customname) = "FloatingIPAddressFamily" ,(gogoproto.casttype) = "IpAddressFamilyType"];
    PortMappings floating_ip_port_mappings = 10 [(gogoproto.customname) = "FloatingIPPortMappings" ];
    bool floating_ip_is_virtual_ip = 11 [(gogoproto.customname) = "FloatingIPIsVirtualIP" ];
    string floating_ip_address = 12 [(gogoproto.customname) = "FloatingIPAddress" ,(gogoproto.casttype) = "IpAddressType"];
    bool floating_ip_port_mappings_enable = 13 [(gogoproto.customname) = "FloatingIPPortMappingsEnable" ];
    string floating_ip_fixed_ip_address = 14 [(gogoproto.customname) = "FloatingIPFixedIPAddress" ,(gogoproto.casttype) = "IpAddressType"];
    string floating_ip_traffic_direction = 15 [(gogoproto.customname) = "FloatingIPTrafficDirection" ,(gogoproto.casttype) = "TrafficDirectionType"]; 

    repeated FloatingIPProjectRef project_refs = 1016 [(gogoproto.customname) = "ProjectRefs"];
    repeated FloatingIPVirtualMachineInterfaceRef virtual_machine_interface_refs = 1017 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];

}


message FloatingIPProjectRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message FloatingIPVirtualMachineInterfaceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateFloatingIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FloatingIP floating_ip = 1 [(gogoproto.customname) = "FloatingIP"];
}

message CreateFloatingIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FloatingIP floating_ip = 1 [(gogoproto.customname) = "FloatingIP"];
}

message UpdateFloatingIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FloatingIP floating_ip = 1 [(gogoproto.customname) = "FloatingIP"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateFloatingIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FloatingIP floating_ip = 1 [(gogoproto.customname) = "FloatingIP"];
}

message DeleteFloatingIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteFloatingIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListFloatingIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListFloatingIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated FloatingIP floating_ips = 1 [(gogoproto.customname) = "FloatingIPs"];
}

message GetFloatingIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetFloatingIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    FloatingIP floating_ip = 1 [(gogoproto.customname) = "FloatingIP"];
}



message ForwardingClass {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    int64 forwarding_class_dscp = 9 [(gogoproto.customname) = "ForwardingClassDSCP" ,(gogoproto.casttype) = "DscpValueType"];
    int64 forwarding_class_vlan_priority = 10 [(gogoproto.customname) = "ForwardingClassVlanPriority" ,(gogoproto.casttype) = "VlanPriorityType"];
    int64 forwarding_class_mpls_exp = 11 [(gogoproto.customname) = "ForwardingClassMPLSExp" ,(gogoproto.casttype) = "MplsExpType"];
    int64 forwarding_class_id = 12 [(gogoproto.customname) = "ForwardingClassID" ,(gogoproto.casttype) = "ForwardingClassId"]; 

    repeated ForwardingClassQosQueueRef qos_queue_refs = 1013 [(gogoproto.customname) = "QosQueueRefs"];

}


message ForwardingClassQosQueueRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateForwardingClassRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ForwardingClass forwarding_class = 1 [(gogoproto.customname) = "ForwardingClass"];
}

message CreateForwardingClassResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ForwardingClass forwarding_class = 1 [(gogoproto.customname) = "ForwardingClass"];
}

message UpdateForwardingClassRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ForwardingClass forwarding_class = 1 [(gogoproto.customname) = "ForwardingClass"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateForwardingClassResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ForwardingClass forwarding_class = 1 [(gogoproto.customname) = "ForwardingClass"];
}

message DeleteForwardingClassRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteForwardingClassResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListForwardingClassRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListForwardingClassResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ForwardingClass forwarding_classs = 1 [(gogoproto.customname) = "ForwardingClasss"];
}

message GetForwardingClassRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetForwardingClassResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ForwardingClass forwarding_class = 1 [(gogoproto.customname) = "ForwardingClass"];
}



message GlobalQosConfig {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    ControlTrafficDscpType control_traffic_dscp = 9 [(gogoproto.customname) = "ControlTrafficDSCP" ]; 


    
    repeated ForwardingClass forwarding_classs = 3010 [(gogoproto.customname) = "ForwardingClasss"];
    
    repeated QosConfig qos_configs = 3011 [(gogoproto.customname) = "QosConfigs"];
    
    repeated QosQueue qos_queues = 3012 [(gogoproto.customname) = "QosQueues"];
}



message CreateGlobalQosConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    GlobalQosConfig global_qos_config = 1 [(gogoproto.customname) = "GlobalQosConfig"];
}

message CreateGlobalQosConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    GlobalQosConfig global_qos_config = 1 [(gogoproto.customname) = "GlobalQosConfig"];
}

message UpdateGlobalQosConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    GlobalQosConfig global_qos_config = 1 [(gogoproto.customname) = "GlobalQosConfig"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateGlobalQosConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    GlobalQosConfig global_qos_config = 1 [(gogoproto.customname) = "GlobalQosConfig"];
}

message DeleteGlobalQosConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteGlobalQosConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListGlobalQosConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListGlobalQosConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated GlobalQosConfig global_qos_configs = 1 [(gogoproto.customname) = "GlobalQosConfigs"];
}

message GetGlobalQosConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetGlobalQosConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    GlobalQosConfig global_qos_config = 1 [(gogoproto.customname) = "GlobalQosConfig"];
}



message GlobalSystemConfig {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string config_version = 9 [(gogoproto.customname) = "ConfigVersion" ];
    BGPaaServiceParametersType bgpaas_parameters = 10 [(gogoproto.customname) = "BgpaasParameters" ];
    bool alarm_enable = 11 [(gogoproto.customname) = "AlarmEnable" ];
    MACMoveLimitControlType mac_move_control = 12 [(gogoproto.customname) = "MacMoveControl" ];
    PluginProperties plugin_tuning = 13 [(gogoproto.customname) = "PluginTuning" ];
    bool ibgp_auto_mesh = 14 [(gogoproto.customname) = "IbgpAutoMesh" ];
    int64 mac_aging_time = 15 [(gogoproto.customname) = "MacAgingTime" ,(gogoproto.casttype) = "MACAgingTime"];
    bool bgp_always_compare_med = 16 [(gogoproto.customname) = "BGPAlwaysCompareMed" ];
    UserDefinedLogStatList user_defined_log_statistics = 17 [(gogoproto.customname) = "UserDefinedLogStatistics" ];
    GracefulRestartParametersType graceful_restart_parameters = 18 [(gogoproto.customname) = "GracefulRestartParameters" ];
    SubnetListType ip_fabric_subnets = 19 [(gogoproto.customname) = "IPFabricSubnets" ];
    int64 autonomous_system = 20 [(gogoproto.customname) = "AutonomousSystem" ,(gogoproto.casttype) = "AutonomousSystemType"];
    MACLimitControlType mac_limit_control = 21 [(gogoproto.customname) = "MacLimitControl" ]; 

    repeated GlobalSystemConfigBGPRouterRef bgp_router_refs = 1022 [(gogoproto.customname) = "BGPRouterRefs"];

    
    repeated Alarm alarms = 3023 [(gogoproto.customname) = "Alarms"];
    
    repeated AnalyticsNode analytics_nodes = 3024 [(gogoproto.customname) = "AnalyticsNodes"];
    
    repeated APIAccessList api_access_lists = 3025 [(gogoproto.customname) = "APIAccessLists"];
    
    repeated ConfigNode config_nodes = 3026 [(gogoproto.customname) = "ConfigNodes"];
    
    repeated DatabaseNode database_nodes = 3027 [(gogoproto.customname) = "DatabaseNodes"];
    
    repeated GlobalQosConfig global_qos_configs = 3028 [(gogoproto.customname) = "GlobalQosConfigs"];
    
    repeated GlobalVrouterConfig global_vrouter_configs = 3029 [(gogoproto.customname) = "GlobalVrouterConfigs"];
    
    repeated PhysicalRouter physical_routers = 3030 [(gogoproto.customname) = "PhysicalRouters"];
    
    repeated ServiceApplianceSet service_appliance_sets = 3031 [(gogoproto.customname) = "ServiceApplianceSets"];
    
    repeated VirtualRouter virtual_routers = 3032 [(gogoproto.customname) = "VirtualRouters"];
}


message GlobalSystemConfigBGPRouterRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateGlobalSystemConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    GlobalSystemConfig global_system_config = 1 [(gogoproto.customname) = "GlobalSystemConfig"];
}

message CreateGlobalSystemConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    GlobalSystemConfig global_system_config = 1 [(gogoproto.customname) = "GlobalSystemConfig"];
}

message UpdateGlobalSystemConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    GlobalSystemConfig global_system_config = 1 [(gogoproto.customname) = "GlobalSystemConfig"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateGlobalSystemConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    GlobalSystemConfig global_system_config = 1 [(gogoproto.customname) = "GlobalSystemConfig"];
}

message DeleteGlobalSystemConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteGlobalSystemConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListGlobalSystemConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListGlobalSystemConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated GlobalSystemConfig global_system_configs = 1 [(gogoproto.customname) = "GlobalSystemConfigs"];
}

message GetGlobalSystemConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetGlobalSystemConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    GlobalSystemConfig global_system_config = 1 [(gogoproto.customname) = "GlobalSystemConfig"];
}



message GlobalVrouterConfig {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    EcmpHashingIncludeFields ecmp_hashing_include_fields = 9 [(gogoproto.customname) = "EcmpHashingIncludeFields" ];
    FlowAgingTimeoutList flow_aging_timeout_list = 10 [(gogoproto.customname) = "FlowAgingTimeoutList" ];
    string forwarding_mode = 11 [(gogoproto.customname) = "ForwardingMode" ,(gogoproto.casttype) = "ForwardingModeType"];
    int64 flow_export_rate = 12 [(gogoproto.customname) = "FlowExportRate" ,(gogoproto.casttype) = "int"];
    LinklocalServicesTypes linklocal_services = 13 [(gogoproto.customname) = "LinklocalServices" ];
    EncapsulationPrioritiesType encapsulation_priorities = 14 [(gogoproto.customname) = "EncapsulationPriorities" ];
    string vxlan_network_identifier_mode = 15 [(gogoproto.customname) = "VxlanNetworkIdentifierMode" ,(gogoproto.casttype) = "VxlanNetworkIdentifierModeType"];
    bool enable_security_logging = 16 [(gogoproto.customname) = "EnableSecurityLogging" ]; 


    
    repeated SecurityLoggingObject security_logging_objects = 3017 [(gogoproto.customname) = "SecurityLoggingObjects"];
}



message CreateGlobalVrouterConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    GlobalVrouterConfig global_vrouter_config = 1 [(gogoproto.customname) = "GlobalVrouterConfig"];
}

message CreateGlobalVrouterConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    GlobalVrouterConfig global_vrouter_config = 1 [(gogoproto.customname) = "GlobalVrouterConfig"];
}

message UpdateGlobalVrouterConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    GlobalVrouterConfig global_vrouter_config = 1 [(gogoproto.customname) = "GlobalVrouterConfig"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateGlobalVrouterConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    GlobalVrouterConfig global_vrouter_config = 1 [(gogoproto.customname) = "GlobalVrouterConfig"];
}

message DeleteGlobalVrouterConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteGlobalVrouterConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListGlobalVrouterConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListGlobalVrouterConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated GlobalVrouterConfig global_vrouter_configs = 1 [(gogoproto.customname) = "GlobalVrouterConfigs"];
}

message GetGlobalVrouterConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetGlobalVrouterConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    GlobalVrouterConfig global_vrouter_config = 1 [(gogoproto.customname) = "GlobalVrouterConfig"];
}



message InstanceIP {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    bool service_health_check_ip = 9 [(gogoproto.customname) = "ServiceHealthCheckIP" ];
    SubnetType secondary_ip_tracking_ip = 10 [(gogoproto.customname) = "SecondaryIPTrackingIP" ];
    string instance_ip_address = 11 [(gogoproto.customname) = "InstanceIPAddress" ,(gogoproto.casttype) = "IpAddressType"];
    string instance_ip_mode = 12 [(gogoproto.customname) = "InstanceIPMode" ,(gogoproto.casttype) = "AddressMode"];
    string subnet_uuid = 13 [(gogoproto.customname) = "SubnetUUID" ];
    string instance_ip_family = 14 [(gogoproto.customname) = "InstanceIPFamily" ,(gogoproto.casttype) = "IpAddressFamilyType"];
    bool service_instance_ip = 15 [(gogoproto.customname) = "ServiceInstanceIP" ];
    bool instance_ip_local_ip = 16 [(gogoproto.customname) = "InstanceIPLocalIP" ];
    bool instance_ip_secondary = 17 [(gogoproto.customname) = "InstanceIPSecondary" ]; 

    repeated InstanceIPNetworkIpamRef network_ipam_refs = 1018 [(gogoproto.customname) = "NetworkIpamRefs"];
    repeated InstanceIPVirtualNetworkRef virtual_network_refs = 1019 [(gogoproto.customname) = "VirtualNetworkRefs"];
    repeated InstanceIPVirtualMachineInterfaceRef virtual_machine_interface_refs = 1020 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];
    repeated InstanceIPPhysicalRouterRef physical_router_refs = 1021 [(gogoproto.customname) = "PhysicalRouterRefs"];
    repeated InstanceIPVirtualRouterRef virtual_router_refs = 1022 [(gogoproto.customname) = "VirtualRouterRefs"];

    
    repeated FloatingIP floating_ips = 3023 [(gogoproto.customname) = "FloatingIPs"];
}


message InstanceIPNetworkIpamRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message InstanceIPVirtualNetworkRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message InstanceIPVirtualMachineInterfaceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message InstanceIPPhysicalRouterRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message InstanceIPVirtualRouterRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateInstanceIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    InstanceIP instance_ip = 1 [(gogoproto.customname) = "InstanceIP"];
}

message CreateInstanceIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    InstanceIP instance_ip = 1 [(gogoproto.customname) = "InstanceIP"];
}

message UpdateInstanceIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    InstanceIP instance_ip = 1 [(gogoproto.customname) = "InstanceIP"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateInstanceIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    InstanceIP instance_ip = 1 [(gogoproto.customname) = "InstanceIP"];
}

message DeleteInstanceIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteInstanceIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListInstanceIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListInstanceIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated InstanceIP instance_ips = 1 [(gogoproto.customname) = "InstanceIPs"];
}

message GetInstanceIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetInstanceIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    InstanceIP instance_ip = 1 [(gogoproto.customname) = "InstanceIP"];
}



message InterfaceRouteTable {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    RouteTableType interface_route_table_routes = 9 [(gogoproto.customname) = "InterfaceRouteTableRoutes" ]; 

    repeated InterfaceRouteTableServiceInstanceRef service_instance_refs = 1010 [(gogoproto.customname) = "ServiceInstanceRefs"];

}


message InterfaceRouteTableServiceInstanceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    ServiceInterfaceTag attr = 3 [(gogoproto.customname) = "Attr"];
    
}


message CreateInterfaceRouteTableRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    InterfaceRouteTable interface_route_table = 1 [(gogoproto.customname) = "InterfaceRouteTable"];
}

message CreateInterfaceRouteTableResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    InterfaceRouteTable interface_route_table = 1 [(gogoproto.customname) = "InterfaceRouteTable"];
}

message UpdateInterfaceRouteTableRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    InterfaceRouteTable interface_route_table = 1 [(gogoproto.customname) = "InterfaceRouteTable"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateInterfaceRouteTableResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    InterfaceRouteTable interface_route_table = 1 [(gogoproto.customname) = "InterfaceRouteTable"];
}

message DeleteInterfaceRouteTableRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteInterfaceRouteTableResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListInterfaceRouteTableRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListInterfaceRouteTableResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated InterfaceRouteTable interface_route_tables = 1 [(gogoproto.customname) = "InterfaceRouteTables"];
}

message GetInterfaceRouteTableRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetInterfaceRouteTableResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    InterfaceRouteTable interface_route_table = 1 [(gogoproto.customname) = "InterfaceRouteTable"];
}



message LoadbalancerHealthmonitor {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    LoadbalancerHealthmonitorType loadbalancer_healthmonitor_properties = 9 [(gogoproto.customname) = "LoadbalancerHealthmonitorProperties" ]; 


}



message CreateLoadbalancerHealthmonitorRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerHealthmonitor loadbalancer_healthmonitor = 1 [(gogoproto.customname) = "LoadbalancerHealthmonitor"];
}

message CreateLoadbalancerHealthmonitorResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerHealthmonitor loadbalancer_healthmonitor = 1 [(gogoproto.customname) = "LoadbalancerHealthmonitor"];
}

message UpdateLoadbalancerHealthmonitorRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerHealthmonitor loadbalancer_healthmonitor = 1 [(gogoproto.customname) = "LoadbalancerHealthmonitor"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateLoadbalancerHealthmonitorResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerHealthmonitor loadbalancer_healthmonitor = 1 [(gogoproto.customname) = "LoadbalancerHealthmonitor"];
}

message DeleteLoadbalancerHealthmonitorRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteLoadbalancerHealthmonitorResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListLoadbalancerHealthmonitorRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListLoadbalancerHealthmonitorResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated LoadbalancerHealthmonitor loadbalancer_healthmonitors = 1 [(gogoproto.customname) = "LoadbalancerHealthmonitors"];
}

message GetLoadbalancerHealthmonitorRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetLoadbalancerHealthmonitorResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerHealthmonitor loadbalancer_healthmonitor = 1 [(gogoproto.customname) = "LoadbalancerHealthmonitor"];
}



message LoadbalancerListener {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    LoadbalancerListenerType loadbalancer_listener_properties = 9 [(gogoproto.customname) = "LoadbalancerListenerProperties" ]; 

    repeated LoadbalancerListenerLoadbalancerRef loadbalancer_refs = 1010 [(gogoproto.customname) = "LoadbalancerRefs"];

}


message LoadbalancerListenerLoadbalancerRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateLoadbalancerListenerRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerListener loadbalancer_listener = 1 [(gogoproto.customname) = "LoadbalancerListener"];
}

message CreateLoadbalancerListenerResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerListener loadbalancer_listener = 1 [(gogoproto.customname) = "LoadbalancerListener"];
}

message UpdateLoadbalancerListenerRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerListener loadbalancer_listener = 1 [(gogoproto.customname) = "LoadbalancerListener"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateLoadbalancerListenerResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerListener loadbalancer_listener = 1 [(gogoproto.customname) = "LoadbalancerListener"];
}

message DeleteLoadbalancerListenerRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteLoadbalancerListenerResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListLoadbalancerListenerRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListLoadbalancerListenerResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated LoadbalancerListener loadbalancer_listeners = 1 [(gogoproto.customname) = "LoadbalancerListeners"];
}

message GetLoadbalancerListenerRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetLoadbalancerListenerResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerListener loadbalancer_listener = 1 [(gogoproto.customname) = "LoadbalancerListener"];
}



message LoadbalancerMember {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    LoadbalancerMemberType loadbalancer_member_properties = 9 [(gogoproto.customname) = "LoadbalancerMemberProperties" ]; 


}



message CreateLoadbalancerMemberRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerMember loadbalancer_member = 1 [(gogoproto.customname) = "LoadbalancerMember"];
}

message CreateLoadbalancerMemberResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerMember loadbalancer_member = 1 [(gogoproto.customname) = "LoadbalancerMember"];
}

message UpdateLoadbalancerMemberRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerMember loadbalancer_member = 1 [(gogoproto.customname) = "LoadbalancerMember"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateLoadbalancerMemberResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerMember loadbalancer_member = 1 [(gogoproto.customname) = "LoadbalancerMember"];
}

message DeleteLoadbalancerMemberRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteLoadbalancerMemberResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListLoadbalancerMemberRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListLoadbalancerMemberResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated LoadbalancerMember loadbalancer_members = 1 [(gogoproto.customname) = "LoadbalancerMembers"];
}

message GetLoadbalancerMemberRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetLoadbalancerMemberResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerMember loadbalancer_member = 1 [(gogoproto.customname) = "LoadbalancerMember"];
}



message LoadbalancerPool {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    LoadbalancerPoolType loadbalancer_pool_properties = 9 [(gogoproto.customname) = "LoadbalancerPoolProperties" ];
    KeyValuePairs loadbalancer_pool_custom_attributes = 10 [(gogoproto.customname) = "LoadbalancerPoolCustomAttributes" ];
    string loadbalancer_pool_provider = 11 [(gogoproto.customname) = "LoadbalancerPoolProvider" ]; 

    repeated LoadbalancerPoolLoadbalancerHealthmonitorRef loadbalancer_healthmonitor_refs = 1016 [(gogoproto.customname) = "LoadbalancerHealthmonitorRefs"];
    repeated LoadbalancerPoolServiceApplianceSetRef service_appliance_set_refs = 1012 [(gogoproto.customname) = "ServiceApplianceSetRefs"];
    repeated LoadbalancerPoolVirtualMachineInterfaceRef virtual_machine_interface_refs = 1013 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];
    repeated LoadbalancerPoolLoadbalancerListenerRef loadbalancer_listener_refs = 1014 [(gogoproto.customname) = "LoadbalancerListenerRefs"];
    repeated LoadbalancerPoolServiceInstanceRef service_instance_refs = 1015 [(gogoproto.customname) = "ServiceInstanceRefs"];

    
    repeated LoadbalancerMember loadbalancer_members = 3017 [(gogoproto.customname) = "LoadbalancerMembers"];
}


message LoadbalancerPoolServiceInstanceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LoadbalancerPoolLoadbalancerHealthmonitorRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LoadbalancerPoolServiceApplianceSetRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LoadbalancerPoolVirtualMachineInterfaceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LoadbalancerPoolLoadbalancerListenerRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateLoadbalancerPoolRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerPool loadbalancer_pool = 1 [(gogoproto.customname) = "LoadbalancerPool"];
}

message CreateLoadbalancerPoolResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerPool loadbalancer_pool = 1 [(gogoproto.customname) = "LoadbalancerPool"];
}

message UpdateLoadbalancerPoolRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerPool loadbalancer_pool = 1 [(gogoproto.customname) = "LoadbalancerPool"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateLoadbalancerPoolResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerPool loadbalancer_pool = 1 [(gogoproto.customname) = "LoadbalancerPool"];
}

message DeleteLoadbalancerPoolRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteLoadbalancerPoolResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListLoadbalancerPoolRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListLoadbalancerPoolResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated LoadbalancerPool loadbalancer_pools = 1 [(gogoproto.customname) = "LoadbalancerPools"];
}

message GetLoadbalancerPoolRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetLoadbalancerPoolResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LoadbalancerPool loadbalancer_pool = 1 [(gogoproto.customname) = "LoadbalancerPool"];
}



message Loadbalancer {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    LoadbalancerType loadbalancer_properties = 9 [(gogoproto.customname) = "LoadbalancerProperties" ];
    string loadbalancer_provider = 10 [(gogoproto.customname) = "LoadbalancerProvider" ]; 

    repeated LoadbalancerServiceApplianceSetRef service_appliance_set_refs = 1011 [(gogoproto.customname) = "ServiceApplianceSetRefs"];
    repeated LoadbalancerVirtualMachineInterfaceRef virtual_machine_interface_refs = 1012 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];
    repeated LoadbalancerServiceInstanceRef service_instance_refs = 1013 [(gogoproto.customname) = "ServiceInstanceRefs"];

}


message LoadbalancerServiceApplianceSetRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LoadbalancerVirtualMachineInterfaceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LoadbalancerServiceInstanceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateLoadbalancerRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Loadbalancer loadbalancer = 1 [(gogoproto.customname) = "Loadbalancer"];
}

message CreateLoadbalancerResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Loadbalancer loadbalancer = 1 [(gogoproto.customname) = "Loadbalancer"];
}

message UpdateLoadbalancerRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Loadbalancer loadbalancer = 1 [(gogoproto.customname) = "Loadbalancer"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateLoadbalancerResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Loadbalancer loadbalancer = 1 [(gogoproto.customname) = "Loadbalancer"];
}

message DeleteLoadbalancerRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteLoadbalancerResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListLoadbalancerRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListLoadbalancerResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated Loadbalancer loadbalancers = 1 [(gogoproto.customname) = "Loadbalancers"];
}

message GetLoadbalancerRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetLoadbalancerResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Loadbalancer loadbalancer = 1 [(gogoproto.customname) = "Loadbalancer"];
}



message LogicalInterface {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    int64 logical_interface_vlan_tag = 9 [(gogoproto.customname) = "LogicalInterfaceVlanTag" ,(gogoproto.casttype) = "int"];
    string logical_interface_type = 10 [(gogoproto.customname) = "LogicalInterfaceType" ,(gogoproto.casttype) = "LogicalInterfaceType"]; 

    repeated LogicalInterfaceVirtualMachineInterfaceRef virtual_machine_interface_refs = 1011 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];

}


message LogicalInterfaceVirtualMachineInterfaceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateLogicalInterfaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LogicalInterface logical_interface = 1 [(gogoproto.customname) = "LogicalInterface"];
}

message CreateLogicalInterfaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LogicalInterface logical_interface = 1 [(gogoproto.customname) = "LogicalInterface"];
}

message UpdateLogicalInterfaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LogicalInterface logical_interface = 1 [(gogoproto.customname) = "LogicalInterface"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateLogicalInterfaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LogicalInterface logical_interface = 1 [(gogoproto.customname) = "LogicalInterface"];
}

message DeleteLogicalInterfaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteLogicalInterfaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListLogicalInterfaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListLogicalInterfaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated LogicalInterface logical_interfaces = 1 [(gogoproto.customname) = "LogicalInterfaces"];
}

message GetLogicalInterfaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetLogicalInterfaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LogicalInterface logical_interface = 1 [(gogoproto.customname) = "LogicalInterface"];
}



message LogicalRouter {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string vxlan_network_identifier = 9 [(gogoproto.customname) = "VxlanNetworkIdentifier" ];
    RouteTargetList configured_route_target_list = 10 [(gogoproto.customname) = "ConfiguredRouteTargetList" ]; 

    repeated LogicalRouterServiceInstanceRef service_instance_refs = 1013 [(gogoproto.customname) = "ServiceInstanceRefs"];
    repeated LogicalRouterRouteTableRef route_table_refs = 1014 [(gogoproto.customname) = "RouteTableRefs"];
    repeated LogicalRouterVirtualNetworkRef virtual_network_refs = 1015 [(gogoproto.customname) = "VirtualNetworkRefs"];
    repeated LogicalRouterPhysicalRouterRef physical_router_refs = 1016 [(gogoproto.customname) = "PhysicalRouterRefs"];
    repeated LogicalRouterBGPVPNRef bgpvpn_refs = 1017 [(gogoproto.customname) = "BGPVPNRefs"];
    repeated LogicalRouterRouteTargetRef route_target_refs = 1011 [(gogoproto.customname) = "RouteTargetRefs"];
    repeated LogicalRouterVirtualMachineInterfaceRef virtual_machine_interface_refs = 1012 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];

}


message LogicalRouterRouteTableRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LogicalRouterVirtualNetworkRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LogicalRouterPhysicalRouterRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LogicalRouterBGPVPNRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LogicalRouterRouteTargetRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LogicalRouterVirtualMachineInterfaceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LogicalRouterServiceInstanceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateLogicalRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LogicalRouter logical_router = 1 [(gogoproto.customname) = "LogicalRouter"];
}

message CreateLogicalRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LogicalRouter logical_router = 1 [(gogoproto.customname) = "LogicalRouter"];
}

message UpdateLogicalRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LogicalRouter logical_router = 1 [(gogoproto.customname) = "LogicalRouter"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateLogicalRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LogicalRouter logical_router = 1 [(gogoproto.customname) = "LogicalRouter"];
}

message DeleteLogicalRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteLogicalRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListLogicalRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListLogicalRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated LogicalRouter logical_routers = 1 [(gogoproto.customname) = "LogicalRouters"];
}

message GetLogicalRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetLogicalRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    LogicalRouter logical_router = 1 [(gogoproto.customname) = "LogicalRouter"];
}



message Namespace {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    SubnetType namespace_cidr = 9 [(gogoproto.customname) = "NamespaceCidr" ]; 


}



message CreateNamespaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Namespace namespace = 1 [(gogoproto.customname) = "Namespace"];
}

message CreateNamespaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Namespace namespace = 1 [(gogoproto.customname) = "Namespace"];
}

message UpdateNamespaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Namespace namespace = 1 [(gogoproto.customname) = "Namespace"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateNamespaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Namespace namespace = 1 [(gogoproto.customname) = "Namespace"];
}

message DeleteNamespaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteNamespaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListNamespaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListNamespaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated Namespace namespaces = 1 [(gogoproto.customname) = "Namespaces"];
}

message GetNamespaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetNamespaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Namespace namespace = 1 [(gogoproto.customname) = "Namespace"];
}



message NetworkDeviceConfig {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ]; 

    repeated NetworkDeviceConfigPhysicalRouterRef physical_router_refs = 1009 [(gogoproto.customname) = "PhysicalRouterRefs"];

}


message NetworkDeviceConfigPhysicalRouterRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateNetworkDeviceConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    NetworkDeviceConfig network_device_config = 1 [(gogoproto.customname) = "NetworkDeviceConfig"];
}

message CreateNetworkDeviceConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    NetworkDeviceConfig network_device_config = 1 [(gogoproto.customname) = "NetworkDeviceConfig"];
}

message UpdateNetworkDeviceConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    NetworkDeviceConfig network_device_config = 1 [(gogoproto.customname) = "NetworkDeviceConfig"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateNetworkDeviceConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    NetworkDeviceConfig network_device_config = 1 [(gogoproto.customname) = "NetworkDeviceConfig"];
}

message DeleteNetworkDeviceConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteNetworkDeviceConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListNetworkDeviceConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListNetworkDeviceConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated NetworkDeviceConfig network_device_configs = 1 [(gogoproto.customname) = "NetworkDeviceConfigs"];
}

message GetNetworkDeviceConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetNetworkDeviceConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    NetworkDeviceConfig network_device_config = 1 [(gogoproto.customname) = "NetworkDeviceConfig"];
}



message NetworkIpam {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    IpamType network_ipam_mgmt = 9 [(gogoproto.customname) = "NetworkIpamMGMT" ];
    IpamSubnets ipam_subnets = 10 [(gogoproto.customname) = "IpamSubnets" ];
    string ipam_subnet_method = 11 [(gogoproto.customname) = "IpamSubnetMethod" ,(gogoproto.casttype) = "SubnetMethodType"]; 

    repeated NetworkIpamVirtualDNSRef virtual_DNS_refs = 1012 [(gogoproto.customname) = "VirtualDNSRefs"];

}


message NetworkIpamVirtualDNSRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateNetworkIpamRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    NetworkIpam network_ipam = 1 [(gogoproto.customname) = "NetworkIpam"];
}

message CreateNetworkIpamResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    NetworkIpam network_ipam = 1 [(gogoproto.customname) = "NetworkIpam"];
}

message UpdateNetworkIpamRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    NetworkIpam network_ipam = 1 [(gogoproto.customname) = "NetworkIpam"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateNetworkIpamResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    NetworkIpam network_ipam = 1 [(gogoproto.customname) = "NetworkIpam"];
}

message DeleteNetworkIpamRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteNetworkIpamResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListNetworkIpamRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListNetworkIpamResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated NetworkIpam network_ipams = 1 [(gogoproto.customname) = "NetworkIpams"];
}

message GetNetworkIpamRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetNetworkIpamResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    NetworkIpam network_ipam = 1 [(gogoproto.customname) = "NetworkIpam"];
}



message NetworkPolicy {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    PolicyEntriesType network_policy_entries = 9 [(gogoproto.customname) = "NetworkPolicyEntries" ]; 


}



message CreateNetworkPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    NetworkPolicy network_policy = 1 [(gogoproto.customname) = "NetworkPolicy"];
}

message CreateNetworkPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    NetworkPolicy network_policy = 1 [(gogoproto.customname) = "NetworkPolicy"];
}

message UpdateNetworkPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    NetworkPolicy network_policy = 1 [(gogoproto.customname) = "NetworkPolicy"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateNetworkPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    NetworkPolicy network_policy = 1 [(gogoproto.customname) = "NetworkPolicy"];
}

message DeleteNetworkPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteNetworkPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListNetworkPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListNetworkPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated NetworkPolicy network_policys = 1 [(gogoproto.customname) = "NetworkPolicys"];
}

message GetNetworkPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetNetworkPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    NetworkPolicy network_policy = 1 [(gogoproto.customname) = "NetworkPolicy"];
}



message PeeringPolicy {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string peering_service = 9 [(gogoproto.customname) = "PeeringService" ,(gogoproto.casttype) = "PeeringServiceType"]; 


}



message CreatePeeringPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PeeringPolicy peering_policy = 1 [(gogoproto.customname) = "PeeringPolicy"];
}

message CreatePeeringPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PeeringPolicy peering_policy = 1 [(gogoproto.customname) = "PeeringPolicy"];
}

message UpdatePeeringPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PeeringPolicy peering_policy = 1 [(gogoproto.customname) = "PeeringPolicy"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdatePeeringPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PeeringPolicy peering_policy = 1 [(gogoproto.customname) = "PeeringPolicy"];
}

message DeletePeeringPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeletePeeringPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListPeeringPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListPeeringPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated PeeringPolicy peering_policys = 1 [(gogoproto.customname) = "PeeringPolicys"];
}

message GetPeeringPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetPeeringPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PeeringPolicy peering_policy = 1 [(gogoproto.customname) = "PeeringPolicy"];
}



message PhysicalInterface {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string ethernet_segment_identifier = 9 [(gogoproto.customname) = "EthernetSegmentIdentifier" ]; 

    repeated PhysicalInterfacePhysicalInterfaceRef physical_interface_refs = 1010 [(gogoproto.customname) = "PhysicalInterfaceRefs"];

    
    repeated LogicalInterface logical_interfaces = 3011 [(gogoproto.customname) = "LogicalInterfaces"];
}


message PhysicalInterfacePhysicalInterfaceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreatePhysicalInterfaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PhysicalInterface physical_interface = 1 [(gogoproto.customname) = "PhysicalInterface"];
}

message CreatePhysicalInterfaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PhysicalInterface physical_interface = 1 [(gogoproto.customname) = "PhysicalInterface"];
}

message UpdatePhysicalInterfaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PhysicalInterface physical_interface = 1 [(gogoproto.customname) = "PhysicalInterface"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdatePhysicalInterfaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PhysicalInterface physical_interface = 1 [(gogoproto.customname) = "PhysicalInterface"];
}

message DeletePhysicalInterfaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeletePhysicalInterfaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListPhysicalInterfaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListPhysicalInterfaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated PhysicalInterface physical_interfaces = 1 [(gogoproto.customname) = "PhysicalInterfaces"];
}

message GetPhysicalInterfaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetPhysicalInterfaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PhysicalInterface physical_interface = 1 [(gogoproto.customname) = "PhysicalInterface"];
}



message PhysicalRouter {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string physical_router_management_ip = 9 [(gogoproto.customname) = "PhysicalRouterManagementIP" ];
    SNMPCredentials physical_router_snmp_credentials = 10 [(gogoproto.customname) = "PhysicalRouterSNMPCredentials" ];
    string physical_router_role = 11 [(gogoproto.customname) = "PhysicalRouterRole" ,(gogoproto.casttype) = "PhysicalRouterRole"];
    UserCredentials physical_router_user_credentials = 12 [(gogoproto.customname) = "PhysicalRouterUserCredentials" ];
    string physical_router_vendor_name = 13 [(gogoproto.customname) = "PhysicalRouterVendorName" ];
    bool physical_router_vnc_managed = 14 [(gogoproto.customname) = "PhysicalRouterVNCManaged" ];
    string physical_router_product_name = 15 [(gogoproto.customname) = "PhysicalRouterProductName" ];
    bool physical_router_lldp = 16 [(gogoproto.customname) = "PhysicalRouterLLDP" ];
    string physical_router_loopback_ip = 17 [(gogoproto.customname) = "PhysicalRouterLoopbackIP" ];
    string physical_router_image_uri = 18 [(gogoproto.customname) = "PhysicalRouterImageURI" ];
    TelemetryStateInfo telemetry_info = 19 [(gogoproto.customname) = "TelemetryInfo" ];
    bool physical_router_snmp = 20 [(gogoproto.customname) = "PhysicalRouterSNMP" ];
    string physical_router_dataplane_ip = 21 [(gogoproto.customname) = "PhysicalRouterDataplaneIP" ];
    JunosServicePorts physical_router_junos_service_ports = 22 [(gogoproto.customname) = "PhysicalRouterJunosServicePorts" ]; 

    repeated PhysicalRouterVirtualRouterRef virtual_router_refs = 1025 [(gogoproto.customname) = "VirtualRouterRefs"];
    repeated PhysicalRouterVirtualNetworkRef virtual_network_refs = 1023 [(gogoproto.customname) = "VirtualNetworkRefs"];
    repeated PhysicalRouterBGPRouterRef bgp_router_refs = 1024 [(gogoproto.customname) = "BGPRouterRefs"];

    
    repeated LogicalInterface logical_interfaces = 3026 [(gogoproto.customname) = "LogicalInterfaces"];
    
    repeated PhysicalInterface physical_interfaces = 3027 [(gogoproto.customname) = "PhysicalInterfaces"];
}


message PhysicalRouterBGPRouterRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message PhysicalRouterVirtualRouterRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message PhysicalRouterVirtualNetworkRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreatePhysicalRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PhysicalRouter physical_router = 1 [(gogoproto.customname) = "PhysicalRouter"];
}

message CreatePhysicalRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PhysicalRouter physical_router = 1 [(gogoproto.customname) = "PhysicalRouter"];
}

message UpdatePhysicalRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PhysicalRouter physical_router = 1 [(gogoproto.customname) = "PhysicalRouter"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdatePhysicalRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PhysicalRouter physical_router = 1 [(gogoproto.customname) = "PhysicalRouter"];
}

message DeletePhysicalRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeletePhysicalRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListPhysicalRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListPhysicalRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated PhysicalRouter physical_routers = 1 [(gogoproto.customname) = "PhysicalRouters"];
}

message GetPhysicalRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetPhysicalRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PhysicalRouter physical_router = 1 [(gogoproto.customname) = "PhysicalRouter"];
}



message PolicyManagement {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ]; 


    
    repeated AddressGroup address_groups = 3009 [(gogoproto.customname) = "AddressGroups"];
    
    repeated ApplicationPolicySet application_policy_sets = 3010 [(gogoproto.customname) = "ApplicationPolicySets"];
    
    repeated FirewallPolicy firewall_policys = 3011 [(gogoproto.customname) = "FirewallPolicys"];
    
    repeated FirewallRule firewall_rules = 3012 [(gogoproto.customname) = "FirewallRules"];
    
    repeated ServiceGroup service_groups = 3013 [(gogoproto.customname) = "ServiceGroups"];
}



message CreatePolicyManagementRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PolicyManagement policy_management = 1 [(gogoproto.customname) = "PolicyManagement"];
}

message CreatePolicyManagementResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PolicyManagement policy_management = 1 [(gogoproto.customname) = "PolicyManagement"];
}

message UpdatePolicyManagementRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PolicyManagement policy_management = 1 [(gogoproto.customname) = "PolicyManagement"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdatePolicyManagementResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PolicyManagement policy_management = 1 [(gogoproto.customname) = "PolicyManagement"];
}

message DeletePolicyManagementRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeletePolicyManagementResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListPolicyManagementRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListPolicyManagementResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated PolicyManagement policy_managements = 1 [(gogoproto.customname) = "PolicyManagements"];
}

message GetPolicyManagementRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetPolicyManagementResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PolicyManagement policy_management = 1 [(gogoproto.customname) = "PolicyManagement"];
}



message PortTuple {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ]; 


}



message CreatePortTupleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PortTuple port_tuple = 1 [(gogoproto.customname) = "PortTuple"];
}

message CreatePortTupleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PortTuple port_tuple = 1 [(gogoproto.customname) = "PortTuple"];
}

message UpdatePortTupleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PortTuple port_tuple = 1 [(gogoproto.customname) = "PortTuple"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdatePortTupleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PortTuple port_tuple = 1 [(gogoproto.customname) = "PortTuple"];
}

message DeletePortTupleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeletePortTupleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListPortTupleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListPortTupleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated PortTuple port_tuples = 1 [(gogoproto.customname) = "PortTuples"];
}

message GetPortTupleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetPortTupleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    PortTuple port_tuple = 1 [(gogoproto.customname) = "PortTuple"];
}



message Project {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    bool vxlan_routing = 9 [(gogoproto.customname) = "VxlanRouting" ];
    bool alarm_enable = 10 [(gogoproto.customname) = "AlarmEnable" ];
    QuotaType quota = 11 [(gogoproto.customname) = "Quota" ]; 

    repeated ProjectAliasIPPoolRef alias_ip_pool_refs = 1012 [(gogoproto.customname) = "AliasIPPoolRefs"];
    repeated ProjectNamespaceRef namespace_refs = 1013 [(gogoproto.customname) = "NamespaceRefs"];
    repeated ProjectApplicationPolicySetRef application_policy_set_refs = 1014 [(gogoproto.customname) = "ApplicationPolicySetRefs"];
    repeated ProjectFloatingIPPoolRef floating_ip_pool_refs = 1015 [(gogoproto.customname) = "FloatingIPPoolRefs"];

    
    repeated AddressGroup address_groups = 3016 [(gogoproto.customname) = "AddressGroups"];
    
    repeated Alarm alarms = 3017 [(gogoproto.customname) = "Alarms"];
    
    repeated APIAccessList api_access_lists = 3018 [(gogoproto.customname) = "APIAccessLists"];
    
    repeated ApplicationPolicySet application_policy_sets = 3019 [(gogoproto.customname) = "ApplicationPolicySets"];
    
    repeated BGPAsAService bgp_as_a_services = 3020 [(gogoproto.customname) = "BGPAsAServices"];
    
    repeated BGPVPN bgpvpns = 3021 [(gogoproto.customname) = "BGPVPNs"];
    
    repeated FirewallPolicy firewall_policys = 3022 [(gogoproto.customname) = "FirewallPolicys"];
    
    repeated FirewallRule firewall_rules = 3023 [(gogoproto.customname) = "FirewallRules"];
    
    repeated InterfaceRouteTable interface_route_tables = 3024 [(gogoproto.customname) = "InterfaceRouteTables"];
    
    repeated LoadbalancerHealthmonitor loadbalancer_healthmonitors = 3025 [(gogoproto.customname) = "LoadbalancerHealthmonitors"];
    
    repeated LoadbalancerListener loadbalancer_listeners = 3026 [(gogoproto.customname) = "LoadbalancerListeners"];
    
    repeated LoadbalancerPool loadbalancer_pools = 3027 [(gogoproto.customname) = "LoadbalancerPools"];
    
    repeated Loadbalancer loadbalancers = 3028 [(gogoproto.customname) = "Loadbalancers"];
    
    repeated LogicalRouter logical_routers = 3029 [(gogoproto.customname) = "LogicalRouters"];
    
    repeated NetworkIpam network_ipams = 3030 [(gogoproto.customname) = "NetworkIpams"];
    
    repeated NetworkPolicy network_policys = 3031 [(gogoproto.customname) = "NetworkPolicys"];
    
    repeated QosConfig qos_configs = 3032 [(gogoproto.customname) = "QosConfigs"];
    
    repeated RouteAggregate route_aggregates = 3033 [(gogoproto.customname) = "RouteAggregates"];
    
    repeated RouteTable route_tables = 3034 [(gogoproto.customname) = "RouteTables"];
    
    repeated RoutingPolicy routing_policys = 3035 [(gogoproto.customname) = "RoutingPolicys"];
    
    repeated SecurityGroup security_groups = 3036 [(gogoproto.customname) = "SecurityGroups"];
    
    repeated SecurityLoggingObject security_logging_objects = 3037 [(gogoproto.customname) = "SecurityLoggingObjects"];
    
    repeated ServiceGroup service_groups = 3038 [(gogoproto.customname) = "ServiceGroups"];
    
    repeated ServiceHealthCheck service_health_checks = 3039 [(gogoproto.customname) = "ServiceHealthChecks"];
    
    repeated ServiceInstance service_instances = 3040 [(gogoproto.customname) = "ServiceInstances"];
    
    repeated Tag tags = 3041 [(gogoproto.customname) = "Tags"];
    
    repeated User users = 3042 [(gogoproto.customname) = "Users"];
    
    repeated VirtualIP virtual_ips = 3043 [(gogoproto.customname) = "VirtualIPs"];
    
    repeated VirtualMachineInterface virtual_machine_interfaces = 3044 [(gogoproto.customname) = "VirtualMachineInterfaces"];
    
    repeated VirtualNetwork virtual_networks = 3045 [(gogoproto.customname) = "VirtualNetworks"];
}


message ProjectAliasIPPoolRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message ProjectNamespaceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    SubnetType attr = 3 [(gogoproto.customname) = "Attr"];
    
}

message ProjectApplicationPolicySetRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message ProjectFloatingIPPoolRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateProjectRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Project project = 1 [(gogoproto.customname) = "Project"];
}

message CreateProjectResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Project project = 1 [(gogoproto.customname) = "Project"];
}

message UpdateProjectRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Project project = 1 [(gogoproto.customname) = "Project"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateProjectResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Project project = 1 [(gogoproto.customname) = "Project"];
}

message DeleteProjectRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteProjectResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListProjectRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListProjectResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated Project projects = 1 [(gogoproto.customname) = "Projects"];
}

message GetProjectRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetProjectResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Project project = 1 [(gogoproto.customname) = "Project"];
}



message ProviderAttachment {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ]; 

    repeated ProviderAttachmentVirtualRouterRef virtual_router_refs = 1009 [(gogoproto.customname) = "VirtualRouterRefs"];

}


message ProviderAttachmentVirtualRouterRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateProviderAttachmentRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ProviderAttachment provider_attachment = 1 [(gogoproto.customname) = "ProviderAttachment"];
}

message CreateProviderAttachmentResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ProviderAttachment provider_attachment = 1 [(gogoproto.customname) = "ProviderAttachment"];
}

message UpdateProviderAttachmentRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ProviderAttachment provider_attachment = 1 [(gogoproto.customname) = "ProviderAttachment"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateProviderAttachmentResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ProviderAttachment provider_attachment = 1 [(gogoproto.customname) = "ProviderAttachment"];
}

message DeleteProviderAttachmentRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteProviderAttachmentResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListProviderAttachmentRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListProviderAttachmentResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ProviderAttachment provider_attachments = 1 [(gogoproto.customname) = "ProviderAttachments"];
}

message GetProviderAttachmentRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetProviderAttachmentResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ProviderAttachment provider_attachment = 1 [(gogoproto.customname) = "ProviderAttachment"];
}



message QosConfig {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string qos_config_type = 9 [(gogoproto.customname) = "QosConfigType" ,(gogoproto.casttype) = "QosConfigType"];
    QosIdForwardingClassPairs mpls_exp_entries = 10 [(gogoproto.customname) = "MPLSExpEntries" ];
    QosIdForwardingClassPairs vlan_priority_entries = 11 [(gogoproto.customname) = "VlanPriorityEntries" ];
    int64 default_forwarding_class_id = 12 [(gogoproto.customname) = "DefaultForwardingClassID" ,(gogoproto.casttype) = "ForwardingClassId"];
    QosIdForwardingClassPairs dscp_entries = 13 [(gogoproto.customname) = "DSCPEntries" ]; 

    repeated QosConfigGlobalSystemConfigRef global_system_config_refs = 1014 [(gogoproto.customname) = "GlobalSystemConfigRefs"];

}


message QosConfigGlobalSystemConfigRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateQosConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    QosConfig qos_config = 1 [(gogoproto.customname) = "QosConfig"];
}

message CreateQosConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    QosConfig qos_config = 1 [(gogoproto.customname) = "QosConfig"];
}

message UpdateQosConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    QosConfig qos_config = 1 [(gogoproto.customname) = "QosConfig"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateQosConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    QosConfig qos_config = 1 [(gogoproto.customname) = "QosConfig"];
}

message DeleteQosConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteQosConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListQosConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListQosConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated QosConfig qos_configs = 1 [(gogoproto.customname) = "QosConfigs"];
}

message GetQosConfigRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetQosConfigResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    QosConfig qos_config = 1 [(gogoproto.customname) = "QosConfig"];
}



message QosQueue {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    int64 qos_queue_identifier = 9 [(gogoproto.customname) = "QosQueueIdentifier" ,(gogoproto.casttype) = "int"];
    int64 max_bandwidth = 10 [(gogoproto.customname) = "MaxBandwidth" ,(gogoproto.casttype) = "int"];
    int64 min_bandwidth = 11 [(gogoproto.customname) = "MinBandwidth" ,(gogoproto.casttype) = "int"]; 


}



message CreateQosQueueRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    QosQueue qos_queue = 1 [(gogoproto.customname) = "QosQueue"];
}

message CreateQosQueueResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    QosQueue qos_queue = 1 [(gogoproto.customname) = "QosQueue"];
}

message UpdateQosQueueRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    QosQueue qos_queue = 1 [(gogoproto.customname) = "QosQueue"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateQosQueueResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    QosQueue qos_queue = 1 [(gogoproto.customname) = "QosQueue"];
}

message DeleteQosQueueRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteQosQueueResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListQosQueueRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListQosQueueResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated QosQueue qos_queues = 1 [(gogoproto.customname) = "QosQueues"];
}

message GetQosQueueRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetQosQueueResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    QosQueue qos_queue = 1 [(gogoproto.customname) = "QosQueue"];
}



message RouteAggregate {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ]; 

    repeated RouteAggregateServiceInstanceRef service_instance_refs = 1009 [(gogoproto.customname) = "ServiceInstanceRefs"];

}


message RouteAggregateServiceInstanceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    ServiceInterfaceTag attr = 3 [(gogoproto.customname) = "Attr"];
    
}


message CreateRouteAggregateRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RouteAggregate route_aggregate = 1 [(gogoproto.customname) = "RouteAggregate"];
}

message CreateRouteAggregateResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RouteAggregate route_aggregate = 1 [(gogoproto.customname) = "RouteAggregate"];
}

message UpdateRouteAggregateRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RouteAggregate route_aggregate = 1 [(gogoproto.customname) = "RouteAggregate"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateRouteAggregateResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RouteAggregate route_aggregate = 1 [(gogoproto.customname) = "RouteAggregate"];
}

message DeleteRouteAggregateRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteRouteAggregateResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListRouteAggregateRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListRouteAggregateResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated RouteAggregate route_aggregates = 1 [(gogoproto.customname) = "RouteAggregates"];
}

message GetRouteAggregateRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetRouteAggregateResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RouteAggregate route_aggregate = 1 [(gogoproto.customname) = "RouteAggregate"];
}



message RouteTable {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    RouteTableType routes = 9 [(gogoproto.customname) = "Routes" ]; 


}



message CreateRouteTableRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RouteTable route_table = 1 [(gogoproto.customname) = "RouteTable"];
}

message CreateRouteTableResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RouteTable route_table = 1 [(gogoproto.customname) = "RouteTable"];
}

message UpdateRouteTableRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RouteTable route_table = 1 [(gogoproto.customname) = "RouteTable"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateRouteTableResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RouteTable route_table = 1 [(gogoproto.customname) = "RouteTable"];
}

message DeleteRouteTableRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteRouteTableResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListRouteTableRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListRouteTableResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated RouteTable route_tables = 1 [(gogoproto.customname) = "RouteTables"];
}

message GetRouteTableRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetRouteTableResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RouteTable route_table = 1 [(gogoproto.customname) = "RouteTable"];
}



message RouteTarget {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ]; 


}



message CreateRouteTargetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RouteTarget route_target = 1 [(gogoproto.customname) = "RouteTarget"];
}

message CreateRouteTargetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RouteTarget route_target = 1 [(gogoproto.customname) = "RouteTarget"];
}

message UpdateRouteTargetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RouteTarget route_target = 1 [(gogoproto.customname) = "RouteTarget"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateRouteTargetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RouteTarget route_target = 1 [(gogoproto.customname) = "RouteTarget"];
}

message DeleteRouteTargetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteRouteTargetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListRouteTargetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListRouteTargetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated RouteTarget route_targets = 1 [(gogoproto.customname) = "RouteTargets"];
}

message GetRouteTargetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetRouteTargetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RouteTarget route_target = 1 [(gogoproto.customname) = "RouteTarget"];
}



message RoutingInstance {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ]; 


}



message CreateRoutingInstanceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RoutingInstance routing_instance = 1 [(gogoproto.customname) = "RoutingInstance"];
}

message CreateRoutingInstanceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RoutingInstance routing_instance = 1 [(gogoproto.customname) = "RoutingInstance"];
}

message UpdateRoutingInstanceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RoutingInstance routing_instance = 1 [(gogoproto.customname) = "RoutingInstance"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateRoutingInstanceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RoutingInstance routing_instance = 1 [(gogoproto.customname) = "RoutingInstance"];
}

message DeleteRoutingInstanceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteRoutingInstanceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListRoutingInstanceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListRoutingInstanceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated RoutingInstance routing_instances = 1 [(gogoproto.customname) = "RoutingInstances"];
}

message GetRoutingInstanceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetRoutingInstanceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RoutingInstance routing_instance = 1 [(gogoproto.customname) = "RoutingInstance"];
}



message RoutingPolicy {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ]; 

    repeated RoutingPolicyServiceInstanceRef service_instance_refs = 1009 [(gogoproto.customname) = "ServiceInstanceRefs"];

}


message RoutingPolicyServiceInstanceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    RoutingPolicyServiceInstanceType attr = 3 [(gogoproto.customname) = "Attr"];
    
}


message CreateRoutingPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RoutingPolicy routing_policy = 1 [(gogoproto.customname) = "RoutingPolicy"];
}

message CreateRoutingPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RoutingPolicy routing_policy = 1 [(gogoproto.customname) = "RoutingPolicy"];
}

message UpdateRoutingPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RoutingPolicy routing_policy = 1 [(gogoproto.customname) = "RoutingPolicy"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateRoutingPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RoutingPolicy routing_policy = 1 [(gogoproto.customname) = "RoutingPolicy"];
}

message DeleteRoutingPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteRoutingPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListRoutingPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListRoutingPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated RoutingPolicy routing_policys = 1 [(gogoproto.customname) = "RoutingPolicys"];
}

message GetRoutingPolicyRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetRoutingPolicyResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    RoutingPolicy routing_policy = 1 [(gogoproto.customname) = "RoutingPolicy"];
}



message SecurityGroup {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    PolicyEntriesType security_group_entries = 9 [(gogoproto.customname) = "SecurityGroupEntries" ];
    int64 configured_security_group_id = 10 [(gogoproto.customname) = "ConfiguredSecurityGroupID" ,(gogoproto.casttype) = "ConfiguredSecurityGroupIdType"];
    int64 security_group_id = 11 [(gogoproto.customname) = "SecurityGroupID" ,(gogoproto.casttype) = "SecurityGroupIdType"]; 


    
    repeated AccessControlList access_control_lists = 3012 [(gogoproto.customname) = "AccessControlLists"];
}



message CreateSecurityGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    SecurityGroup security_group = 1 [(gogoproto.customname) = "SecurityGroup"];
}

message CreateSecurityGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    SecurityGroup security_group = 1 [(gogoproto.customname) = "SecurityGroup"];
}

message UpdateSecurityGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    SecurityGroup security_group = 1 [(gogoproto.customname) = "SecurityGroup"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateSecurityGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    SecurityGroup security_group = 1 [(gogoproto.customname) = "SecurityGroup"];
}

message DeleteSecurityGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteSecurityGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListSecurityGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListSecurityGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated SecurityGroup security_groups = 1 [(gogoproto.customname) = "SecurityGroups"];
}

message GetSecurityGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetSecurityGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    SecurityGroup security_group = 1 [(gogoproto.customname) = "SecurityGroup"];
}



message SecurityLoggingObject {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    SecurityLoggingObjectRuleListType security_logging_object_rules = 9 [(gogoproto.customname) = "SecurityLoggingObjectRules" ];
    int64 security_logging_object_rate = 10 [(gogoproto.customname) = "SecurityLoggingObjectRate" ,(gogoproto.casttype) = "int"]; 

    repeated SecurityLoggingObjectSecurityGroupRef security_group_refs = 1011 [(gogoproto.customname) = "SecurityGroupRefs"];
    repeated SecurityLoggingObjectNetworkPolicyRef network_policy_refs = 1012 [(gogoproto.customname) = "NetworkPolicyRefs"];

}


message SecurityLoggingObjectNetworkPolicyRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    SecurityLoggingObjectRuleListType attr = 3 [(gogoproto.customname) = "Attr"];
    
}

message SecurityLoggingObjectSecurityGroupRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    SecurityLoggingObjectRuleListType attr = 3 [(gogoproto.customname) = "Attr"];
    
}


message CreateSecurityLoggingObjectRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    SecurityLoggingObject security_logging_object = 1 [(gogoproto.customname) = "SecurityLoggingObject"];
}

message CreateSecurityLoggingObjectResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    SecurityLoggingObject security_logging_object = 1 [(gogoproto.customname) = "SecurityLoggingObject"];
}

message UpdateSecurityLoggingObjectRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    SecurityLoggingObject security_logging_object = 1 [(gogoproto.customname) = "SecurityLoggingObject"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateSecurityLoggingObjectResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    SecurityLoggingObject security_logging_object = 1 [(gogoproto.customname) = "SecurityLoggingObject"];
}

message DeleteSecurityLoggingObjectRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteSecurityLoggingObjectResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListSecurityLoggingObjectRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListSecurityLoggingObjectResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated SecurityLoggingObject security_logging_objects = 1 [(gogoproto.customname) = "SecurityLoggingObjects"];
}

message GetSecurityLoggingObjectRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetSecurityLoggingObjectResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    SecurityLoggingObject security_logging_object = 1 [(gogoproto.customname) = "SecurityLoggingObject"];
}



message ServiceAppliance {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    UserCredentials service_appliance_user_credentials = 9 [(gogoproto.customname) = "ServiceApplianceUserCredentials" ];
    string service_appliance_ip_address = 10 [(gogoproto.customname) = "ServiceApplianceIPAddress" ,(gogoproto.casttype) = "IpAddressType"];
    KeyValuePairs service_appliance_properties = 11 [(gogoproto.customname) = "ServiceApplianceProperties" ]; 

    repeated ServiceAppliancePhysicalInterfaceRef physical_interface_refs = 1012 [(gogoproto.customname) = "PhysicalInterfaceRefs"];

}


message ServiceAppliancePhysicalInterfaceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    ServiceApplianceInterfaceType attr = 3 [(gogoproto.customname) = "Attr"];
    
}


message CreateServiceApplianceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceAppliance service_appliance = 1 [(gogoproto.customname) = "ServiceAppliance"];
}

message CreateServiceApplianceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceAppliance service_appliance = 1 [(gogoproto.customname) = "ServiceAppliance"];
}

message UpdateServiceApplianceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceAppliance service_appliance = 1 [(gogoproto.customname) = "ServiceAppliance"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServiceApplianceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceAppliance service_appliance = 1 [(gogoproto.customname) = "ServiceAppliance"];
}

message DeleteServiceApplianceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServiceApplianceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServiceApplianceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServiceApplianceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ServiceAppliance service_appliances = 1 [(gogoproto.customname) = "ServiceAppliances"];
}

message GetServiceApplianceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServiceApplianceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceAppliance service_appliance = 1 [(gogoproto.customname) = "ServiceAppliance"];
}



message ServiceApplianceSet {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    KeyValuePairs service_appliance_set_properties = 9 [(gogoproto.customname) = "ServiceApplianceSetProperties" ];
    string service_appliance_ha_mode = 10 [(gogoproto.customname) = "ServiceApplianceHaMode" ];
    string service_appliance_driver = 11 [(gogoproto.customname) = "ServiceApplianceDriver" ]; 


    
    repeated ServiceAppliance service_appliances = 3012 [(gogoproto.customname) = "ServiceAppliances"];
}



message CreateServiceApplianceSetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceApplianceSet service_appliance_set = 1 [(gogoproto.customname) = "ServiceApplianceSet"];
}

message CreateServiceApplianceSetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceApplianceSet service_appliance_set = 1 [(gogoproto.customname) = "ServiceApplianceSet"];
}

message UpdateServiceApplianceSetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceApplianceSet service_appliance_set = 1 [(gogoproto.customname) = "ServiceApplianceSet"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServiceApplianceSetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceApplianceSet service_appliance_set = 1 [(gogoproto.customname) = "ServiceApplianceSet"];
}

message DeleteServiceApplianceSetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServiceApplianceSetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServiceApplianceSetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServiceApplianceSetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ServiceApplianceSet service_appliance_sets = 1 [(gogoproto.customname) = "ServiceApplianceSets"];
}

message GetServiceApplianceSetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServiceApplianceSetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceApplianceSet service_appliance_set = 1 [(gogoproto.customname) = "ServiceApplianceSet"];
}



message ServiceConnectionModule {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string service_type = 9 [(gogoproto.customname) = "ServiceType" ,(gogoproto.casttype) = "ServiceConnectionType"];
    string e2_service = 10 [(gogoproto.customname) = "E2Service" ,(gogoproto.casttype) = "E2servicetype"]; 

    repeated ServiceConnectionModuleServiceObjectRef service_object_refs = 1011 [(gogoproto.customname) = "ServiceObjectRefs"];

}


message ServiceConnectionModuleServiceObjectRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateServiceConnectionModuleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceConnectionModule service_connection_module = 1 [(gogoproto.customname) = "ServiceConnectionModule"];
}

message CreateServiceConnectionModuleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceConnectionModule service_connection_module = 1 [(gogoproto.customname) = "ServiceConnectionModule"];
}

message UpdateServiceConnectionModuleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceConnectionModule service_connection_module = 1 [(gogoproto.customname) = "ServiceConnectionModule"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServiceConnectionModuleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceConnectionModule service_connection_module = 1 [(gogoproto.customname) = "ServiceConnectionModule"];
}

message DeleteServiceConnectionModuleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServiceConnectionModuleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServiceConnectionModuleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServiceConnectionModuleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ServiceConnectionModule service_connection_modules = 1 [(gogoproto.customname) = "ServiceConnectionModules"];
}

message GetServiceConnectionModuleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServiceConnectionModuleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceConnectionModule service_connection_module = 1 [(gogoproto.customname) = "ServiceConnectionModule"];
}



message ServiceEndpoint {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ]; 

    repeated ServiceEndpointServiceConnectionModuleRef service_connection_module_refs = 1009 [(gogoproto.customname) = "ServiceConnectionModuleRefs"];
    repeated ServiceEndpointPhysicalRouterRef physical_router_refs = 1010 [(gogoproto.customname) = "PhysicalRouterRefs"];
    repeated ServiceEndpointServiceObjectRef service_object_refs = 1011 [(gogoproto.customname) = "ServiceObjectRefs"];

}


message ServiceEndpointServiceConnectionModuleRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message ServiceEndpointPhysicalRouterRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message ServiceEndpointServiceObjectRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateServiceEndpointRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceEndpoint service_endpoint = 1 [(gogoproto.customname) = "ServiceEndpoint"];
}

message CreateServiceEndpointResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceEndpoint service_endpoint = 1 [(gogoproto.customname) = "ServiceEndpoint"];
}

message UpdateServiceEndpointRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceEndpoint service_endpoint = 1 [(gogoproto.customname) = "ServiceEndpoint"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServiceEndpointResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceEndpoint service_endpoint = 1 [(gogoproto.customname) = "ServiceEndpoint"];
}

message DeleteServiceEndpointRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServiceEndpointResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServiceEndpointRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServiceEndpointResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ServiceEndpoint service_endpoints = 1 [(gogoproto.customname) = "ServiceEndpoints"];
}

message GetServiceEndpointRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServiceEndpointResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceEndpoint service_endpoint = 1 [(gogoproto.customname) = "ServiceEndpoint"];
}



message ServiceGroup {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    FirewallServiceGroupType service_group_firewall_service_list = 9 [(gogoproto.customname) = "ServiceGroupFirewallServiceList" ]; 


}



message CreateServiceGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceGroup service_group = 1 [(gogoproto.customname) = "ServiceGroup"];
}

message CreateServiceGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceGroup service_group = 1 [(gogoproto.customname) = "ServiceGroup"];
}

message UpdateServiceGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceGroup service_group = 1 [(gogoproto.customname) = "ServiceGroup"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServiceGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceGroup service_group = 1 [(gogoproto.customname) = "ServiceGroup"];
}

message DeleteServiceGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServiceGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServiceGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServiceGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ServiceGroup service_groups = 1 [(gogoproto.customname) = "ServiceGroups"];
}

message GetServiceGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServiceGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceGroup service_group = 1 [(gogoproto.customname) = "ServiceGroup"];
}



message ServiceHealthCheck {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    ServiceHealthCheckType service_health_check_properties = 9 [(gogoproto.customname) = "ServiceHealthCheckProperties" ]; 

    repeated ServiceHealthCheckServiceInstanceRef service_instance_refs = 1010 [(gogoproto.customname) = "ServiceInstanceRefs"];

}


message ServiceHealthCheckServiceInstanceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    ServiceInterfaceTag attr = 3 [(gogoproto.customname) = "Attr"];
    
}


message CreateServiceHealthCheckRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceHealthCheck service_health_check = 1 [(gogoproto.customname) = "ServiceHealthCheck"];
}

message CreateServiceHealthCheckResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceHealthCheck service_health_check = 1 [(gogoproto.customname) = "ServiceHealthCheck"];
}

message UpdateServiceHealthCheckRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceHealthCheck service_health_check = 1 [(gogoproto.customname) = "ServiceHealthCheck"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServiceHealthCheckResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceHealthCheck service_health_check = 1 [(gogoproto.customname) = "ServiceHealthCheck"];
}

message DeleteServiceHealthCheckRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServiceHealthCheckResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServiceHealthCheckRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServiceHealthCheckResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ServiceHealthCheck service_health_checks = 1 [(gogoproto.customname) = "ServiceHealthChecks"];
}

message GetServiceHealthCheckRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServiceHealthCheckResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceHealthCheck service_health_check = 1 [(gogoproto.customname) = "ServiceHealthCheck"];
}



message ServiceInstance {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    KeyValuePairs service_instance_bindings = 9 [(gogoproto.customname) = "ServiceInstanceBindings" ];
    ServiceInstanceType service_instance_properties = 10 [(gogoproto.customname) = "ServiceInstanceProperties" ]; 

    repeated ServiceInstanceServiceTemplateRef service_template_refs = 1011 [(gogoproto.customname) = "ServiceTemplateRefs"];
    repeated ServiceInstanceInstanceIPRef instance_ip_refs = 1012 [(gogoproto.customname) = "InstanceIPRefs"];

    
    repeated PortTuple port_tuples = 3013 [(gogoproto.customname) = "PortTuples"];
}


message ServiceInstanceServiceTemplateRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message ServiceInstanceInstanceIPRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    ServiceInterfaceTag attr = 3 [(gogoproto.customname) = "Attr"];
    
}


message CreateServiceInstanceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceInstance service_instance = 1 [(gogoproto.customname) = "ServiceInstance"];
}

message CreateServiceInstanceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceInstance service_instance = 1 [(gogoproto.customname) = "ServiceInstance"];
}

message UpdateServiceInstanceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceInstance service_instance = 1 [(gogoproto.customname) = "ServiceInstance"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServiceInstanceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceInstance service_instance = 1 [(gogoproto.customname) = "ServiceInstance"];
}

message DeleteServiceInstanceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServiceInstanceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServiceInstanceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServiceInstanceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ServiceInstance service_instances = 1 [(gogoproto.customname) = "ServiceInstances"];
}

message GetServiceInstanceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServiceInstanceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceInstance service_instance = 1 [(gogoproto.customname) = "ServiceInstance"];
}



message ServiceObject {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ]; 


}



message CreateServiceObjectRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceObject service_object = 1 [(gogoproto.customname) = "ServiceObject"];
}

message CreateServiceObjectResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceObject service_object = 1 [(gogoproto.customname) = "ServiceObject"];
}

message UpdateServiceObjectRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceObject service_object = 1 [(gogoproto.customname) = "ServiceObject"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServiceObjectResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceObject service_object = 1 [(gogoproto.customname) = "ServiceObject"];
}

message DeleteServiceObjectRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServiceObjectResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServiceObjectRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServiceObjectResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ServiceObject service_objects = 1 [(gogoproto.customname) = "ServiceObjects"];
}

message GetServiceObjectRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServiceObjectResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceObject service_object = 1 [(gogoproto.customname) = "ServiceObject"];
}



message ServiceTemplate {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    ServiceTemplateType service_template_properties = 9 [(gogoproto.customname) = "ServiceTemplateProperties" ]; 

    repeated ServiceTemplateServiceApplianceSetRef service_appliance_set_refs = 1010 [(gogoproto.customname) = "ServiceApplianceSetRefs"];

}


message ServiceTemplateServiceApplianceSetRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateServiceTemplateRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceTemplate service_template = 1 [(gogoproto.customname) = "ServiceTemplate"];
}

message CreateServiceTemplateResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceTemplate service_template = 1 [(gogoproto.customname) = "ServiceTemplate"];
}

message UpdateServiceTemplateRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceTemplate service_template = 1 [(gogoproto.customname) = "ServiceTemplate"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServiceTemplateResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceTemplate service_template = 1 [(gogoproto.customname) = "ServiceTemplate"];
}

message DeleteServiceTemplateRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServiceTemplateResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServiceTemplateRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServiceTemplateResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ServiceTemplate service_templates = 1 [(gogoproto.customname) = "ServiceTemplates"];
}

message GetServiceTemplateRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServiceTemplateResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ServiceTemplate service_template = 1 [(gogoproto.customname) = "ServiceTemplate"];
}



message Subnet {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    SubnetType subnet_ip_prefix = 9 [(gogoproto.customname) = "SubnetIPPrefix" ]; 

    repeated SubnetVirtualMachineInterfaceRef virtual_machine_interface_refs = 1010 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];

}


message SubnetVirtualMachineInterfaceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateSubnetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Subnet subnet = 1 [(gogoproto.customname) = "Subnet"];
}

message CreateSubnetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Subnet subnet = 1 [(gogoproto.customname) = "Subnet"];
}

message UpdateSubnetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Subnet subnet = 1 [(gogoproto.customname) = "Subnet"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateSubnetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Subnet subnet = 1 [(gogoproto.customname) = "Subnet"];
}

message DeleteSubnetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteSubnetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListSubnetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListSubnetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated Subnet subnets = 1 [(gogoproto.customname) = "Subnets"];
}

message GetSubnetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetSubnetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Subnet subnet = 1 [(gogoproto.customname) = "Subnet"];
}



message Tag {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string tag_type_name = 9 [(gogoproto.customname) = "TagTypeName" ];
    string tag_id = 10 [(gogoproto.customname) = "TagID" ,(gogoproto.casttype) = "U32BitHexInt"];
    string tag_value = 11 [(gogoproto.customname) = "TagValue" ]; 

    repeated TagTagTypeRef tag_type_refs = 1012 [(gogoproto.customname) = "TagTypeRefs"];

}


message TagTagTypeRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateTagRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Tag tag = 1 [(gogoproto.customname) = "Tag"];
}

message CreateTagResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Tag tag = 1 [(gogoproto.customname) = "Tag"];
}

message UpdateTagRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Tag tag = 1 [(gogoproto.customname) = "Tag"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateTagResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Tag tag = 1 [(gogoproto.customname) = "Tag"];
}

message DeleteTagRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteTagResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListTagRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListTagResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated Tag tags = 1 [(gogoproto.customname) = "Tags"];
}

message GetTagRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetTagResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Tag tag = 1 [(gogoproto.customname) = "Tag"];
}



message TagType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string tag_type_id = 9 [(gogoproto.customname) = "TagTypeID" ,(gogoproto.casttype) = "U16BitHexInt"]; 


}



message CreateTagTypeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    TagType tag_type = 1 [(gogoproto.customname) = "TagType"];
}

message CreateTagTypeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    TagType tag_type = 1 [(gogoproto.customname) = "TagType"];
}

message UpdateTagTypeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    TagType tag_type = 1 [(gogoproto.customname) = "TagType"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateTagTypeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    TagType tag_type = 1 [(gogoproto.customname) = "TagType"];
}

message DeleteTagTypeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteTagTypeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListTagTypeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListTagTypeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated TagType tag_types = 1 [(gogoproto.customname) = "TagTypes"];
}

message GetTagTypeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetTagTypeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    TagType tag_type = 1 [(gogoproto.customname) = "TagType"];
}



message User {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string password = 9 [(gogoproto.customname) = "Password" ]; 


}



message CreateUserRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    User user = 1 [(gogoproto.customname) = "User"];
}

message CreateUserResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    User user = 1 [(gogoproto.customname) = "User"];
}

message UpdateUserRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    User user = 1 [(gogoproto.customname) = "User"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateUserResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    User user = 1 [(gogoproto.customname) = "User"];
}

message DeleteUserRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteUserResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListUserRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListUserResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated User users = 1 [(gogoproto.customname) = "Users"];
}

message GetUserRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetUserResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    User user = 1 [(gogoproto.customname) = "User"];
}



message VirtualDNSRecord {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    VirtualDnsRecordType virtual_DNS_record_data = 9 [(gogoproto.customname) = "VirtualDNSRecordData" ]; 


}



message CreateVirtualDNSRecordRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualDNSRecord virtual_DNS_record = 1 [(gogoproto.customname) = "VirtualDNSRecord"];
}

message CreateVirtualDNSRecordResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualDNSRecord virtual_DNS_record = 1 [(gogoproto.customname) = "VirtualDNSRecord"];
}

message UpdateVirtualDNSRecordRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualDNSRecord virtual_DNS_record = 1 [(gogoproto.customname) = "VirtualDNSRecord"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateVirtualDNSRecordResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualDNSRecord virtual_DNS_record = 1 [(gogoproto.customname) = "VirtualDNSRecord"];
}

message DeleteVirtualDNSRecordRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteVirtualDNSRecordResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListVirtualDNSRecordRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListVirtualDNSRecordResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated VirtualDNSRecord virtual_DNS_records = 1 [(gogoproto.customname) = "VirtualDNSRecords"];
}

message GetVirtualDNSRecordRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetVirtualDNSRecordResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualDNSRecord virtual_DNS_record = 1 [(gogoproto.customname) = "VirtualDNSRecord"];
}



message VirtualDNS {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    VirtualDnsType virtual_DNS_data = 9 [(gogoproto.customname) = "VirtualDNSData" ]; 


    
    repeated VirtualDNSRecord virtual_DNS_records = 3010 [(gogoproto.customname) = "VirtualDNSRecords"];
}



message CreateVirtualDNSRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualDNS virtual_DNS = 1 [(gogoproto.customname) = "VirtualDNS"];
}

message CreateVirtualDNSResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualDNS virtual_DNS = 1 [(gogoproto.customname) = "VirtualDNS"];
}

message UpdateVirtualDNSRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualDNS virtual_DNS = 1 [(gogoproto.customname) = "VirtualDNS"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateVirtualDNSResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualDNS virtual_DNS = 1 [(gogoproto.customname) = "VirtualDNS"];
}

message DeleteVirtualDNSRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteVirtualDNSResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListVirtualDNSRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListVirtualDNSResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated VirtualDNS virtual_DNSs = 1 [(gogoproto.customname) = "VirtualDNSs"];
}

message GetVirtualDNSRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetVirtualDNSResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualDNS virtual_DNS = 1 [(gogoproto.customname) = "VirtualDNS"];
}



message VirtualIP {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    VirtualIpType virtual_ip_properties = 9 [(gogoproto.customname) = "VirtualIPProperties" ]; 

    repeated VirtualIPLoadbalancerPoolRef loadbalancer_pool_refs = 1010 [(gogoproto.customname) = "LoadbalancerPoolRefs"];
    repeated VirtualIPVirtualMachineInterfaceRef virtual_machine_interface_refs = 1011 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];

}


message VirtualIPLoadbalancerPoolRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualIPVirtualMachineInterfaceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateVirtualIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualIP virtual_ip = 1 [(gogoproto.customname) = "VirtualIP"];
}

message CreateVirtualIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualIP virtual_ip = 1 [(gogoproto.customname) = "VirtualIP"];
}

message UpdateVirtualIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualIP virtual_ip = 1 [(gogoproto.customname) = "VirtualIP"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateVirtualIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualIP virtual_ip = 1 [(gogoproto.customname) = "VirtualIP"];
}

message DeleteVirtualIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteVirtualIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListVirtualIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListVirtualIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated VirtualIP virtual_ips = 1 [(gogoproto.customname) = "VirtualIPs"];
}

message GetVirtualIPRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetVirtualIPResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualIP virtual_ip = 1 [(gogoproto.customname) = "VirtualIP"];
}



message VirtualMachineInterface {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    EcmpHashingIncludeFields ecmp_hashing_include_fields = 9 [(gogoproto.customname) = "EcmpHashingIncludeFields" ];
    RouteTableType virtual_machine_interface_host_routes = 10 [(gogoproto.customname) = "VirtualMachineInterfaceHostRoutes" ];
    MacAddressesType virtual_machine_interface_mac_addresses = 11 [(gogoproto.customname) = "VirtualMachineInterfaceMacAddresses" ];
    DhcpOptionsListType virtual_machine_interface_dhcp_option_list = 12 [(gogoproto.customname) = "VirtualMachineInterfaceDHCPOptionList" ];
    KeyValuePairs virtual_machine_interface_bindings = 13 [(gogoproto.customname) = "VirtualMachineInterfaceBindings" ];
    bool virtual_machine_interface_disable_policy = 14 [(gogoproto.customname) = "VirtualMachineInterfaceDisablePolicy" ];
    AllowedAddressPairs virtual_machine_interface_allowed_address_pairs = 15 [(gogoproto.customname) = "VirtualMachineInterfaceAllowedAddressPairs" ];
    FatFlowProtocols virtual_machine_interface_fat_flow_protocols = 16 [(gogoproto.customname) = "VirtualMachineInterfaceFatFlowProtocols" ];
    bool vlan_tag_based_bridge_domain = 17 [(gogoproto.customname) = "VlanTagBasedBridgeDomain" ];
    string virtual_machine_interface_device_owner = 18 [(gogoproto.customname) = "VirtualMachineInterfaceDeviceOwner" ];
    VrfAssignTableType vrf_assign_table = 19 [(gogoproto.customname) = "VRFAssignTable" ];
    bool port_security_enabled = 20 [(gogoproto.customname) = "PortSecurityEnabled" ];
    VirtualMachineInterfacePropertiesType virtual_machine_interface_properties = 21 [(gogoproto.customname) = "VirtualMachineInterfaceProperties" ]; 

    repeated VirtualMachineInterfaceQosConfigRef qos_config_refs = 1028 [(gogoproto.customname) = "QosConfigRefs"];
    repeated VirtualMachineInterfaceVirtualMachineInterfaceRef virtual_machine_interface_refs = 1022 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];
    repeated VirtualMachineInterfaceBGPRouterRef bgp_router_refs = 1024 [(gogoproto.customname) = "BGPRouterRefs"];
    repeated VirtualMachineInterfaceRoutingInstanceRef routing_instance_refs = 1027 [(gogoproto.customname) = "RoutingInstanceRefs"];
    repeated VirtualMachineInterfaceServiceHealthCheckRef service_health_check_refs = 1031 [(gogoproto.customname) = "ServiceHealthCheckRefs"];
    repeated VirtualMachineInterfaceSecurityGroupRef security_group_refs = 1032 [(gogoproto.customname) = "SecurityGroupRefs"];
    repeated VirtualMachineInterfaceServiceEndpointRef service_endpoint_refs = 1035 [(gogoproto.customname) = "ServiceEndpointRefs"];
    repeated VirtualMachineInterfaceSecurityLoggingObjectRef security_logging_object_refs = 1025 [(gogoproto.customname) = "SecurityLoggingObjectRefs"];
    repeated VirtualMachineInterfaceInterfaceRouteTableRef interface_route_table_refs = 1026 [(gogoproto.customname) = "InterfaceRouteTableRefs"];
    repeated VirtualMachineInterfacePhysicalInterfaceRef physical_interface_refs = 1030 [(gogoproto.customname) = "PhysicalInterfaceRefs"];
    repeated VirtualMachineInterfaceBridgeDomainRef bridge_domain_refs = 1034 [(gogoproto.customname) = "BridgeDomainRefs"];
    repeated VirtualMachineInterfaceVirtualMachineRef virtual_machine_refs = 1023 [(gogoproto.customname) = "VirtualMachineRefs"];
    repeated VirtualMachineInterfacePortTupleRef port_tuple_refs = 1029 [(gogoproto.customname) = "PortTupleRefs"];
    repeated VirtualMachineInterfaceVirtualNetworkRef virtual_network_refs = 1033 [(gogoproto.customname) = "VirtualNetworkRefs"];

}


message VirtualMachineInterfaceVirtualMachineRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfacePortTupleRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceVirtualNetworkRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceBridgeDomainRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    BridgeDomainMembershipType attr = 3 [(gogoproto.customname) = "Attr"];
    
}

message VirtualMachineInterfaceVirtualMachineInterfaceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceBGPRouterRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceRoutingInstanceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    PolicyBasedForwardingRuleType attr = 3 [(gogoproto.customname) = "Attr"];
    
}

message VirtualMachineInterfaceQosConfigRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceSecurityGroupRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceServiceEndpointRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceSecurityLoggingObjectRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceInterfaceRouteTableRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfacePhysicalInterfaceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceServiceHealthCheckRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateVirtualMachineInterfaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualMachineInterface virtual_machine_interface = 1 [(gogoproto.customname) = "VirtualMachineInterface"];
}

message CreateVirtualMachineInterfaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualMachineInterface virtual_machine_interface = 1 [(gogoproto.customname) = "VirtualMachineInterface"];
}

message UpdateVirtualMachineInterfaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualMachineInterface virtual_machine_interface = 1 [(gogoproto.customname) = "VirtualMachineInterface"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateVirtualMachineInterfaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualMachineInterface virtual_machine_interface = 1 [(gogoproto.customname) = "VirtualMachineInterface"];
}

message DeleteVirtualMachineInterfaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteVirtualMachineInterfaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListVirtualMachineInterfaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListVirtualMachineInterfaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated VirtualMachineInterface virtual_machine_interfaces = 1 [(gogoproto.customname) = "VirtualMachineInterfaces"];
}

message GetVirtualMachineInterfaceRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetVirtualMachineInterfaceResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualMachineInterface virtual_machine_interface = 1 [(gogoproto.customname) = "VirtualMachineInterface"];
}



message VirtualMachine {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ]; 

    repeated VirtualMachineServiceInstanceRef service_instance_refs = 1009 [(gogoproto.customname) = "ServiceInstanceRefs"];

    
    repeated VirtualMachineInterface virtual_machine_interfaces = 3010 [(gogoproto.customname) = "VirtualMachineInterfaces"];
}


message VirtualMachineServiceInstanceRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateVirtualMachineRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualMachine virtual_machine = 1 [(gogoproto.customname) = "VirtualMachine"];
}

message CreateVirtualMachineResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualMachine virtual_machine = 1 [(gogoproto.customname) = "VirtualMachine"];
}

message UpdateVirtualMachineRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualMachine virtual_machine = 1 [(gogoproto.customname) = "VirtualMachine"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateVirtualMachineResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualMachine virtual_machine = 1 [(gogoproto.customname) = "VirtualMachine"];
}

message DeleteVirtualMachineRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteVirtualMachineResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListVirtualMachineRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListVirtualMachineResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated VirtualMachine virtual_machines = 1 [(gogoproto.customname) = "VirtualMachines"];
}

message GetVirtualMachineRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetVirtualMachineResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualMachine virtual_machine = 1 [(gogoproto.customname) = "VirtualMachine"];
}



message VirtualNetwork {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    VirtualNetworkType virtual_network_properties = 9 [(gogoproto.customname) = "VirtualNetworkProperties" ];
    EcmpHashingIncludeFields ecmp_hashing_include_fields = 10 [(gogoproto.customname) = "EcmpHashingIncludeFields" ];
    int64 virtual_network_network_id = 11 [(gogoproto.customname) = "VirtualNetworkNetworkID" ,(gogoproto.casttype) = "VirtualNetworkIdType"];
    string address_allocation_mode = 12 [(gogoproto.customname) = "AddressAllocationMode" ,(gogoproto.casttype) = "AddressAllocationModeType"];
    bool pbb_evpn_enable = 13 [(gogoproto.customname) = "PBBEvpnEnable" ];
    bool router_external = 14 [(gogoproto.customname) = "RouterExternal" ];
    RouteTargetList import_route_target_list = 15 [(gogoproto.customname) = "ImportRouteTargetList" ];
    int64 mac_aging_time = 16 [(gogoproto.customname) = "MacAgingTime" ,(gogoproto.casttype) = "MACAgingTime"];
    ProviderDetails provider_properties = 17 [(gogoproto.customname) = "ProviderProperties" ];
    RouteTargetList route_target_list = 18 [(gogoproto.customname) = "RouteTargetList" ];
    bool mac_learning_enabled = 19 [(gogoproto.customname) = "MacLearningEnabled" ];
    RouteTargetList export_route_target_list = 20 [(gogoproto.customname) = "ExportRouteTargetList" ];
    bool flood_unknown_unicast = 21 [(gogoproto.customname) = "FloodUnknownUnicast" ];
    bool pbb_etree_enable = 22 [(gogoproto.customname) = "PBBEtreeEnable" ];
    bool layer2_control_word = 23 [(gogoproto.customname) = "Layer2ControlWord" ];
    bool external_ipam = 24 [(gogoproto.customname) = "ExternalIpam" ];
    bool port_security_enabled = 25 [(gogoproto.customname) = "PortSecurityEnabled" ];
    MACMoveLimitControlType mac_move_control = 26 [(gogoproto.customname) = "MacMoveControl" ];
    bool multi_policy_service_chains_enabled = 27 [(gogoproto.customname) = "MultiPolicyServiceChainsEnabled" ];
    MACLimitControlType mac_limit_control = 28 [(gogoproto.customname) = "MacLimitControl" ];
    bool is_shared = 29 [(gogoproto.customname) = "IsShared" ]; 

    repeated VirtualNetworkRouteTableRef route_table_refs = 1034 [(gogoproto.customname) = "RouteTableRefs"];
    repeated VirtualNetworkVirtualNetworkRef virtual_network_refs = 1035 [(gogoproto.customname) = "VirtualNetworkRefs"];
    repeated VirtualNetworkBGPVPNRef bgpvpn_refs = 1036 [(gogoproto.customname) = "BGPVPNRefs"];
    repeated VirtualNetworkNetworkIpamRef network_ipam_refs = 1030 [(gogoproto.customname) = "NetworkIpamRefs"];
    repeated VirtualNetworkSecurityLoggingObjectRef security_logging_object_refs = 1031 [(gogoproto.customname) = "SecurityLoggingObjectRefs"];
    repeated VirtualNetworkNetworkPolicyRef network_policy_refs = 1032 [(gogoproto.customname) = "NetworkPolicyRefs"];
    repeated VirtualNetworkQosConfigRef qos_config_refs = 1033 [(gogoproto.customname) = "QosConfigRefs"];

    
    repeated AccessControlList access_control_lists = 3037 [(gogoproto.customname) = "AccessControlLists"];
    
    repeated AliasIPPool alias_ip_pools = 3038 [(gogoproto.customname) = "AliasIPPools"];
    
    repeated BridgeDomain bridge_domains = 3039 [(gogoproto.customname) = "BridgeDomains"];
    
    repeated FloatingIPPool floating_ip_pools = 3040 [(gogoproto.customname) = "FloatingIPPools"];
    
    repeated RoutingInstance routing_instances = 3041 [(gogoproto.customname) = "RoutingInstances"];
}


message VirtualNetworkNetworkIpamRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    VnSubnetsType attr = 3 [(gogoproto.customname) = "Attr"];
    
}

message VirtualNetworkSecurityLoggingObjectRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualNetworkNetworkPolicyRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    VirtualNetworkPolicyType attr = 3 [(gogoproto.customname) = "Attr"];
    
}

message VirtualNetworkQosConfigRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualNetworkRouteTableRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualNetworkVirtualNetworkRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualNetworkBGPVPNRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateVirtualNetworkRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualNetwork virtual_network = 1 [(gogoproto.customname) = "VirtualNetwork"];
}

message CreateVirtualNetworkResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualNetwork virtual_network = 1 [(gogoproto.customname) = "VirtualNetwork"];
}

message UpdateVirtualNetworkRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualNetwork virtual_network = 1 [(gogoproto.customname) = "VirtualNetwork"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateVirtualNetworkResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualNetwork virtual_network = 1 [(gogoproto.customname) = "VirtualNetwork"];
}

message DeleteVirtualNetworkRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteVirtualNetworkResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListVirtualNetworkRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListVirtualNetworkResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated VirtualNetwork virtual_networks = 1 [(gogoproto.customname) = "VirtualNetworks"];
}

message GetVirtualNetworkRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetVirtualNetworkResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualNetwork virtual_network = 1 [(gogoproto.customname) = "VirtualNetwork"];
}



message VirtualRouter {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    bool virtual_router_dpdk_enabled = 9 [(gogoproto.customname) = "VirtualRouterDPDKEnabled" ];
    string virtual_router_type = 10 [(gogoproto.customname) = "VirtualRouterType" ,(gogoproto.casttype) = "VirtualRouterType"];
    string virtual_router_ip_address = 11 [(gogoproto.customname) = "VirtualRouterIPAddress" ,(gogoproto.casttype) = "IpAddressType"]; 

    repeated VirtualRouterNetworkIpamRef network_ipam_refs = 1012 [(gogoproto.customname) = "NetworkIpamRefs"];
    repeated VirtualRouterVirtualMachineRef virtual_machine_refs = 1013 [(gogoproto.customname) = "VirtualMachineRefs"];

    
    repeated VirtualMachineInterface virtual_machine_interfaces = 3014 [(gogoproto.customname) = "VirtualMachineInterfaces"];
}


message VirtualRouterNetworkIpamRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    VirtualRouterNetworkIpamType attr = 3 [(gogoproto.customname) = "Attr"];
    
}

message VirtualRouterVirtualMachineRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateVirtualRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualRouter virtual_router = 1 [(gogoproto.customname) = "VirtualRouter"];
}

message CreateVirtualRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualRouter virtual_router = 1 [(gogoproto.customname) = "VirtualRouter"];
}

message UpdateVirtualRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualRouter virtual_router = 1 [(gogoproto.customname) = "VirtualRouter"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateVirtualRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualRouter virtual_router = 1 [(gogoproto.customname) = "VirtualRouter"];
}

message DeleteVirtualRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteVirtualRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListVirtualRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListVirtualRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated VirtualRouter virtual_routers = 1 [(gogoproto.customname) = "VirtualRouters"];
}

message GetVirtualRouterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetVirtualRouterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VirtualRouter virtual_router = 1 [(gogoproto.customname) = "VirtualRouter"];
}



message AppformixNodeRole {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog" ];
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress" ,(gogoproto.casttype) = "int"];
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage" ];
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime" ];
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState" ];
    string uuid = 6 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 8 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 11 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2" ]; 


}



message CreateAppformixNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AppformixNodeRole appformix_node_role = 1 [(gogoproto.customname) = "AppformixNodeRole"];
}

message CreateAppformixNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AppformixNodeRole appformix_node_role = 1 [(gogoproto.customname) = "AppformixNodeRole"];
}

message UpdateAppformixNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AppformixNodeRole appformix_node_role = 1 [(gogoproto.customname) = "AppformixNodeRole"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateAppformixNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AppformixNodeRole appformix_node_role = 1 [(gogoproto.customname) = "AppformixNodeRole"];
}

message DeleteAppformixNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteAppformixNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListAppformixNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListAppformixNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated AppformixNodeRole appformix_node_roles = 1 [(gogoproto.customname) = "AppformixNodeRoles"];
}

message GetAppformixNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetAppformixNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    AppformixNodeRole appformix_node_role = 1 [(gogoproto.customname) = "AppformixNodeRole"];
}



message BaremetalNode {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string name = 9 [(gogoproto.customname) = "Name" ];
    string ipmi_address = 10 [(gogoproto.customname) = "IpmiAddress" ];
    string ipmi_username = 11 [(gogoproto.customname) = "IpmiUsername" ];
    string ipmi_password = 12 [(gogoproto.customname) = "IpmiPassword" ];
    int64 cpu_count = 13 [(gogoproto.customname) = "CPUCount" ,(gogoproto.casttype) = "int"];
    string cpu_arch = 14 [(gogoproto.customname) = "CPUArch" ];
    int64 disk_gb = 15 [(gogoproto.customname) = "DiskGB" ,(gogoproto.casttype) = "int"];
    int64 memory_mb = 16 [(gogoproto.customname) = "MemoryMB" ,(gogoproto.casttype) = "int"];
    string deploy_kernel = 17 [(gogoproto.customname) = "DeployKernel" ];
    string deploy_ramdisk = 18 [(gogoproto.customname) = "DeployRamdisk" ]; 


}



message CreateBaremetalNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BaremetalNode baremetal_node = 1 [(gogoproto.customname) = "BaremetalNode"];
}

message CreateBaremetalNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BaremetalNode baremetal_node = 1 [(gogoproto.customname) = "BaremetalNode"];
}

message UpdateBaremetalNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BaremetalNode baremetal_node = 1 [(gogoproto.customname) = "BaremetalNode"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateBaremetalNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BaremetalNode baremetal_node = 1 [(gogoproto.customname) = "BaremetalNode"];
}

message DeleteBaremetalNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteBaremetalNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListBaremetalNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListBaremetalNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated BaremetalNode baremetal_nodes = 1 [(gogoproto.customname) = "BaremetalNodes"];
}

message GetBaremetalNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetBaremetalNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BaremetalNode baremetal_node = 1 [(gogoproto.customname) = "BaremetalNode"];
}



message BaremetalPort {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string mac_address = 9 [(gogoproto.customname) = "MacAddress" ];
    string node = 10 [(gogoproto.customname) = "Node" ];
    string switch_id = 11 [(gogoproto.customname) = "SwitchID" ];
    string port_id = 12 [(gogoproto.customname) = "PortID" ];
    string switch_info = 13 [(gogoproto.customname) = "SwitchInfo" ];
    bool pxe_enabled = 14 [(gogoproto.customname) = "PxeEnabled" ]; 


}



message CreateBaremetalPortRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BaremetalPort baremetal_port = 1 [(gogoproto.customname) = "BaremetalPort"];
}

message CreateBaremetalPortResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BaremetalPort baremetal_port = 1 [(gogoproto.customname) = "BaremetalPort"];
}

message UpdateBaremetalPortRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BaremetalPort baremetal_port = 1 [(gogoproto.customname) = "BaremetalPort"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateBaremetalPortResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BaremetalPort baremetal_port = 1 [(gogoproto.customname) = "BaremetalPort"];
}

message DeleteBaremetalPortRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteBaremetalPortResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListBaremetalPortRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListBaremetalPortResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated BaremetalPort baremetal_ports = 1 [(gogoproto.customname) = "BaremetalPorts"];
}

message GetBaremetalPortRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetBaremetalPortResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    BaremetalPort baremetal_port = 1 [(gogoproto.customname) = "BaremetalPort"];
}



message ContrailAnalyticsDatabaseNodeRole {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog" ];
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress" ,(gogoproto.casttype) = "int"];
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage" ];
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime" ];
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState" ];
    string uuid = 6 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 8 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 11 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2" ]; 


}



message CreateContrailAnalyticsDatabaseNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailAnalyticsDatabaseNodeRole contrail_analytics_database_node_role = 1 [(gogoproto.customname) = "ContrailAnalyticsDatabaseNodeRole"];
}

message CreateContrailAnalyticsDatabaseNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailAnalyticsDatabaseNodeRole contrail_analytics_database_node_role = 1 [(gogoproto.customname) = "ContrailAnalyticsDatabaseNodeRole"];
}

message UpdateContrailAnalyticsDatabaseNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailAnalyticsDatabaseNodeRole contrail_analytics_database_node_role = 1 [(gogoproto.customname) = "ContrailAnalyticsDatabaseNodeRole"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateContrailAnalyticsDatabaseNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailAnalyticsDatabaseNodeRole contrail_analytics_database_node_role = 1 [(gogoproto.customname) = "ContrailAnalyticsDatabaseNodeRole"];
}

message DeleteContrailAnalyticsDatabaseNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteContrailAnalyticsDatabaseNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListContrailAnalyticsDatabaseNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListContrailAnalyticsDatabaseNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ContrailAnalyticsDatabaseNodeRole contrail_analytics_database_node_roles = 1 [(gogoproto.customname) = "ContrailAnalyticsDatabaseNodeRoles"];
}

message GetContrailAnalyticsDatabaseNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetContrailAnalyticsDatabaseNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailAnalyticsDatabaseNodeRole contrail_analytics_database_node_role = 1 [(gogoproto.customname) = "ContrailAnalyticsDatabaseNodeRole"];
}



message ContrailAnalyticsNode {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog" ];
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress" ,(gogoproto.casttype) = "int"];
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage" ];
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime" ];
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState" ];
    string uuid = 6 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 8 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 11 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2" ]; 


}



message CreateContrailAnalyticsNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailAnalyticsNode contrail_analytics_node = 1 [(gogoproto.customname) = "ContrailAnalyticsNode"];
}

message CreateContrailAnalyticsNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailAnalyticsNode contrail_analytics_node = 1 [(gogoproto.customname) = "ContrailAnalyticsNode"];
}

message UpdateContrailAnalyticsNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailAnalyticsNode contrail_analytics_node = 1 [(gogoproto.customname) = "ContrailAnalyticsNode"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateContrailAnalyticsNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailAnalyticsNode contrail_analytics_node = 1 [(gogoproto.customname) = "ContrailAnalyticsNode"];
}

message DeleteContrailAnalyticsNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteContrailAnalyticsNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListContrailAnalyticsNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListContrailAnalyticsNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ContrailAnalyticsNode contrail_analytics_nodes = 1 [(gogoproto.customname) = "ContrailAnalyticsNodes"];
}

message GetContrailAnalyticsNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetContrailAnalyticsNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailAnalyticsNode contrail_analytics_node = 1 [(gogoproto.customname) = "ContrailAnalyticsNode"];
}



message ContrailCluster {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string config_audit_ttl = 9 [(gogoproto.customname) = "ConfigAuditTTL" ];
    string contrail_webui = 10 [(gogoproto.customname) = "ContrailWebui" ];
    string data_ttl = 11 [(gogoproto.customname) = "DataTTL" ];
    string default_gateway = 12 [(gogoproto.customname) = "DefaultGateway" ];
    string default_vrouter_bond_interface = 13 [(gogoproto.customname) = "DefaultVrouterBondInterface" ];
    string default_vrouter_bond_interface_members = 14 [(gogoproto.customname) = "DefaultVrouterBondInterfaceMembers" ];
    string flow_ttl = 15 [(gogoproto.customname) = "FlowTTL" ];
    string statistics_ttl = 16 [(gogoproto.customname) = "StatisticsTTL" ]; 


}



message CreateContrailClusterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailCluster contrail_cluster = 1 [(gogoproto.customname) = "ContrailCluster"];
}

message CreateContrailClusterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailCluster contrail_cluster = 1 [(gogoproto.customname) = "ContrailCluster"];
}

message UpdateContrailClusterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailCluster contrail_cluster = 1 [(gogoproto.customname) = "ContrailCluster"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateContrailClusterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailCluster contrail_cluster = 1 [(gogoproto.customname) = "ContrailCluster"];
}

message DeleteContrailClusterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteContrailClusterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListContrailClusterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListContrailClusterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ContrailCluster contrail_clusters = 1 [(gogoproto.customname) = "ContrailClusters"];
}

message GetContrailClusterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetContrailClusterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailCluster contrail_cluster = 1 [(gogoproto.customname) = "ContrailCluster"];
}



message ContrailControllerNodeRole {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog" ];
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress" ,(gogoproto.casttype) = "int"];
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage" ];
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime" ];
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState" ];
    string uuid = 6 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 8 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 11 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2" ]; 


}



message CreateContrailControllerNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailControllerNodeRole contrail_controller_node_role = 1 [(gogoproto.customname) = "ContrailControllerNodeRole"];
}

message CreateContrailControllerNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailControllerNodeRole contrail_controller_node_role = 1 [(gogoproto.customname) = "ContrailControllerNodeRole"];
}

message UpdateContrailControllerNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailControllerNodeRole contrail_controller_node_role = 1 [(gogoproto.customname) = "ContrailControllerNodeRole"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateContrailControllerNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailControllerNodeRole contrail_controller_node_role = 1 [(gogoproto.customname) = "ContrailControllerNodeRole"];
}

message DeleteContrailControllerNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteContrailControllerNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListContrailControllerNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListContrailControllerNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ContrailControllerNodeRole contrail_controller_node_roles = 1 [(gogoproto.customname) = "ContrailControllerNodeRoles"];
}

message GetContrailControllerNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetContrailControllerNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ContrailControllerNodeRole contrail_controller_node_role = 1 [(gogoproto.customname) = "ContrailControllerNodeRole"];
}



message ControllerNodeRole {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog" ];
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress" ,(gogoproto.casttype) = "int"];
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage" ];
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime" ];
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState" ];
    string uuid = 6 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 8 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 11 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2" ];
    string capacity_drives = 14 [(gogoproto.customname) = "CapacityDrives" ];
    string internalapi_bond_interface_members = 15 [(gogoproto.customname) = "InternalapiBondInterfaceMembers" ];
    string performance_drives = 16 [(gogoproto.customname) = "PerformanceDrives" ];
    string storage_management_bond_interface_members = 17 [(gogoproto.customname) = "StorageManagementBondInterfaceMembers" ]; 


}



message CreateControllerNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ControllerNodeRole controller_node_role = 1 [(gogoproto.customname) = "ControllerNodeRole"];
}

message CreateControllerNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ControllerNodeRole controller_node_role = 1 [(gogoproto.customname) = "ControllerNodeRole"];
}

message UpdateControllerNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ControllerNodeRole controller_node_role = 1 [(gogoproto.customname) = "ControllerNodeRole"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateControllerNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ControllerNodeRole controller_node_role = 1 [(gogoproto.customname) = "ControllerNodeRole"];
}

message DeleteControllerNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteControllerNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListControllerNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListControllerNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated ControllerNodeRole controller_node_roles = 1 [(gogoproto.customname) = "ControllerNodeRoles"];
}

message GetControllerNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetControllerNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ControllerNodeRole controller_node_role = 1 [(gogoproto.customname) = "ControllerNodeRole"];
}



message Dashboard {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string container_config = 9 [(gogoproto.customname) = "ContainerConfig" ]; 


}



message CreateDashboardRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Dashboard dashboard = 1 [(gogoproto.customname) = "Dashboard"];
}

message CreateDashboardResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Dashboard dashboard = 1 [(gogoproto.customname) = "Dashboard"];
}

message UpdateDashboardRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Dashboard dashboard = 1 [(gogoproto.customname) = "Dashboard"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateDashboardResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Dashboard dashboard = 1 [(gogoproto.customname) = "Dashboard"];
}

message DeleteDashboardRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteDashboardResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListDashboardRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListDashboardResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated Dashboard dashboards = 1 [(gogoproto.customname) = "Dashboards"];
}

message GetDashboardRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetDashboardResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Dashboard dashboard = 1 [(gogoproto.customname) = "Dashboard"];
}



message Keypair {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string name = 9 [(gogoproto.customname) = "Name" ];
    string public_key = 10 [(gogoproto.customname) = "PublicKey" ]; 


}



message CreateKeypairRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Keypair keypair = 1 [(gogoproto.customname) = "Keypair"];
}

message CreateKeypairResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Keypair keypair = 1 [(gogoproto.customname) = "Keypair"];
}

message UpdateKeypairRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Keypair keypair = 1 [(gogoproto.customname) = "Keypair"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateKeypairResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Keypair keypair = 1 [(gogoproto.customname) = "Keypair"];
}

message DeleteKeypairRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteKeypairResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListKeypairRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListKeypairResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated Keypair keypairs = 1 [(gogoproto.customname) = "Keypairs"];
}

message GetKeypairRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetKeypairResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Keypair keypair = 1 [(gogoproto.customname) = "Keypair"];
}



message KubernetesCluster {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string contrail_cluster_id = 9 [(gogoproto.customname) = "ContrailClusterID" ];
    string kuberunetes_dashboard = 10 [(gogoproto.customname) = "KuberunetesDashboard" ]; 


}



message CreateKubernetesClusterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    KubernetesCluster kubernetes_cluster = 1 [(gogoproto.customname) = "KubernetesCluster"];
}

message CreateKubernetesClusterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    KubernetesCluster kubernetes_cluster = 1 [(gogoproto.customname) = "KubernetesCluster"];
}

message UpdateKubernetesClusterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    KubernetesCluster kubernetes_cluster = 1 [(gogoproto.customname) = "KubernetesCluster"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateKubernetesClusterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    KubernetesCluster kubernetes_cluster = 1 [(gogoproto.customname) = "KubernetesCluster"];
}

message DeleteKubernetesClusterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteKubernetesClusterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListKubernetesClusterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListKubernetesClusterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated KubernetesCluster kubernetes_clusters = 1 [(gogoproto.customname) = "KubernetesClusters"];
}

message GetKubernetesClusterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetKubernetesClusterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    KubernetesCluster kubernetes_cluster = 1 [(gogoproto.customname) = "KubernetesCluster"];
}



message KubernetesNode {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog" ];
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress" ,(gogoproto.casttype) = "int"];
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage" ];
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime" ];
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState" ];
    string uuid = 6 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 8 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 11 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2" ]; 


}



message CreateKubernetesNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    KubernetesNode kubernetes_node = 1 [(gogoproto.customname) = "KubernetesNode"];
}

message CreateKubernetesNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    KubernetesNode kubernetes_node = 1 [(gogoproto.customname) = "KubernetesNode"];
}

message UpdateKubernetesNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    KubernetesNode kubernetes_node = 1 [(gogoproto.customname) = "KubernetesNode"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateKubernetesNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    KubernetesNode kubernetes_node = 1 [(gogoproto.customname) = "KubernetesNode"];
}

message DeleteKubernetesNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteKubernetesNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListKubernetesNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListKubernetesNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated KubernetesNode kubernetes_nodes = 1 [(gogoproto.customname) = "KubernetesNodes"];
}

message GetKubernetesNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetKubernetesNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    KubernetesNode kubernetes_node = 1 [(gogoproto.customname) = "KubernetesNode"];
}



message Location {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog" ];
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress" ,(gogoproto.casttype) = "int"];
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage" ];
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime" ];
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState" ];
    string uuid = 6 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 8 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 11 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2" ];
    string type = 14 [(gogoproto.customname) = "Type" ];
    string private_dns_servers = 15 [(gogoproto.customname) = "PrivateDNSServers" ];
    string private_ntp_hosts = 16 [(gogoproto.customname) = "PrivateNTPHosts" ];
    string private_ospd_package_url = 17 [(gogoproto.customname) = "PrivateOspdPackageURL" ];
    string private_ospd_user_name = 18 [(gogoproto.customname) = "PrivateOspdUserName" ];
    string private_ospd_user_password = 19 [(gogoproto.customname) = "PrivateOspdUserPassword" ];
    string private_ospd_vm_disk_gb = 20 [(gogoproto.customname) = "PrivateOspdVMDiskGB" ];
    string private_ospd_vm_name = 21 [(gogoproto.customname) = "PrivateOspdVMName" ];
    string private_ospd_vm_ram_mb = 22 [(gogoproto.customname) = "PrivateOspdVMRAMMB" ];
    string private_ospd_vm_vcpus = 23 [(gogoproto.customname) = "PrivateOspdVMVcpus" ];
    string private_redhat_pool_id = 24 [(gogoproto.customname) = "PrivateRedhatPoolID" ];
    string private_redhat_subscription_key = 25 [(gogoproto.customname) = "PrivateRedhatSubscriptionKey" ];
    string private_redhat_subscription_pasword = 26 [(gogoproto.customname) = "PrivateRedhatSubscriptionPasword" ];
    string private_redhat_subscription_user = 27 [(gogoproto.customname) = "PrivateRedhatSubscriptionUser" ];
    string gcp_account_info = 28 [(gogoproto.customname) = "GCPAccountInfo" ];
    int64 gcp_asn = 29 [(gogoproto.customname) = "GCPAsn" ,(gogoproto.casttype) = "int"];
    string gcp_region = 30 [(gogoproto.customname) = "GCPRegion" ];
    string gcp_subnet = 31 [(gogoproto.customname) = "GCPSubnet" ];
    string aws_access_key = 32 [(gogoproto.customname) = "AwsAccessKey" ];
    string aws_region = 33 [(gogoproto.customname) = "AwsRegion" ];
    string aws_secret_key = 34 [(gogoproto.customname) = "AwsSecretKey" ];
    string aws_subnet = 35 [(gogoproto.customname) = "AwsSubnet" ]; 


    
    repeated PhysicalRouter physical_routers = 3036 [(gogoproto.customname) = "PhysicalRouters"];
}



message CreateLocationRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Location location = 1 [(gogoproto.customname) = "Location"];
}

message CreateLocationResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Location location = 1 [(gogoproto.customname) = "Location"];
}

message UpdateLocationRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Location location = 1 [(gogoproto.customname) = "Location"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateLocationResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Location location = 1 [(gogoproto.customname) = "Location"];
}

message DeleteLocationRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteLocationResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListLocationRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListLocationResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated Location locations = 1 [(gogoproto.customname) = "Locations"];
}

message GetLocationRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetLocationResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Location location = 1 [(gogoproto.customname) = "Location"];
}



message Node {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string hostname = 9 [(gogoproto.customname) = "Hostname" ];
    string ip_address = 10 [(gogoproto.customname) = "IPAddress" ];
    string mac_address = 11 [(gogoproto.customname) = "MacAddress" ];
    string type = 12 [(gogoproto.customname) = "Type" ];
    string password = 13 [(gogoproto.customname) = "Password" ];
    string ssh_key = 14 [(gogoproto.customname) = "SSHKey" ];
    string username = 15 [(gogoproto.customname) = "Username" ];
    string aws_ami = 16 [(gogoproto.customname) = "AwsAmi" ];
    string aws_instance_type = 17 [(gogoproto.customname) = "AwsInstanceType" ];
    string gcp_image = 18 [(gogoproto.customname) = "GCPImage" ];
    string gcp_machine_type = 19 [(gogoproto.customname) = "GCPMachineType" ];
    string private_machine_properties = 20 [(gogoproto.customname) = "PrivateMachineProperties" ];
    string private_machine_state = 21 [(gogoproto.customname) = "PrivateMachineState" ];
    string private_power_management_ip = 22 [(gogoproto.customname) = "PrivatePowerManagementIP" ];
    string private_power_management_password = 23 [(gogoproto.customname) = "PrivatePowerManagementPassword" ];
    string private_power_management_username = 24 [(gogoproto.customname) = "PrivatePowerManagementUsername" ]; 


}



message CreateNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Node node = 1 [(gogoproto.customname) = "Node"];
}

message CreateNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Node node = 1 [(gogoproto.customname) = "Node"];
}

message UpdateNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Node node = 1 [(gogoproto.customname) = "Node"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Node node = 1 [(gogoproto.customname) = "Node"];
}

message DeleteNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated Node nodes = 1 [(gogoproto.customname) = "Nodes"];
}

message GetNodeRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetNodeResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Node node = 1 [(gogoproto.customname) = "Node"];
}



message OpenstackCluster {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog" ];
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress" ,(gogoproto.casttype) = "int"];
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage" ];
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime" ];
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState" ];
    string uuid = 6 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 8 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 11 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2" ];
    string admin_password = 14 [(gogoproto.customname) = "AdminPassword" ];
    string contrail_cluster_id = 15 [(gogoproto.customname) = "ContrailClusterID" ];
    string default_capacity_drives = 16 [(gogoproto.customname) = "DefaultCapacityDrives" ];
    string default_journal_drives = 17 [(gogoproto.customname) = "DefaultJournalDrives" ];
    string default_osd_drives = 18 [(gogoproto.customname) = "DefaultOsdDrives" ];
    string default_performance_drives = 19 [(gogoproto.customname) = "DefaultPerformanceDrives" ];
    string default_storage_access_bond_interface_members = 20 [(gogoproto.customname) = "DefaultStorageAccessBondInterfaceMembers" ];
    string default_storage_backend_bond_interface_members = 21 [(gogoproto.customname) = "DefaultStorageBackendBondInterfaceMembers" ];
    string external_allocation_pool_end = 22 [(gogoproto.customname) = "ExternalAllocationPoolEnd" ];
    string external_allocation_pool_start = 23 [(gogoproto.customname) = "ExternalAllocationPoolStart" ];
    string external_net_cidr = 24 [(gogoproto.customname) = "ExternalNetCidr" ];
    string openstack_webui = 25 [(gogoproto.customname) = "OpenstackWebui" ];
    string public_gateway = 26 [(gogoproto.customname) = "PublicGateway" ];
    string public_ip = 27 [(gogoproto.customname) = "PublicIP" ]; 


}



message CreateOpenstackClusterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    OpenstackCluster openstack_cluster = 1 [(gogoproto.customname) = "OpenstackCluster"];
}

message CreateOpenstackClusterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    OpenstackCluster openstack_cluster = 1 [(gogoproto.customname) = "OpenstackCluster"];
}

message UpdateOpenstackClusterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    OpenstackCluster openstack_cluster = 1 [(gogoproto.customname) = "OpenstackCluster"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateOpenstackClusterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    OpenstackCluster openstack_cluster = 1 [(gogoproto.customname) = "OpenstackCluster"];
}

message DeleteOpenstackClusterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteOpenstackClusterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListOpenstackClusterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListOpenstackClusterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated OpenstackCluster openstack_clusters = 1 [(gogoproto.customname) = "OpenstackClusters"];
}

message GetOpenstackClusterRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetOpenstackClusterResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    OpenstackCluster openstack_cluster = 1 [(gogoproto.customname) = "OpenstackCluster"];
}



message OpenstackComputeNodeRole {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog" ];
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress" ,(gogoproto.casttype) = "int"];
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage" ];
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime" ];
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState" ];
    string uuid = 6 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 8 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 11 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2" ];
    string default_gateway = 14 [(gogoproto.customname) = "DefaultGateway" ];
    string vrouter_bond_interface = 15 [(gogoproto.customname) = "VrouterBondInterface" ];
    string vrouter_bond_interface_members = 16 [(gogoproto.customname) = "VrouterBondInterfaceMembers" ];
    string vrouter_type = 17 [(gogoproto.customname) = "VrouterType" ]; 


}



message CreateOpenstackComputeNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    OpenstackComputeNodeRole openstack_compute_node_role = 1 [(gogoproto.customname) = "OpenstackComputeNodeRole"];
}

message CreateOpenstackComputeNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    OpenstackComputeNodeRole openstack_compute_node_role = 1 [(gogoproto.customname) = "OpenstackComputeNodeRole"];
}

message UpdateOpenstackComputeNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    OpenstackComputeNodeRole openstack_compute_node_role = 1 [(gogoproto.customname) = "OpenstackComputeNodeRole"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateOpenstackComputeNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    OpenstackComputeNodeRole openstack_compute_node_role = 1 [(gogoproto.customname) = "OpenstackComputeNodeRole"];
}

message DeleteOpenstackComputeNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteOpenstackComputeNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListOpenstackComputeNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListOpenstackComputeNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated OpenstackComputeNodeRole openstack_compute_node_roles = 1 [(gogoproto.customname) = "OpenstackComputeNodeRoles"];
}

message GetOpenstackComputeNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetOpenstackComputeNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    OpenstackComputeNodeRole openstack_compute_node_role = 1 [(gogoproto.customname) = "OpenstackComputeNodeRole"];
}



message OpenstackStorageNodeRole {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog" ];
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress" ,(gogoproto.casttype) = "int"];
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage" ];
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime" ];
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState" ];
    string uuid = 6 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 8 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 11 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2" ];
    string journal_drives = 14 [(gogoproto.customname) = "JournalDrives" ];
    string osd_drives = 15 [(gogoproto.customname) = "OsdDrives" ];
    string storage_access_bond_interface_members = 16 [(gogoproto.customname) = "StorageAccessBondInterfaceMembers" ];
    string storage_backend_bond_interface_members = 17 [(gogoproto.customname) = "StorageBackendBondInterfaceMembers" ]; 


}



message CreateOpenstackStorageNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    OpenstackStorageNodeRole openstack_storage_node_role = 1 [(gogoproto.customname) = "OpenstackStorageNodeRole"];
}

message CreateOpenstackStorageNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    OpenstackStorageNodeRole openstack_storage_node_role = 1 [(gogoproto.customname) = "OpenstackStorageNodeRole"];
}

message UpdateOpenstackStorageNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    OpenstackStorageNodeRole openstack_storage_node_role = 1 [(gogoproto.customname) = "OpenstackStorageNodeRole"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateOpenstackStorageNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    OpenstackStorageNodeRole openstack_storage_node_role = 1 [(gogoproto.customname) = "OpenstackStorageNodeRole"];
}

message DeleteOpenstackStorageNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteOpenstackStorageNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListOpenstackStorageNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListOpenstackStorageNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated OpenstackStorageNodeRole openstack_storage_node_roles = 1 [(gogoproto.customname) = "OpenstackStorageNodeRoles"];
}

message GetOpenstackStorageNodeRoleRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetOpenstackStorageNodeRoleResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    OpenstackStorageNodeRole openstack_storage_node_role = 1 [(gogoproto.customname) = "OpenstackStorageNodeRole"];
}



message VPNGroup {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog" ];
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress" ,(gogoproto.casttype) = "int"];
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage" ];
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime" ];
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState" ];
    string uuid = 6 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 8 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 11 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2" ];
    string type = 14 [(gogoproto.customname) = "Type" ]; 

    repeated VPNGroupLocationRef location_refs = 1015 [(gogoproto.customname) = "LocationRefs"];

}


message VPNGroupLocationRef {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateVPNGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VPNGroup vpn_group = 1 [(gogoproto.customname) = "VPNGroup"];
}

message CreateVPNGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VPNGroup vpn_group = 1 [(gogoproto.customname) = "VPNGroup"];
}

message UpdateVPNGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VPNGroup vpn_group = 1 [(gogoproto.customname) = "VPNGroup"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateVPNGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VPNGroup vpn_group = 1 [(gogoproto.customname) = "VPNGroup"];
}

message DeleteVPNGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteVPNGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListVPNGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListVPNGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated VPNGroup vpn_groups = 1 [(gogoproto.customname) = "VPNGroups"];
}

message GetVPNGroupRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetVPNGroupResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    VPNGroup vpn_group = 1 [(gogoproto.customname) = "VPNGroup"];
}



message Widget {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uuid = 1 [(gogoproto.customname) = "UUID" ];
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID" ];
    string parent_type = 3 [(gogoproto.customname) = "ParentType" ];
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName" ];
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms" ];
    string display_name = 6 [(gogoproto.customname) = "DisplayName" ];
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations" ];
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2" ];
    string container_config = 9 [(gogoproto.customname) = "ContainerConfig" ];
    string content_config = 10 [(gogoproto.customname) = "ContentConfig" ];
    string layout_config = 11 [(gogoproto.customname) = "LayoutConfig" ]; 


}



message CreateWidgetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Widget widget = 1 [(gogoproto.customname) = "Widget"];
}

message CreateWidgetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Widget widget = 1 [(gogoproto.customname) = "Widget"];
}

message UpdateWidgetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Widget widget = 1 [(gogoproto.customname) = "Widget"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateWidgetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Widget widget = 1 [(gogoproto.customname) = "Widget"];
}

message DeleteWidgetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteWidgetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListWidgetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListWidgetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    repeated Widget widgets = 1 [(gogoproto.customname) = "Widgets"];
}

message GetWidgetRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetWidgetResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
    Widget widget = 1 [(gogoproto.customname) = "Widget"];
}









message SNMPCredentials {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string v3_privacy_protocol = 1 [(gogoproto.customname) = "V3PrivacyProtocol" ];
    int64 retries = 2 [(gogoproto.customname) = "Retries" ,(gogoproto.casttype) = "int"];
    string v3_authentication_password = 3 [(gogoproto.customname) = "V3AuthenticationPassword" ];
    int64 v3_engine_time = 4 [(gogoproto.customname) = "V3EngineTime" ,(gogoproto.casttype) = "int"];
    string v3_engine_id = 5 [(gogoproto.customname) = "V3EngineID" ];
    int64 local_port = 6 [(gogoproto.customname) = "LocalPort" ,(gogoproto.casttype) = "int"];
    string v3_security_level = 7 [(gogoproto.customname) = "V3SecurityLevel" ];
    string v3_context = 8 [(gogoproto.customname) = "V3Context" ];
    string v3_security_name = 9 [(gogoproto.customname) = "V3SecurityName" ];
    string v3_authentication_protocol = 10 [(gogoproto.customname) = "V3AuthenticationProtocol" ];
    string v2_community = 11 [(gogoproto.customname) = "V2Community" ];
    string v3_security_engine_id = 12 [(gogoproto.customname) = "V3SecurityEngineID" ];
    string v3_context_engine_id = 13 [(gogoproto.customname) = "V3ContextEngineID" ];
    int64 version = 14 [(gogoproto.customname) = "Version" ,(gogoproto.casttype) = "int"];
    int64 timeout = 15 [(gogoproto.customname) = "Timeout" ,(gogoproto.casttype) = "int"];
    string v3_privacy_password = 16 [(gogoproto.customname) = "V3PrivacyPassword" ];
    int64 v3_engine_boots = 17 [(gogoproto.customname) = "V3EngineBoots" ,(gogoproto.casttype) = "int"]; 
}





message ServiceInterfaceTag {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string interface_type = 1 [(gogoproto.customname) = "InterfaceType" ,(gogoproto.casttype) = "ServiceInterfaceType"]; 
}









message FlowAgingTimeoutList {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated FlowAgingTimeout flow_aging_timeout = 1 [(gogoproto.customname) = "FlowAgingTimeout" ]; 
}















message FirewallServiceType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string protocol = 1 [(gogoproto.customname) = "Protocol" ];
    PortType dst_ports = 2 [(gogoproto.customname) = "DSTPorts" ];
    PortType src_ports = 3 [(gogoproto.customname) = "SRCPorts" ];
    int64 protocol_id = 4 [(gogoproto.customname) = "ProtocolID" ,(gogoproto.casttype) = "int"]; 
}



message ServiceScaleOutType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    bool auto_scale = 1 [(gogoproto.customname) = "AutoScale" ];
    int64 max_instances = 2 [(gogoproto.customname) = "MaxInstances" ,(gogoproto.casttype) = "int"]; 
}



message VnSubnetsType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated IpamSubnetType ipam_subnets = 1 [(gogoproto.customname) = "IpamSubnets" ];
    RouteTableType host_routes = 2 [(gogoproto.customname) = "HostRoutes" ]; 
}





message AllowedAddressPairs {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated AllowedAddressPair allowed_address_pair = 1 [(gogoproto.customname) = "AllowedAddressPair" ]; 
}



message ServiceTemplateInterfaceType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    bool static_route_enable = 1 [(gogoproto.customname) = "StaticRouteEnable" ];
    bool shared_ip = 2 [(gogoproto.customname) = "SharedIP" ];
    string service_interface_type = 3 [(gogoproto.customname) = "ServiceInterfaceType" ,(gogoproto.casttype) = "ServiceInterfaceType"]; 
}



message RbacRuleEntriesType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated RbacRuleType rbac_rule = 1 [(gogoproto.customname) = "RbacRule" ]; 
}



message DiscoveryPubSubEndPointType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string ep_version = 1 [(gogoproto.customname) = "EpVersion" ];
    string ep_id = 2 [(gogoproto.customname) = "EpID" ];
    string ep_type = 3 [(gogoproto.customname) = "EpType" ];
    SubnetType ep_prefix = 4 [(gogoproto.customname) = "EpPrefix" ]; 
}



message LoadbalancerPoolType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string status = 1 [(gogoproto.customname) = "Status" ];
    string protocol = 2 [(gogoproto.customname) = "Protocol" ,(gogoproto.casttype) = "LoadbalancerProtocolType"];
    string subnet_id = 3 [(gogoproto.customname) = "SubnetID" ,(gogoproto.casttype) = "UuidStringType"];
    string session_persistence = 4 [(gogoproto.customname) = "SessionPersistence" ,(gogoproto.casttype) = "SessionPersistenceType"];
    bool admin_state = 5 [(gogoproto.customname) = "AdminState" ];
    string persistence_cookie_name = 6 [(gogoproto.customname) = "PersistenceCookieName" ];
    string status_description = 7 [(gogoproto.customname) = "StatusDescription" ];
    string loadbalancer_method = 8 [(gogoproto.customname) = "LoadbalancerMethod" ,(gogoproto.casttype) = "LoadbalancerMethodType"]; 
}





message DiscoveryServiceAssignmentType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated DiscoveryPubSubEndPointType subscriber = 1 [(gogoproto.customname) = "Subscriber" ];
    DiscoveryPubSubEndPointType publisher = 2 [(gogoproto.customname) = "Publisher" ]; 
}



message RouteType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string prefix = 1 [(gogoproto.customname) = "Prefix" ];
    string next_hop = 2 [(gogoproto.customname) = "NextHop" ];
    CommunityAttributes community_attributes = 3 [(gogoproto.customname) = "CommunityAttributes" ];
    string next_hop_type = 4 [(gogoproto.customname) = "NextHopType" ,(gogoproto.casttype) = "RouteNextHopType"]; 
}





message JunosServicePorts {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated string service_port = 1 [(gogoproto.customname) = "ServicePort" ]; 
}



message VirtualDnsRecordType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string record_name = 1 [(gogoproto.customname) = "RecordName" ];
    string record_class = 2 [(gogoproto.customname) = "RecordClass" ,(gogoproto.casttype) = "DnsRecordClassType"];
    string record_data = 3 [(gogoproto.customname) = "RecordData" ];
    string record_type = 4 [(gogoproto.customname) = "RecordType" ,(gogoproto.casttype) = "DnsRecordTypeType"];
    int64 record_ttl_seconds = 5 [(gogoproto.customname) = "RecordTTLSeconds" ,(gogoproto.casttype) = "int"];
    int64 record_mx_preference = 6 [(gogoproto.customname) = "RecordMXPreference" ,(gogoproto.casttype) = "int"]; 
}



message FatFlowProtocols {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated ProtocolType fat_flow_protocol = 1 [(gogoproto.customname) = "FatFlowProtocol" ]; 
}





message ControlTrafficDscpType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    int64 control = 1 [(gogoproto.customname) = "Control" ,(gogoproto.casttype) = "DscpValueType"];
    int64 analytics = 2 [(gogoproto.customname) = "Analytics" ,(gogoproto.casttype) = "DscpValueType"];
    int64 dns = 3 [(gogoproto.customname) = "DNS" ,(gogoproto.casttype) = "DscpValueType"]; 
}



message FlowAgingTimeout {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    int64 timeout_in_seconds = 1 [(gogoproto.customname) = "TimeoutInSeconds" ,(gogoproto.casttype) = "int"];
    string protocol = 2 [(gogoproto.customname) = "Protocol" ];
    int64 port = 3 [(gogoproto.customname) = "Port" ,(gogoproto.casttype) = "int"]; 
}





message PortMap {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    int64 src_port = 1 [(gogoproto.customname) = "SRCPort" ,(gogoproto.casttype) = "int"];
    string protocol = 2 [(gogoproto.customname) = "Protocol" ];
    int64 dst_port = 3 [(gogoproto.customname) = "DSTPort" ,(gogoproto.casttype) = "int"]; 
}



message LinklocalServiceEntryType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated string ip_fabric_service_ip = 1 [(gogoproto.customname) = "IPFabricServiceIP" ];
    string linklocal_service_name = 2 [(gogoproto.customname) = "LinklocalServiceName" ];
    string linklocal_service_ip = 3 [(gogoproto.customname) = "LinklocalServiceIP" ];
    int64 ip_fabric_service_port = 4 [(gogoproto.customname) = "IPFabricServicePort" ,(gogoproto.casttype) = "int"];
    string ip_fabric_DNS_service_name = 5 [(gogoproto.customname) = "IPFabricDNSServiceName" ];
    int64 linklocal_service_port = 6 [(gogoproto.customname) = "LinklocalServicePort" ,(gogoproto.casttype) = "int"]; 
}





message IpamSubnets {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated IpamSubnetType subnets = 1 [(gogoproto.customname) = "Subnets" ]; 
}





message AddressType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string security_group = 1 [(gogoproto.customname) = "SecurityGroup" ];
    SubnetType subnet = 2 [(gogoproto.customname) = "Subnet" ];
    string network_policy = 3 [(gogoproto.customname) = "NetworkPolicy" ];
    repeated SubnetType subnet_list = 4 [(gogoproto.customname) = "SubnetList" ];
    string virtual_network = 5 [(gogoproto.customname) = "VirtualNetwork" ]; 
}









message PortMappings {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated PortMap port_mappings = 1 [(gogoproto.customname) = "PortMappings" ]; 
}









message PolicyEntriesType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated PolicyRuleType policy_rule = 1 [(gogoproto.customname) = "PolicyRule" ]; 
}







message AlarmOperand2 {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string uve_attribute = 1 [(gogoproto.customname) = "UveAttribute" ];
    string json_value = 2 [(gogoproto.customname) = "JSONValue" ]; 
}



message FirewallRuleMatchTagsType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated string tag_list = 1 [(gogoproto.customname) = "TagList" ]; 
}





message SecurityLoggingObjectRuleEntryType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string rule_uuid = 1 [(gogoproto.customname) = "RuleUUID" ];
    int64 rate = 2 [(gogoproto.customname) = "Rate" ,(gogoproto.casttype) = "int"]; 
}





message ProviderDetails {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    int64 segmentation_id = 1 [(gogoproto.customname) = "SegmentationID" ,(gogoproto.casttype) = "VlanIdType"];
    string physical_network = 2 [(gogoproto.customname) = "PhysicalNetwork" ]; 
}



message SecurityLoggingObjectRuleListType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated SecurityLoggingObjectRuleEntryType rule = 1 [(gogoproto.customname) = "Rule" ]; 
}



message RouteTargetList {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated string route_target = 1 [(gogoproto.customname) = "RouteTarget" ]; 
}







message IpamDnsAddressType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    IpAddressesType tenant_dns_server_address = 1 [(gogoproto.customname) = "TenantDNSServerAddress" ];
    string virtual_dns_server_name = 2 [(gogoproto.customname) = "VirtualDNSServerName" ]; 
}



message DomainLimitsType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    int64 project_limit = 1 [(gogoproto.customname) = "ProjectLimit" ,(gogoproto.casttype) = "int"];
    int64 virtual_network_limit = 2 [(gogoproto.customname) = "VirtualNetworkLimit" ,(gogoproto.casttype) = "int"];
    int64 security_group_limit = 3 [(gogoproto.customname) = "SecurityGroupLimit" ,(gogoproto.casttype) = "int"]; 
}



message UserDefinedLogStat {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string pattern = 1 [(gogoproto.customname) = "Pattern" ];
    string name = 2 [(gogoproto.customname) = "Name" ]; 
}





message InterfaceMirrorType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string traffic_direction = 1 [(gogoproto.customname) = "TrafficDirection" ,(gogoproto.casttype) = "TrafficDirectionType"];
    MirrorActionType mirror_to = 2 [(gogoproto.customname) = "MirrorTo" ]; 
}



message FirewallSequence {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string sequence = 1 [(gogoproto.customname) = "Sequence" ]; 
}





message QuotaType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    int64 virtual_router = 1 [(gogoproto.customname) = "VirtualRouter" ,(gogoproto.casttype) = "int"];
    int64 network_policy = 2 [(gogoproto.customname) = "NetworkPolicy" ,(gogoproto.casttype) = "int"];
    int64 loadbalancer_pool = 3 [(gogoproto.customname) = "LoadbalancerPool" ,(gogoproto.casttype) = "int"];
    int64 route_table = 4 [(gogoproto.customname) = "RouteTable" ,(gogoproto.casttype) = "int"];
    int64 subnet = 5 [(gogoproto.customname) = "Subnet" ,(gogoproto.casttype) = "int"];
    int64 network_ipam = 6 [(gogoproto.customname) = "NetworkIpam" ,(gogoproto.casttype) = "int"];
    int64 virtual_DNS_record = 7 [(gogoproto.customname) = "VirtualDNSRecord" ,(gogoproto.casttype) = "int"];
    int64 logical_router = 8 [(gogoproto.customname) = "LogicalRouter" ,(gogoproto.casttype) = "int"];
    int64 security_group_rule = 9 [(gogoproto.customname) = "SecurityGroupRule" ,(gogoproto.casttype) = "int"];
    int64 virtual_DNS = 10 [(gogoproto.customname) = "VirtualDNS" ,(gogoproto.casttype) = "int"];
    int64 service_instance = 11 [(gogoproto.customname) = "ServiceInstance" ,(gogoproto.casttype) = "int"];
    int64 service_template = 12 [(gogoproto.customname) = "ServiceTemplate" ,(gogoproto.casttype) = "int"];
    int64 bgp_router = 13 [(gogoproto.customname) = "BGPRouter" ,(gogoproto.casttype) = "int"];
    int64 floating_ip = 14 [(gogoproto.customname) = "FloatingIP" ,(gogoproto.casttype) = "int"];
    int64 floating_ip_pool = 15 [(gogoproto.customname) = "FloatingIPPool" ,(gogoproto.casttype) = "int"];
    int64 loadbalancer_member = 16 [(gogoproto.customname) = "LoadbalancerMember" ,(gogoproto.casttype) = "int"];
    int64 access_control_list = 17 [(gogoproto.customname) = "AccessControlList" ,(gogoproto.casttype) = "int"];
    int64 virtual_machine_interface = 18 [(gogoproto.customname) = "VirtualMachineInterface" ,(gogoproto.casttype) = "int"];
    int64 instance_ip = 19 [(gogoproto.customname) = "InstanceIP" ,(gogoproto.casttype) = "int"];
    int64 global_vrouter_config = 20 [(gogoproto.customname) = "GlobalVrouterConfig" ,(gogoproto.casttype) = "int"];
    int64 security_logging_object = 21 [(gogoproto.customname) = "SecurityLoggingObject" ,(gogoproto.casttype) = "int"];
    int64 loadbalancer_healthmonitor = 22 [(gogoproto.customname) = "LoadbalancerHealthmonitor" ,(gogoproto.casttype) = "int"];
    int64 virtual_ip = 23 [(gogoproto.customname) = "VirtualIP" ,(gogoproto.casttype) = "int"];
    int64 defaults = 24 [(gogoproto.customname) = "Defaults" ,(gogoproto.casttype) = "int"];
    int64 security_group = 25 [(gogoproto.customname) = "SecurityGroup" ,(gogoproto.casttype) = "int"];
    int64 virtual_network = 26 [(gogoproto.customname) = "VirtualNetwork" ,(gogoproto.casttype) = "int"]; 
}







message VirtualNetworkType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string forwarding_mode = 1 [(gogoproto.customname) = "ForwardingMode" ,(gogoproto.casttype) = "ForwardingModeType"];
    bool allow_transit = 2 [(gogoproto.customname) = "AllowTransit" ];
    int64 network_id = 3 [(gogoproto.customname) = "NetworkID" ,(gogoproto.casttype) = "int"];
    bool mirror_destination = 4 [(gogoproto.customname) = "MirrorDestination" ];
    int64 vxlan_network_identifier = 5 [(gogoproto.customname) = "VxlanNetworkIdentifier" ,(gogoproto.casttype) = "VxlanNetworkIdentifierType"];
    string rpf = 6 [(gogoproto.customname) = "RPF" ,(gogoproto.casttype) = "RpfModeType"]; 
}



message AlarmAndList {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated AlarmExpression and_list = 1 [(gogoproto.customname) = "AndList" ]; 
}



message BGPaaServiceParametersType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    int64 port_start = 1 [(gogoproto.customname) = "PortStart" ,(gogoproto.casttype) = "L4PortType"];
    int64 port_end = 2 [(gogoproto.customname) = "PortEnd" ,(gogoproto.casttype) = "L4PortType"]; 
}



message IpamSubnetType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    SubnetType subnet = 1 [(gogoproto.customname) = "Subnet" ];
    bool addr_from_start = 2 [(gogoproto.customname) = "AddrFromStart" ];
    bool enable_dhcp = 3 [(gogoproto.customname) = "EnableDHCP" ];
    string default_gateway = 4 [(gogoproto.customname) = "DefaultGateway" ,(gogoproto.casttype) = "IpAddressType"];
    int64 alloc_unit = 5 [(gogoproto.customname) = "AllocUnit" ,(gogoproto.casttype) = "int"];
    string created = 6 [(gogoproto.customname) = "Created" ];
    repeated string dns_nameservers = 7 [(gogoproto.customname) = "DNSNameservers" ];
    DhcpOptionsListType dhcp_option_list = 8 [(gogoproto.customname) = "DHCPOptionList" ];
    string subnet_uuid = 9 [(gogoproto.customname) = "SubnetUUID" ];
    repeated AllocationPoolType allocation_pools = 10 [(gogoproto.customname) = "AllocationPools" ];
    string last_modified = 11 [(gogoproto.customname) = "LastModified" ];
    RouteTableType host_routes = 12 [(gogoproto.customname) = "HostRoutes" ];
    string dns_server_address = 13 [(gogoproto.customname) = "DNSServerAddress" ,(gogoproto.casttype) = "IpAddressType"];
    string subnet_name = 14 [(gogoproto.customname) = "SubnetName" ]; 
}



message GracefulRestartParametersType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    bool enable = 1 [(gogoproto.customname) = "Enable" ];
    int64 end_of_rib_timeout = 2 [(gogoproto.customname) = "EndOfRibTimeout" ,(gogoproto.casttype) = "EndOfRibTimeType"];
    bool bgp_helper_enable = 3 [(gogoproto.customname) = "BGPHelperEnable" ];
    bool xmpp_helper_enable = 4 [(gogoproto.customname) = "XMPPHelperEnable" ];
    int64 restart_time = 5 [(gogoproto.customname) = "RestartTime" ,(gogoproto.casttype) = "GracefulRestartTimeType"];
    int64 long_lived_restart_time = 6 [(gogoproto.customname) = "LongLivedRestartTime" ,(gogoproto.casttype) = "LongLivedGracefulRestartTimeType"]; 
}



message LinklocalServicesTypes {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated LinklocalServiceEntryType linklocal_service_entry = 1 [(gogoproto.customname) = "LinklocalServiceEntry" ]; 
}



message EncapsulationPrioritiesType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated string encapsulation = 1 [(gogoproto.customname) = "Encapsulation" ]; 
}







message SubnetListType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated SubnetType subnet = 1 [(gogoproto.customname) = "Subnet" ]; 
}



message AlarmExpression {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string operations = 1 [(gogoproto.customname) = "Operations" ,(gogoproto.casttype) = "AlarmOperation"];
    string operand1 = 2 [(gogoproto.customname) = "Operand1" ];
    repeated string variables = 3 [(gogoproto.customname) = "Variables" ];
    AlarmOperand2 operand2 = 4 [(gogoproto.customname) = "Operand2" ]; 
}



message UserDefinedLogStatList {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated UserDefinedLogStat statlist = 1 [(gogoproto.customname) = "Statlist" ]; 
}



message VirtualDnsType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string floating_ip_record = 1 [(gogoproto.customname) = "FloatingIPRecord" ,(gogoproto.casttype) = "FloatingIpDnsNotation"];
    string domain_name = 2 [(gogoproto.customname) = "DomainName" ];
    bool external_visible = 3 [(gogoproto.customname) = "ExternalVisible" ];
    string next_virtual_DNS = 4 [(gogoproto.customname) = "NextVirtualDNS" ];
    bool dynamic_records_from_client = 5 [(gogoproto.customname) = "DynamicRecordsFromClient" ];
    bool reverse_resolution = 6 [(gogoproto.customname) = "ReverseResolution" ];
    int64 default_ttl_seconds = 7 [(gogoproto.customname) = "DefaultTTLSeconds" ,(gogoproto.casttype) = "int"];
    string record_order = 8 [(gogoproto.customname) = "RecordOrder" ,(gogoproto.casttype) = "DnsRecordOrderType"]; 
}



message UserCredentials {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string username = 1 [(gogoproto.customname) = "Username" ];
    string password = 2 [(gogoproto.customname) = "Password" ]; 
}



message AllowedAddressPair {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    SubnetType ip = 1 [(gogoproto.customname) = "IP" ];
    string mac = 2 [(gogoproto.customname) = "Mac" ];
    string address_mode = 3 [(gogoproto.customname) = "AddressMode" ,(gogoproto.casttype) = "AddressMode"]; 
}





message AclRuleType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string rule_uuid = 1 [(gogoproto.customname) = "RuleUUID" ];
    MatchConditionType match_condition = 2 [(gogoproto.customname) = "MatchCondition" ];
    string direction = 3 [(gogoproto.customname) = "Direction" ,(gogoproto.casttype) = "DirectionType"];
    ActionListType action_list = 4 [(gogoproto.customname) = "ActionList" ]; 
}





message IpamType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string ipam_method = 1 [(gogoproto.customname) = "IpamMethod" ,(gogoproto.casttype) = "IpamMethodType"];
    string ipam_dns_method = 2 [(gogoproto.customname) = "IpamDNSMethod" ,(gogoproto.casttype) = "IpamDnsMethodType"];
    IpamDnsAddressType ipam_dns_server = 3 [(gogoproto.customname) = "IpamDNSServer" ];
    DhcpOptionsListType dhcp_option_list = 4 [(gogoproto.customname) = "DHCPOptionList" ];
    RouteTableType host_routes = 5 [(gogoproto.customname) = "HostRoutes" ];
    SubnetType cidr_block = 6 [(gogoproto.customname) = "CidrBlock" ]; 
}







message PluginProperty {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string property = 1 [(gogoproto.customname) = "Property" ];
    string value = 2 [(gogoproto.customname) = "Value" ]; 
}



message PluginProperties {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated PluginProperty plugin_property = 1 [(gogoproto.customname) = "PluginProperty" ]; 
}





message ShareType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    int64 tenant_access = 1 [(gogoproto.customname) = "TenantAccess" ,(gogoproto.casttype) = "AccessType"];
    string tenant = 2 [(gogoproto.customname) = "Tenant" ]; 
}



message ActionListType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string gateway_name = 1 [(gogoproto.customname) = "GatewayName" ];
    bool log = 2 [(gogoproto.customname) = "Log" ];
    bool alert = 3 [(gogoproto.customname) = "Alert" ];
    string qos_action = 4 [(gogoproto.customname) = "QosAction" ];
    string assign_routing_instance = 5 [(gogoproto.customname) = "AssignRoutingInstance" ];
    MirrorActionType mirror_to = 6 [(gogoproto.customname) = "MirrorTo" ];
    string simple_action = 7 [(gogoproto.customname) = "SimpleAction" ,(gogoproto.casttype) = "SimpleActionType"];
    repeated string apply_service = 8 [(gogoproto.customname) = "ApplyService" ]; 
}



message FirewallRuleMatchTagsTypeIdList {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated int64 tag_type = 1 [(gogoproto.customname) = "TagType" ,(gogoproto.casttype) = "int"]; 
}



message SequenceType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    int64 major = 1 [(gogoproto.customname) = "Major" ,(gogoproto.casttype) = "int"];
    int64 minor = 2 [(gogoproto.customname) = "Minor" ,(gogoproto.casttype) = "int"]; 
}



message ServiceInstanceType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string right_virtual_network = 1 [(gogoproto.customname) = "RightVirtualNetwork" ];
    string right_ip_address = 2 [(gogoproto.customname) = "RightIPAddress" ,(gogoproto.casttype) = "IpAddressType"];
    string availability_zone = 3 [(gogoproto.customname) = "AvailabilityZone" ];
    string management_virtual_network = 4 [(gogoproto.customname) = "ManagementVirtualNetwork" ];
    ServiceScaleOutType scale_out = 5 [(gogoproto.customname) = "ScaleOut" ];
    string ha_mode = 6 [(gogoproto.customname) = "HaMode" ,(gogoproto.casttype) = "AddressMode"];
    string virtual_router_id = 7 [(gogoproto.customname) = "VirtualRouterID" ];
    repeated ServiceInstanceInterfaceType interface_list = 8 [(gogoproto.customname) = "InterfaceList" ];
    string left_ip_address = 9 [(gogoproto.customname) = "LeftIPAddress" ,(gogoproto.casttype) = "IpAddressType"];
    string left_virtual_network = 10 [(gogoproto.customname) = "LeftVirtualNetwork" ];
    bool auto_policy = 11 [(gogoproto.customname) = "AutoPolicy" ]; 
}



message VirtualRouterNetworkIpamType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated SubnetType subnet = 1 [(gogoproto.customname) = "Subnet" ];
    repeated AllocationPoolType allocation_pools = 2 [(gogoproto.customname) = "AllocationPools" ]; 
}





message ServiceApplianceInterfaceType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string interface_type = 1 [(gogoproto.customname) = "InterfaceType" ,(gogoproto.casttype) = "ServiceInterfaceType"]; 
}



message MemberType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string role = 1 [(gogoproto.customname) = "Role" ]; 
}



message VirtualNetworkPolicyType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    TimerType timer = 1 [(gogoproto.customname) = "Timer" ];
    SequenceType sequence = 2 [(gogoproto.customname) = "Sequence" ]; 
}







message TelemetryStateInfo {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated TelemetryResourceInfo resource = 1 [(gogoproto.customname) = "Resource" ];
    int64 server_port = 2 [(gogoproto.customname) = "ServerPort" ,(gogoproto.casttype) = "int"];
    string server_ip = 3 [(gogoproto.customname) = "ServerIP" ]; 
}



message KeyValuePairs {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated KeyValuePair key_value_pair = 1 [(gogoproto.customname) = "KeyValuePair" ]; 
}



message PortType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    int64 end_port = 1 [(gogoproto.customname) = "EndPort" ,(gogoproto.casttype) = "L4PortType"];
    int64 start_port = 2 [(gogoproto.customname) = "StartPort" ,(gogoproto.casttype) = "L4PortType"]; 
}







message QosIdForwardingClassPairs {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated QosIdForwardingClassPair qos_id_forwarding_class_pair = 1 [(gogoproto.customname) = "QosIDForwardingClassPair" ]; 
}



message MatchConditionType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    PortType src_port = 1 [(gogoproto.customname) = "SRCPort" ];
    AddressType src_address = 2 [(gogoproto.customname) = "SRCAddress" ];
    string ethertype = 3 [(gogoproto.customname) = "Ethertype" ,(gogoproto.casttype) = "EtherType"];
    AddressType dst_address = 4 [(gogoproto.customname) = "DSTAddress" ];
    PortType dst_port = 5 [(gogoproto.customname) = "DSTPort" ];
    string protocol = 6 [(gogoproto.customname) = "Protocol" ]; 
}



message StaticMirrorNhType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string vtep_dst_ip_address = 1 [(gogoproto.customname) = "VtepDSTIPAddress" ];
    string vtep_dst_mac_address = 2 [(gogoproto.customname) = "VtepDSTMacAddress" ];
    int64 vni = 3 [(gogoproto.customname) = "Vni" ,(gogoproto.casttype) = "VxlanNetworkIdentifierType"]; 
}





message AlarmOrList {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated AlarmAndList or_list = 1 [(gogoproto.customname) = "OrList" ]; 
}



message PolicyBasedForwardingRuleType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string dst_mac = 1 [(gogoproto.customname) = "DSTMac" ];
    string protocol = 2 [(gogoproto.customname) = "Protocol" ];
    string ipv6_service_chain_address = 3 [(gogoproto.customname) = "Ipv6ServiceChainAddress" ,(gogoproto.casttype) = "IpAddressType"];
    string direction = 4 [(gogoproto.customname) = "Direction" ,(gogoproto.casttype) = "TrafficDirectionType"];
    int64 mpls_label = 5 [(gogoproto.customname) = "MPLSLabel" ,(gogoproto.casttype) = "int"];
    int64 vlan_tag = 6 [(gogoproto.customname) = "VlanTag" ,(gogoproto.casttype) = "int"];
    string src_mac = 7 [(gogoproto.customname) = "SRCMac" ];
    string service_chain_address = 8 [(gogoproto.customname) = "ServiceChainAddress" ]; 
}







message DhcpOptionType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string dhcp_option_value = 1 [(gogoproto.customname) = "DHCPOptionValue" ];
    string dhcp_option_value_bytes = 2 [(gogoproto.customname) = "DHCPOptionValueBytes" ];
    string dhcp_option_name = 3 [(gogoproto.customname) = "DHCPOptionName" ]; 
}



message FirewallServiceGroupType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated FirewallServiceType firewall_service = 1 [(gogoproto.customname) = "FirewallService" ]; 
}



message TelemetryResourceInfo {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string path = 1 [(gogoproto.customname) = "Path" ];
    string rate = 2 [(gogoproto.customname) = "Rate" ];
    string name = 3 [(gogoproto.customname) = "Name" ]; 
}



message BridgeDomainMembershipType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    int64 vlan_tag = 1 [(gogoproto.customname) = "VlanTag" ,(gogoproto.casttype) = "Dot1QTagType"]; 
}





message FloatingIpPoolSubnetType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated string subnet_uuid = 1 [(gogoproto.customname) = "SubnetUUID" ]; 
}



message AllocationPoolType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    bool vrouter_specific_pool = 1 [(gogoproto.customname) = "VrouterSpecificPool" ];
    string start = 2 [(gogoproto.customname) = "Start" ];
    string end = 3 [(gogoproto.customname) = "End" ]; 
}



message RoutingPolicyServiceInstanceType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string right_sequence = 1 [(gogoproto.customname) = "RightSequence" ];
    string left_sequence = 2 [(gogoproto.customname) = "LeftSequence" ]; 
}





message LoadbalancerType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string status = 1 [(gogoproto.customname) = "Status" ];
    string provisioning_status = 2 [(gogoproto.customname) = "ProvisioningStatus" ];
    bool admin_state = 3 [(gogoproto.customname) = "AdminState" ];
    string vip_address = 4 [(gogoproto.customname) = "VipAddress" ,(gogoproto.casttype) = "IpAddressType"];
    string vip_subnet_id = 5 [(gogoproto.customname) = "VipSubnetID" ,(gogoproto.casttype) = "UuidStringType"];
    string operating_status = 6 [(gogoproto.customname) = "OperatingStatus" ]; 
}



message ServiceTemplateType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    bool availability_zone_enable = 1 [(gogoproto.customname) = "AvailabilityZoneEnable" ];
    string instance_data = 2 [(gogoproto.customname) = "InstanceData" ];
    bool ordered_interfaces = 3 [(gogoproto.customname) = "OrderedInterfaces" ];
    string service_virtualization_type = 4 [(gogoproto.customname) = "ServiceVirtualizationType" ,(gogoproto.casttype) = "ServiceVirtualizationType"];
    repeated ServiceTemplateInterfaceType interface_type = 5 [(gogoproto.customname) = "InterfaceType" ];
    string image_name = 6 [(gogoproto.customname) = "ImageName" ];
    string service_mode = 7 [(gogoproto.customname) = "ServiceMode" ,(gogoproto.casttype) = "ServiceModeType"];
    int64 version = 8 [(gogoproto.customname) = "Version" ,(gogoproto.casttype) = "int"];
    string service_type = 9 [(gogoproto.customname) = "ServiceType" ,(gogoproto.casttype) = "ServiceType"];
    string flavor = 10 [(gogoproto.customname) = "Flavor" ];
    bool service_scaling = 11 [(gogoproto.customname) = "ServiceScaling" ];
    string vrouter_instance_type = 12 [(gogoproto.customname) = "VrouterInstanceType" ,(gogoproto.casttype) = "VRouterInstanceType"]; 
}





message CommunityAttributes {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated string community_attribute = 1 [(gogoproto.customname) = "CommunityAttribute" ]; 
}





message VrfAssignTableType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated VrfAssignRuleType vrf_assign_rule = 1 [(gogoproto.customname) = "VRFAssignRule" ]; 
}



message KeyValuePair {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string value = 1 [(gogoproto.customname) = "Value" ];
    string key = 2 [(gogoproto.customname) = "Key" ]; 
}





message RbacRuleType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string rule_object = 1 [(gogoproto.customname) = "RuleObject" ];
    repeated RbacPermType rule_perms = 2 [(gogoproto.customname) = "RulePerms" ];
    string rule_field = 3 [(gogoproto.customname) = "RuleField" ]; 
}





message ServiceInstanceInterfaceType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string virtual_network = 1 [(gogoproto.customname) = "VirtualNetwork" ];
    string ip_address = 2 [(gogoproto.customname) = "IPAddress" ,(gogoproto.casttype) = "IpAddressType"];
    AllowedAddressPairs allowed_address_pairs = 3 [(gogoproto.customname) = "AllowedAddressPairs" ];
    RouteTableType static_routes = 4 [(gogoproto.customname) = "StaticRoutes" ]; 
}



message DhcpOptionsListType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated DhcpOptionType dhcp_option = 1 [(gogoproto.customname) = "DHCPOption" ]; 
}



message ServiceHealthCheckType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    int64 delayUsecs = 1 [(gogoproto.customname) = "DelayUsecs" ,(gogoproto.casttype) = "int"];
    int64 timeoutUsecs = 2 [(gogoproto.customname) = "TimeoutUsecs" ,(gogoproto.casttype) = "int"];
    bool enabled = 3 [(gogoproto.customname) = "Enabled" ];
    int64 delay = 4 [(gogoproto.customname) = "Delay" ,(gogoproto.casttype) = "int"];
    string expected_codes = 5 [(gogoproto.customname) = "ExpectedCodes" ];
    int64 max_retries = 6 [(gogoproto.customname) = "MaxRetries" ,(gogoproto.casttype) = "int"];
    string health_check_type = 7 [(gogoproto.customname) = "HealthCheckType" ,(gogoproto.casttype) = "HealthCheckType"];
    string http_method = 8 [(gogoproto.customname) = "HTTPMethod" ];
    int64 timeout = 9 [(gogoproto.customname) = "Timeout" ,(gogoproto.casttype) = "int"];
    string url_path = 10 [(gogoproto.customname) = "URLPath" ];
    string monitor_type = 11 [(gogoproto.customname) = "MonitorType" ,(gogoproto.casttype) = "HealthCheckProtocolType"]; 
}







message FirewallRuleEndpointType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string address_group = 1 [(gogoproto.customname) = "AddressGroup" ];
    SubnetType subnet = 2 [(gogoproto.customname) = "Subnet" ];
    repeated string tags = 3 [(gogoproto.customname) = "Tags" ];
    repeated int64 tag_ids = 4 [(gogoproto.customname) = "TagIds" ,(gogoproto.casttype) = "int"];
    string virtual_network = 5 [(gogoproto.customname) = "VirtualNetwork" ];
    bool any = 6 [(gogoproto.customname) = "Any" ]; 
}



message LoadbalancerMemberType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string status = 1 [(gogoproto.customname) = "Status" ];
    string status_description = 2 [(gogoproto.customname) = "StatusDescription" ];
    int64 weight = 3 [(gogoproto.customname) = "Weight" ,(gogoproto.casttype) = "int"];
    bool admin_state = 4 [(gogoproto.customname) = "AdminState" ];
    string address = 5 [(gogoproto.customname) = "Address" ,(gogoproto.casttype) = "IpAddressType"];
    int64 protocol_port = 6 [(gogoproto.customname) = "ProtocolPort" ,(gogoproto.casttype) = "int"]; 
}



message IpAddressesType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string ip_address = 1 [(gogoproto.customname) = "IPAddress" ,(gogoproto.casttype) = "IpAddressType"]; 
}



message QosIdForwardingClassPair {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    int64 key = 1 [(gogoproto.customname) = "Key" ,(gogoproto.casttype) = "int"];
    int64 forwarding_class_id = 2 [(gogoproto.customname) = "ForwardingClassID" ,(gogoproto.casttype) = "ForwardingClassId"]; 
}





message VrfAssignRuleType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string routing_instance = 1 [(gogoproto.customname) = "RoutingInstance" ];
    MatchConditionType match_condition = 2 [(gogoproto.customname) = "MatchCondition" ];
    int64 vlan_tag = 3 [(gogoproto.customname) = "VlanTag" ,(gogoproto.casttype) = "int"];
    bool ignore_acl = 4 [(gogoproto.customname) = "IgnoreACL" ]; 
}



message TimerType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string start_time = 1 [(gogoproto.customname) = "StartTime" ];
    string off_interval = 2 [(gogoproto.customname) = "OffInterval" ];
    string on_interval = 3 [(gogoproto.customname) = "OnInterval" ];
    string end_time = 4 [(gogoproto.customname) = "EndTime" ]; 
}





message PermType2 {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string owner = 1 [(gogoproto.customname) = "Owner" ];
    int64 owner_access = 2 [(gogoproto.customname) = "OwnerAccess" ,(gogoproto.casttype) = "AccessType"];
    int64 global_access = 3 [(gogoproto.customname) = "GlobalAccess" ,(gogoproto.casttype) = "AccessType"];
    repeated ShareType share = 4 [(gogoproto.customname) = "Share" ]; 
}







message VirtualMachineInterfacePropertiesType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    int64 sub_interface_vlan_tag = 1 [(gogoproto.customname) = "SubInterfaceVlanTag" ,(gogoproto.casttype) = "int"];
    int64 local_preference = 2 [(gogoproto.customname) = "LocalPreference" ,(gogoproto.casttype) = "int"];
    InterfaceMirrorType interface_mirror = 3 [(gogoproto.customname) = "InterfaceMirror" ];
    string service_interface_type = 4 [(gogoproto.customname) = "ServiceInterfaceType" ,(gogoproto.casttype) = "ServiceInterfaceType"]; 
}



message ProtocolType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string protocol = 1 [(gogoproto.customname) = "Protocol" ];
    int64 port = 2 [(gogoproto.customname) = "Port" ,(gogoproto.casttype) = "int"]; 
}





message AclEntriesType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    bool dynamic = 1 [(gogoproto.customname) = "Dynamic" ];
    repeated AclRuleType acl_rule = 2 [(gogoproto.customname) = "ACLRule" ]; 
}



message MACMoveLimitControlType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    int64 mac_move_time_window = 1 [(gogoproto.customname) = "MacMoveTimeWindow" ,(gogoproto.casttype) = "MACMoveTimeWindow"];
    int64 mac_move_limit = 2 [(gogoproto.customname) = "MacMoveLimit" ,(gogoproto.casttype) = "int"];
    string mac_move_limit_action = 3 [(gogoproto.customname) = "MacMoveLimitAction" ,(gogoproto.casttype) = "MACLimitExceedActionType"]; 
}





message LoadbalancerListenerType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string default_tls_container = 1 [(gogoproto.customname) = "DefaultTLSContainer" ];
    string protocol = 2 [(gogoproto.customname) = "Protocol" ,(gogoproto.casttype) = "LoadbalancerProtocolType"];
    int64 connection_limit = 3 [(gogoproto.customname) = "ConnectionLimit" ,(gogoproto.casttype) = "int"];
    bool admin_state = 4 [(gogoproto.customname) = "AdminState" ];
    repeated string sni_containers = 5 [(gogoproto.customname) = "SniContainers" ];
    int64 protocol_port = 6 [(gogoproto.customname) = "ProtocolPort" ,(gogoproto.casttype) = "int"]; 
}







message VirtualIpType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string status = 1 [(gogoproto.customname) = "Status" ];
    string status_description = 2 [(gogoproto.customname) = "StatusDescription" ];
    string protocol = 3 [(gogoproto.customname) = "Protocol" ,(gogoproto.casttype) = "LoadbalancerProtocolType"];
    string subnet_id = 4 [(gogoproto.customname) = "SubnetID" ,(gogoproto.casttype) = "UuidStringType"];
    string persistence_cookie_name = 5 [(gogoproto.customname) = "PersistenceCookieName" ];
    int64 connection_limit = 6 [(gogoproto.customname) = "ConnectionLimit" ,(gogoproto.casttype) = "int"];
    string persistence_type = 7 [(gogoproto.customname) = "PersistenceType" ,(gogoproto.casttype) = "SessionPersistenceType"];
    bool admin_state = 8 [(gogoproto.customname) = "AdminState" ];
    string address = 9 [(gogoproto.customname) = "Address" ,(gogoproto.casttype) = "IpAddressType"];
    int64 protocol_port = 10 [(gogoproto.customname) = "ProtocolPort" ,(gogoproto.casttype) = "int"]; 
}



message MirrorActionType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    int64 nic_assisted_mirroring_vlan = 1 [(gogoproto.customname) = "NicAssistedMirroringVlan" ,(gogoproto.casttype) = "VlanIdType"];
    string analyzer_name = 2 [(gogoproto.customname) = "AnalyzerName" ];
    string nh_mode = 3 [(gogoproto.customname) = "NHMode" ,(gogoproto.casttype) = "NHModeType"];
    bool juniper_header = 4 [(gogoproto.customname) = "JuniperHeader" ];
    int64 udp_port = 5 [(gogoproto.customname) = "UDPPort" ,(gogoproto.casttype) = "int"];
    string routing_instance = 6 [(gogoproto.customname) = "RoutingInstance" ];
    StaticMirrorNhType static_nh_header = 7 [(gogoproto.customname) = "StaticNHHeader" ];
    string analyzer_ip_address = 8 [(gogoproto.customname) = "AnalyzerIPAddress" ];
    string encapsulation = 9 [(gogoproto.customname) = "Encapsulation" ];
    string analyzer_mac_address = 10 [(gogoproto.customname) = "AnalyzerMacAddress" ];
    bool nic_assisted_mirroring = 11 [(gogoproto.customname) = "NicAssistedMirroring" ]; 
}



message RbacPermType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string role_crud = 1 [(gogoproto.customname) = "RoleCrud" ];
    string role_name = 2 [(gogoproto.customname) = "RoleName" ]; 
}



message LoadbalancerHealthmonitorType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    int64 delay = 1 [(gogoproto.customname) = "Delay" ,(gogoproto.casttype) = "int"];
    string expected_codes = 2 [(gogoproto.customname) = "ExpectedCodes" ];
    int64 max_retries = 3 [(gogoproto.customname) = "MaxRetries" ,(gogoproto.casttype) = "int"];
    string http_method = 4 [(gogoproto.customname) = "HTTPMethod" ];
    bool admin_state = 5 [(gogoproto.customname) = "AdminState" ];
    int64 timeout = 6 [(gogoproto.customname) = "Timeout" ,(gogoproto.casttype) = "int"];
    string url_path = 7 [(gogoproto.customname) = "URLPath" ];
    string monitor_type = 8 [(gogoproto.customname) = "MonitorType" ,(gogoproto.casttype) = "HealthmonitorType"]; 
}



message PolicyRuleType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string direction = 1 [(gogoproto.customname) = "Direction" ,(gogoproto.casttype) = "DirectionType"];
    string protocol = 2 [(gogoproto.customname) = "Protocol" ];
    repeated AddressType dst_addresses = 3 [(gogoproto.customname) = "DSTAddresses" ];
    ActionListType action_list = 4 [(gogoproto.customname) = "ActionList" ];
    string created = 5 [(gogoproto.customname) = "Created" ];
    string rule_uuid = 6 [(gogoproto.customname) = "RuleUUID" ];
    repeated PortType dst_ports = 7 [(gogoproto.customname) = "DSTPorts" ];
    repeated string application = 8 [(gogoproto.customname) = "Application" ];
    string last_modified = 9 [(gogoproto.customname) = "LastModified" ];
    string ethertype = 10 [(gogoproto.customname) = "Ethertype" ,(gogoproto.casttype) = "EtherType"];
    repeated AddressType src_addresses = 11 [(gogoproto.customname) = "SRCAddresses" ];
    SequenceType rule_sequence = 12 [(gogoproto.customname) = "RuleSequence" ];
    repeated PortType src_ports = 13 [(gogoproto.customname) = "SRCPorts" ]; 
}



message UveKeysType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated string uve_key = 1 [(gogoproto.customname) = "UveKey" ]; 
}



message MACLimitControlType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    int64 mac_limit = 1 [(gogoproto.customname) = "MacLimit" ,(gogoproto.casttype) = "int"];
    string mac_limit_action = 2 [(gogoproto.customname) = "MacLimitAction" ,(gogoproto.casttype) = "MACLimitExceedActionType"]; 
}



message RouteTableType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated RouteType route = 1 [(gogoproto.customname) = "Route" ]; 
}



message EcmpHashingIncludeFields {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    bool destination_ip = 1 [(gogoproto.customname) = "DestinationIP" ];
    bool ip_protocol = 2 [(gogoproto.customname) = "IPProtocol" ];
    bool source_ip = 3 [(gogoproto.customname) = "SourceIP" ];
    bool hashing_configured = 4 [(gogoproto.customname) = "HashingConfigured" ];
    bool source_port = 5 [(gogoproto.customname) = "SourcePort" ];
    bool destination_port = 6 [(gogoproto.customname) = "DestinationPort" ]; 
}





message MacAddressesType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    repeated string mac_address = 1 [(gogoproto.customname) = "MacAddress" ]; 
}



message PermType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string owner = 1 [(gogoproto.customname) = "Owner" ];
    int64 owner_access = 2 [(gogoproto.customname) = "OwnerAccess" ,(gogoproto.casttype) = "AccessType"];
    int64 other_access = 3 [(gogoproto.customname) = "OtherAccess" ,(gogoproto.casttype) = "AccessType"];
    string group = 4 [(gogoproto.customname) = "Group" ];
    int64 group_access = 5 [(gogoproto.customname) = "GroupAccess" ,(gogoproto.casttype) = "AccessType"]; 
}



message IdPermsType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    bool enable = 1 [(gogoproto.customname) = "Enable" ];
    string description = 2 [(gogoproto.customname) = "Description" ];
    string created = 3 [(gogoproto.customname) = "Created" ];
    string creator = 4 [(gogoproto.customname) = "Creator" ];
    bool user_visible = 5 [(gogoproto.customname) = "UserVisible" ];
    string last_modified = 6 [(gogoproto.customname) = "LastModified" ];
    PermType permissions = 7 [(gogoproto.customname) = "Permissions" ]; 
}



message SubnetType {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;

    string ip_prefix = 1 [(gogoproto.customname) = "IPPrefix" ];
    int64 ip_prefix_len = 2 [(gogoproto.customname) = "IPPrefixLen" ,(gogoproto.casttype) = "int"]; 
}

